"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@neondatabase";
exports.ids = ["vendor-chunks/@neondatabase"];
exports.modules = {

/***/ "(action-browser)/./node_modules/@neondatabase/serverless/index.mjs":
/*!*********************************************************!*\
  !*** ./node_modules/@neondatabase/serverless/index.mjs ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Client: () => (/* binding */ vn),\n/* harmony export */   ClientBase: () => (/* binding */ export_ClientBase),\n/* harmony export */   Connection: () => (/* binding */ export_Connection),\n/* harmony export */   DatabaseError: () => (/* binding */ export_DatabaseError),\n/* harmony export */   NeonDbError: () => (/* binding */ Ae),\n/* harmony export */   Pool: () => (/* binding */ Zs),\n/* harmony export */   Query: () => (/* binding */ export_Query),\n/* harmony export */   defaults: () => (/* binding */ export_defaults),\n/* harmony export */   neon: () => (/* binding */ Ys),\n/* harmony export */   neonConfig: () => (/* binding */ _e),\n/* harmony export */   types: () => (/* binding */ export_types)\n/* harmony export */ });\nvar to = Object.create;\nvar Ce = Object.defineProperty;\nvar ro = Object.getOwnPropertyDescriptor;\nvar no = Object.getOwnPropertyNames;\nvar io = Object.getPrototypeOf, so = Object.prototype.hasOwnProperty;\nvar oo = (r, e, t)=>e in r ? Ce(r, e, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: t\n    }) : r[e] = t;\nvar a = (r, e)=>Ce(r, \"name\", {\n        value: e,\n        configurable: !0\n    });\nvar z = (r, e)=>()=>(r && (e = r(r = 0)), e);\nvar I = (r, e)=>()=>(e || r((e = {\n            exports: {}\n        }).exports, e), e.exports), ie = (r, e)=>{\n    for(var t in e)Ce(r, t, {\n        get: e[t],\n        enumerable: !0\n    });\n}, An = (r, e, t, n)=>{\n    if (e && typeof e == \"object\" || typeof e == \"function\") for (let i of no(e))!so.call(r, i) && i !== t && Ce(r, i, {\n        get: ()=>e[i],\n        enumerable: !(n = ro(e, i)) || n.enumerable\n    });\n    return r;\n};\nvar Te = (r, e, t)=>(t = r != null ? to(io(r)) : {}, An(e || !r || !r.__esModule ? Ce(t, \"default\", {\n        value: r,\n        enumerable: !0\n    }) : t, r)), N = (r)=>An(Ce({}, \"__esModule\", {\n        value: !0\n    }), r);\nvar _ = (r, e, t)=>oo(r, typeof e != \"symbol\" ? e + \"\" : e, t);\nvar In = I((nt)=>{\n    \"use strict\";\n    p();\n    nt.byteLength = uo;\n    nt.toByteArray = ho;\n    nt.fromByteArray = po;\n    var ae = [], te = [], ao = typeof Uint8Array < \"u\" ? Uint8Array : Array, Pt = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n    for(ve = 0, Cn = Pt.length; ve < Cn; ++ve)ae[ve] = Pt[ve], te[Pt.charCodeAt(ve)] = ve;\n    var ve, Cn;\n    te[45] = 62;\n    te[95] = 63;\n    function Tn(r) {\n        var e = r.length;\n        if (e % 4 > 0) throw new Error(\"Invalid string. Length must be a multiple of 4\");\n        var t = r.indexOf(\"=\");\n        t === -1 && (t = e);\n        var n = t === e ? 0 : 4 - t % 4;\n        return [\n            t,\n            n\n        ];\n    }\n    a(Tn, \"getLens\");\n    function uo(r) {\n        var e = Tn(r), t = e[0], n = e[1];\n        return (t + n) * 3 / 4 - n;\n    }\n    a(uo, \"byteLength\");\n    function co(r, e, t) {\n        return (e + t) * 3 / 4 - t;\n    }\n    a(co, \"_byteLength\");\n    function ho(r) {\n        var e, t = Tn(r), n = t[0], i = t[1], s = new ao(co(r, n, i)), o = 0, u = i > 0 ? n - 4 : n, c;\n        for(c = 0; c < u; c += 4)e = te[r.charCodeAt(c)] << 18 | te[r.charCodeAt(c + 1)] << 12 | te[r.charCodeAt(c + 2)] << 6 | te[r.charCodeAt(c + 3)], s[o++] = e >> 16 & 255, s[o++] = e >> 8 & 255, s[o++] = e & 255;\n        return i === 2 && (e = te[r.charCodeAt(c)] << 2 | te[r.charCodeAt(c + 1)] >> 4, s[o++] = e & 255), i === 1 && (e = te[r.charCodeAt(c)] << 10 | te[r.charCodeAt(c + 1)] << 4 | te[r.charCodeAt(c + 2)] >> 2, s[o++] = e >> 8 & 255, s[o++] = e & 255), s;\n    }\n    a(ho, \"toByteArray\");\n    function lo(r) {\n        return ae[r >> 18 & 63] + ae[r >> 12 & 63] + ae[r >> 6 & 63] + ae[r & 63];\n    }\n    a(lo, \"tripletToBase64\");\n    function fo(r, e, t) {\n        for(var n, i = [], s = e; s < t; s += 3)n = (r[s] << 16 & 16711680) + (r[s + 1] << 8 & 65280) + (r[s + 2] & 255), i.push(lo(n));\n        return i.join(\"\");\n    }\n    a(fo, \"encodeChunk\");\n    function po(r) {\n        for(var e, t = r.length, n = t % 3, i = [], s = 16383, o = 0, u = t - n; o < u; o += s)i.push(fo(r, o, o + s > u ? u : o + s));\n        return n === 1 ? (e = r[t - 1], i.push(ae[e >> 2] + ae[e << 4 & 63] + \"==\")) : n === 2 && (e = (r[t - 2] << 8) + r[t - 1], i.push(ae[e >> 10] + ae[e >> 4 & 63] + ae[e << 2 & 63] + \"=\")), i.join(\"\");\n    }\n    a(po, \"fromByteArray\");\n});\nvar Pn = I((Bt)=>{\n    p();\n    Bt.read = function(r, e, t, n, i) {\n        var s, o, u = i * 8 - n - 1, c = (1 << u) - 1, h = c >> 1, l = -7, d = t ? i - 1 : 0, b = t ? -1 : 1, C = r[e + d];\n        for(d += b, s = C & (1 << -l) - 1, C >>= -l, l += u; l > 0; s = s * 256 + r[e + d], d += b, l -= 8);\n        for(o = s & (1 << -l) - 1, s >>= -l, l += n; l > 0; o = o * 256 + r[e + d], d += b, l -= 8);\n        if (s === 0) s = 1 - h;\n        else {\n            if (s === c) return o ? NaN : (C ? -1 : 1) * (1 / 0);\n            o = o + Math.pow(2, n), s = s - h;\n        }\n        return (C ? -1 : 1) * o * Math.pow(2, s - n);\n    };\n    Bt.write = function(r, e, t, n, i, s) {\n        var o, u, c, h = s * 8 - i - 1, l = (1 << h) - 1, d = l >> 1, b = i === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0, C = n ? 0 : s - 1, B = n ? 1 : -1, W = e < 0 || e === 0 && 1 / e < 0 ? 1 : 0;\n        for(e = Math.abs(e), isNaN(e) || e === 1 / 0 ? (u = isNaN(e) ? 1 : 0, o = l) : (o = Math.floor(Math.log(e) / Math.LN2), e * (c = Math.pow(2, -o)) < 1 && (o--, c *= 2), o + d >= 1 ? e += b / c : e += b * Math.pow(2, 1 - d), e * c >= 2 && (o++, c /= 2), o + d >= l ? (u = 0, o = l) : o + d >= 1 ? (u = (e * c - 1) * Math.pow(2, i), o = o + d) : (u = e * Math.pow(2, d - 1) * Math.pow(2, i), o = 0)); i >= 8; r[t + C] = u & 255, C += B, u /= 256, i -= 8);\n        for(o = o << i | u, h += i; h > 0; r[t + C] = o & 255, C += B, o /= 256, h -= 8);\n        r[t + C - B] |= W * 128;\n    };\n});\nvar $n = I((Le)=>{\n    \"use strict\";\n    p();\n    var Lt = In(), Pe = Pn(), Bn = typeof Symbol == \"function\" && typeof Symbol.for == \"function\" ? Symbol.for(\"nodejs.util.inspect.custom\") : null;\n    Le.Buffer = f;\n    Le.SlowBuffer = So;\n    Le.INSPECT_MAX_BYTES = 50;\n    var it = 2147483647;\n    Le.kMaxLength = it;\n    f.TYPED_ARRAY_SUPPORT = yo();\n    !f.TYPED_ARRAY_SUPPORT && typeof console < \"u\" && typeof console.error == \"function\" && console.error(\"This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support.\");\n    function yo() {\n        try {\n            let r = new Uint8Array(1), e = {\n                foo: a(function() {\n                    return 42;\n                }, \"foo\")\n            };\n            return Object.setPrototypeOf(e, Uint8Array.prototype), Object.setPrototypeOf(r, e), r.foo() === 42;\n        } catch  {\n            return !1;\n        }\n    }\n    a(yo, \"typedArraySupport\");\n    Object.defineProperty(f.prototype, \"parent\", {\n        enumerable: !0,\n        get: a(function() {\n            if (f.isBuffer(this)) return this.buffer;\n        }, \"get\")\n    });\n    Object.defineProperty(f.prototype, \"offset\", {\n        enumerable: !0,\n        get: a(function() {\n            if (f.isBuffer(this)) return this.byteOffset;\n        }, \"get\")\n    });\n    function fe(r) {\n        if (r > it) throw new RangeError('The value \"' + r + '\" is invalid for option \"size\"');\n        let e = new Uint8Array(r);\n        return Object.setPrototypeOf(e, f.prototype), e;\n    }\n    a(fe, \"createBuffer\");\n    function f(r, e, t) {\n        if (typeof r == \"number\") {\n            if (typeof e == \"string\") throw new TypeError('The \"string\" argument must be of type string. Received type number');\n            return Dt(r);\n        }\n        return Mn(r, e, t);\n    }\n    a(f, \"Buffer\");\n    f.poolSize = 8192;\n    function Mn(r, e, t) {\n        if (typeof r == \"string\") return go(r, e);\n        if (ArrayBuffer.isView(r)) return wo(r);\n        if (r == null) throw new TypeError(\"The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type \" + typeof r);\n        if (ue(r, ArrayBuffer) || r && ue(r.buffer, ArrayBuffer) || typeof SharedArrayBuffer < \"u\" && (ue(r, SharedArrayBuffer) || r && ue(r.buffer, SharedArrayBuffer))) return Ft(r, e, t);\n        if (typeof r == \"number\") throw new TypeError('The \"value\" argument must not be of type number. Received type number');\n        let n = r.valueOf && r.valueOf();\n        if (n != null && n !== r) return f.from(n, e, t);\n        let i = bo(r);\n        if (i) return i;\n        if (typeof Symbol < \"u\" && Symbol.toPrimitive != null && typeof r[Symbol.toPrimitive] == \"function\") return f.from(r[Symbol.toPrimitive](\"string\"), e, t);\n        throw new TypeError(\"The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type \" + typeof r);\n    }\n    a(Mn, \"from\");\n    f.from = function(r, e, t) {\n        return Mn(r, e, t);\n    };\n    Object.setPrototypeOf(f.prototype, Uint8Array.prototype);\n    Object.setPrototypeOf(f, Uint8Array);\n    function Dn(r) {\n        if (typeof r != \"number\") throw new TypeError('\"size\" argument must be of type number');\n        if (r < 0) throw new RangeError('The value \"' + r + '\" is invalid for option \"size\"');\n    }\n    a(Dn, \"assertSize\");\n    function mo(r, e, t) {\n        return Dn(r), r <= 0 ? fe(r) : e !== void 0 ? typeof t == \"string\" ? fe(r).fill(e, t) : fe(r).fill(e) : fe(r);\n    }\n    a(mo, \"alloc\");\n    f.alloc = function(r, e, t) {\n        return mo(r, e, t);\n    };\n    function Dt(r) {\n        return Dn(r), fe(r < 0 ? 0 : kt(r) | 0);\n    }\n    a(Dt, \"allocUnsafe\");\n    f.allocUnsafe = function(r) {\n        return Dt(r);\n    };\n    f.allocUnsafeSlow = function(r) {\n        return Dt(r);\n    };\n    function go(r, e) {\n        if ((typeof e != \"string\" || e === \"\") && (e = \"utf8\"), !f.isEncoding(e)) throw new TypeError(\"Unknown encoding: \" + e);\n        let t = kn(r, e) | 0, n = fe(t), i = n.write(r, e);\n        return i !== t && (n = n.slice(0, i)), n;\n    }\n    a(go, \"fromString\");\n    function Rt(r) {\n        let e = r.length < 0 ? 0 : kt(r.length) | 0, t = fe(e);\n        for(let n = 0; n < e; n += 1)t[n] = r[n] & 255;\n        return t;\n    }\n    a(Rt, \"fromArrayLike\");\n    function wo(r) {\n        if (ue(r, Uint8Array)) {\n            let e = new Uint8Array(r);\n            return Ft(e.buffer, e.byteOffset, e.byteLength);\n        }\n        return Rt(r);\n    }\n    a(wo, \"fromArrayView\");\n    function Ft(r, e, t) {\n        if (e < 0 || r.byteLength < e) throw new RangeError('\"offset\" is outside of buffer bounds');\n        if (r.byteLength < e + (t || 0)) throw new RangeError('\"length\" is outside of buffer bounds');\n        let n;\n        return e === void 0 && t === void 0 ? n = new Uint8Array(r) : t === void 0 ? n = new Uint8Array(r, e) : n = new Uint8Array(r, e, t), Object.setPrototypeOf(n, f.prototype), n;\n    }\n    a(Ft, \"fromArrayBuffer\");\n    function bo(r) {\n        if (f.isBuffer(r)) {\n            let e = kt(r.length) | 0, t = fe(e);\n            return t.length === 0 || r.copy(t, 0, 0, e), t;\n        }\n        if (r.length !== void 0) return typeof r.length != \"number\" || Ot(r.length) ? fe(0) : Rt(r);\n        if (r.type === \"Buffer\" && Array.isArray(r.data)) return Rt(r.data);\n    }\n    a(bo, \"fromObject\");\n    function kt(r) {\n        if (r >= it) throw new RangeError(\"Attempt to allocate Buffer larger than maximum size: 0x\" + it.toString(16) + \" bytes\");\n        return r | 0;\n    }\n    a(kt, \"checked\");\n    function So(r) {\n        return +r != r && (r = 0), f.alloc(+r);\n    }\n    a(So, \"SlowBuffer\");\n    f.isBuffer = a(function(e) {\n        return e != null && e._isBuffer === !0 && e !== f.prototype;\n    }, \"isBuffer\");\n    f.compare = a(function(e, t) {\n        if (ue(e, Uint8Array) && (e = f.from(e, e.offset, e.byteLength)), ue(t, Uint8Array) && (t = f.from(t, t.offset, t.byteLength)), !f.isBuffer(e) || !f.isBuffer(t)) throw new TypeError('The \"buf1\", \"buf2\" arguments must be one of type Buffer or Uint8Array');\n        if (e === t) return 0;\n        let n = e.length, i = t.length;\n        for(let s = 0, o = Math.min(n, i); s < o; ++s)if (e[s] !== t[s]) {\n            n = e[s], i = t[s];\n            break;\n        }\n        return n < i ? -1 : i < n ? 1 : 0;\n    }, \"compare\");\n    f.isEncoding = a(function(e) {\n        switch(String(e).toLowerCase()){\n            case \"hex\":\n            case \"utf8\":\n            case \"utf-8\":\n            case \"ascii\":\n            case \"latin1\":\n            case \"binary\":\n            case \"base64\":\n            case \"ucs2\":\n            case \"ucs-2\":\n            case \"utf16le\":\n            case \"utf-16le\":\n                return !0;\n            default:\n                return !1;\n        }\n    }, \"isEncoding\");\n    f.concat = a(function(e, t) {\n        if (!Array.isArray(e)) throw new TypeError('\"list\" argument must be an Array of Buffers');\n        if (e.length === 0) return f.alloc(0);\n        let n;\n        if (t === void 0) for(t = 0, n = 0; n < e.length; ++n)t += e[n].length;\n        let i = f.allocUnsafe(t), s = 0;\n        for(n = 0; n < e.length; ++n){\n            let o = e[n];\n            if (ue(o, Uint8Array)) s + o.length > i.length ? (f.isBuffer(o) || (o = f.from(o)), o.copy(i, s)) : Uint8Array.prototype.set.call(i, o, s);\n            else if (f.isBuffer(o)) o.copy(i, s);\n            else throw new TypeError('\"list\" argument must be an Array of Buffers');\n            s += o.length;\n        }\n        return i;\n    }, \"concat\");\n    function kn(r, e) {\n        if (f.isBuffer(r)) return r.length;\n        if (ArrayBuffer.isView(r) || ue(r, ArrayBuffer)) return r.byteLength;\n        if (typeof r != \"string\") throw new TypeError('The \"string\" argument must be one of type string, Buffer, or ArrayBuffer. Received type ' + typeof r);\n        let t = r.length, n = arguments.length > 2 && arguments[2] === !0;\n        if (!n && t === 0) return 0;\n        let i = !1;\n        for(;;)switch(e){\n            case \"ascii\":\n            case \"latin1\":\n            case \"binary\":\n                return t;\n            case \"utf8\":\n            case \"utf-8\":\n                return Mt(r).length;\n            case \"ucs2\":\n            case \"ucs-2\":\n            case \"utf16le\":\n            case \"utf-16le\":\n                return t * 2;\n            case \"hex\":\n                return t >>> 1;\n            case \"base64\":\n                return Gn(r).length;\n            default:\n                if (i) return n ? -1 : Mt(r).length;\n                e = (\"\" + e).toLowerCase(), i = !0;\n        }\n    }\n    a(kn, \"byteLength\");\n    f.byteLength = kn;\n    function xo(r, e, t) {\n        let n = !1;\n        if ((e === void 0 || e < 0) && (e = 0), e > this.length || ((t === void 0 || t > this.length) && (t = this.length), t <= 0) || (t >>>= 0, e >>>= 0, t <= e)) return \"\";\n        for(r || (r = \"utf8\");;)switch(r){\n            case \"hex\":\n                return Lo(this, e, t);\n            case \"utf8\":\n            case \"utf-8\":\n                return On(this, e, t);\n            case \"ascii\":\n                return Po(this, e, t);\n            case \"latin1\":\n            case \"binary\":\n                return Bo(this, e, t);\n            case \"base64\":\n                return To(this, e, t);\n            case \"ucs2\":\n            case \"ucs-2\":\n            case \"utf16le\":\n            case \"utf-16le\":\n                return Ro(this, e, t);\n            default:\n                if (n) throw new TypeError(\"Unknown encoding: \" + r);\n                r = (r + \"\").toLowerCase(), n = !0;\n        }\n    }\n    a(xo, \"slowToString\");\n    f.prototype._isBuffer = !0;\n    function Ee(r, e, t) {\n        let n = r[e];\n        r[e] = r[t], r[t] = n;\n    }\n    a(Ee, \"swap\");\n    f.prototype.swap16 = a(function() {\n        let e = this.length;\n        if (e % 2 !== 0) throw new RangeError(\"Buffer size must be a multiple of 16-bits\");\n        for(let t = 0; t < e; t += 2)Ee(this, t, t + 1);\n        return this;\n    }, \"swap16\");\n    f.prototype.swap32 = a(function() {\n        let e = this.length;\n        if (e % 4 !== 0) throw new RangeError(\"Buffer size must be a multiple of 32-bits\");\n        for(let t = 0; t < e; t += 4)Ee(this, t, t + 3), Ee(this, t + 1, t + 2);\n        return this;\n    }, \"swap32\");\n    f.prototype.swap64 = a(function() {\n        let e = this.length;\n        if (e % 8 !== 0) throw new RangeError(\"Buffer size must be a multiple of 64-bits\");\n        for(let t = 0; t < e; t += 8)Ee(this, t, t + 7), Ee(this, t + 1, t + 6), Ee(this, t + 2, t + 5), Ee(this, t + 3, t + 4);\n        return this;\n    }, \"swap64\");\n    f.prototype.toString = a(function() {\n        let e = this.length;\n        return e === 0 ? \"\" : arguments.length === 0 ? On(this, 0, e) : xo.apply(this, arguments);\n    }, \"toString\");\n    f.prototype.toLocaleString = f.prototype.toString;\n    f.prototype.equals = a(function(e) {\n        if (!f.isBuffer(e)) throw new TypeError(\"Argument must be a Buffer\");\n        return this === e ? !0 : f.compare(this, e) === 0;\n    }, \"equals\");\n    f.prototype.inspect = a(function() {\n        let e = \"\", t = Le.INSPECT_MAX_BYTES;\n        return e = this.toString(\"hex\", 0, t).replace(/(.{2})/g, \"$1 \").trim(), this.length > t && (e += \" ... \"), \"<Buffer \" + e + \">\";\n    }, \"inspect\");\n    Bn && (f.prototype[Bn] = f.prototype.inspect);\n    f.prototype.compare = a(function(e, t, n, i, s) {\n        if (ue(e, Uint8Array) && (e = f.from(e, e.offset, e.byteLength)), !f.isBuffer(e)) throw new TypeError('The \"target\" argument must be one of type Buffer or Uint8Array. Received type ' + typeof e);\n        if (t === void 0 && (t = 0), n === void 0 && (n = e ? e.length : 0), i === void 0 && (i = 0), s === void 0 && (s = this.length), t < 0 || n > e.length || i < 0 || s > this.length) throw new RangeError(\"out of range index\");\n        if (i >= s && t >= n) return 0;\n        if (i >= s) return -1;\n        if (t >= n) return 1;\n        if (t >>>= 0, n >>>= 0, i >>>= 0, s >>>= 0, this === e) return 0;\n        let o = s - i, u = n - t, c = Math.min(o, u), h = this.slice(i, s), l = e.slice(t, n);\n        for(let d = 0; d < c; ++d)if (h[d] !== l[d]) {\n            o = h[d], u = l[d];\n            break;\n        }\n        return o < u ? -1 : u < o ? 1 : 0;\n    }, \"compare\");\n    function Un(r, e, t, n, i) {\n        if (r.length === 0) return -1;\n        if (typeof t == \"string\" ? (n = t, t = 0) : t > 2147483647 ? t = 2147483647 : t < -2147483648 && (t = -2147483648), t = +t, Ot(t) && (t = i ? 0 : r.length - 1), t < 0 && (t = r.length + t), t >= r.length) {\n            if (i) return -1;\n            t = r.length - 1;\n        } else if (t < 0) if (i) t = 0;\n        else return -1;\n        if (typeof e == \"string\" && (e = f.from(e, n)), f.isBuffer(e)) return e.length === 0 ? -1 : Ln(r, e, t, n, i);\n        if (typeof e == \"number\") return e = e & 255, typeof Uint8Array.prototype.indexOf == \"function\" ? i ? Uint8Array.prototype.indexOf.call(r, e, t) : Uint8Array.prototype.lastIndexOf.call(r, e, t) : Ln(r, [\n            e\n        ], t, n, i);\n        throw new TypeError(\"val must be string, number or Buffer\");\n    }\n    a(Un, \"bidirectionalIndexOf\");\n    function Ln(r, e, t, n, i) {\n        let s = 1, o = r.length, u = e.length;\n        if (n !== void 0 && (n = String(n).toLowerCase(), n === \"ucs2\" || n === \"ucs-2\" || n === \"utf16le\" || n === \"utf-16le\")) {\n            if (r.length < 2 || e.length < 2) return -1;\n            s = 2, o /= 2, u /= 2, t /= 2;\n        }\n        function c(l, d) {\n            return s === 1 ? l[d] : l.readUInt16BE(d * s);\n        }\n        a(c, \"read\");\n        let h;\n        if (i) {\n            let l = -1;\n            for(h = t; h < o; h++)if (c(r, h) === c(e, l === -1 ? 0 : h - l)) {\n                if (l === -1 && (l = h), h - l + 1 === u) return l * s;\n            } else l !== -1 && (h -= h - l), l = -1;\n        } else for(t + u > o && (t = o - u), h = t; h >= 0; h--){\n            let l = !0;\n            for(let d = 0; d < u; d++)if (c(r, h + d) !== c(e, d)) {\n                l = !1;\n                break;\n            }\n            if (l) return h;\n        }\n        return -1;\n    }\n    a(Ln, \"arrayIndexOf\");\n    f.prototype.includes = a(function(e, t, n) {\n        return this.indexOf(e, t, n) !== -1;\n    }, \"includes\");\n    f.prototype.indexOf = a(function(e, t, n) {\n        return Un(this, e, t, n, !0);\n    }, \"indexOf\");\n    f.prototype.lastIndexOf = a(function(e, t, n) {\n        return Un(this, e, t, n, !1);\n    }, \"lastIndexOf\");\n    function vo(r, e, t, n) {\n        t = Number(t) || 0;\n        let i = r.length - t;\n        n ? (n = Number(n), n > i && (n = i)) : n = i;\n        let s = e.length;\n        n > s / 2 && (n = s / 2);\n        let o;\n        for(o = 0; o < n; ++o){\n            let u = parseInt(e.substr(o * 2, 2), 16);\n            if (Ot(u)) return o;\n            r[t + o] = u;\n        }\n        return o;\n    }\n    a(vo, \"hexWrite\");\n    function Eo(r, e, t, n) {\n        return st(Mt(e, r.length - t), r, t, n);\n    }\n    a(Eo, \"utf8Write\");\n    function _o(r, e, t, n) {\n        return st(ko(e), r, t, n);\n    }\n    a(_o, \"asciiWrite\");\n    function Ao(r, e, t, n) {\n        return st(Gn(e), r, t, n);\n    }\n    a(Ao, \"base64Write\");\n    function Co(r, e, t, n) {\n        return st(Uo(e, r.length - t), r, t, n);\n    }\n    a(Co, \"ucs2Write\");\n    f.prototype.write = a(function(e, t, n, i) {\n        if (t === void 0) i = \"utf8\", n = this.length, t = 0;\n        else if (n === void 0 && typeof t == \"string\") i = t, n = this.length, t = 0;\n        else if (isFinite(t)) t = t >>> 0, isFinite(n) ? (n = n >>> 0, i === void 0 && (i = \"utf8\")) : (i = n, n = void 0);\n        else throw new Error(\"Buffer.write(string, encoding, offset[, length]) is no longer supported\");\n        let s = this.length - t;\n        if ((n === void 0 || n > s) && (n = s), e.length > 0 && (n < 0 || t < 0) || t > this.length) throw new RangeError(\"Attempt to write outside buffer bounds\");\n        i || (i = \"utf8\");\n        let o = !1;\n        for(;;)switch(i){\n            case \"hex\":\n                return vo(this, e, t, n);\n            case \"utf8\":\n            case \"utf-8\":\n                return Eo(this, e, t, n);\n            case \"ascii\":\n            case \"latin1\":\n            case \"binary\":\n                return _o(this, e, t, n);\n            case \"base64\":\n                return Ao(this, e, t, n);\n            case \"ucs2\":\n            case \"ucs-2\":\n            case \"utf16le\":\n            case \"utf-16le\":\n                return Co(this, e, t, n);\n            default:\n                if (o) throw new TypeError(\"Unknown encoding: \" + i);\n                i = (\"\" + i).toLowerCase(), o = !0;\n        }\n    }, \"write\");\n    f.prototype.toJSON = a(function() {\n        return {\n            type: \"Buffer\",\n            data: Array.prototype.slice.call(this._arr || this, 0)\n        };\n    }, \"toJSON\");\n    function To(r, e, t) {\n        return e === 0 && t === r.length ? Lt.fromByteArray(r) : Lt.fromByteArray(r.slice(e, t));\n    }\n    a(To, \"base64Slice\");\n    function On(r, e, t) {\n        t = Math.min(r.length, t);\n        let n = [], i = e;\n        for(; i < t;){\n            let s = r[i], o = null, u = s > 239 ? 4 : s > 223 ? 3 : s > 191 ? 2 : 1;\n            if (i + u <= t) {\n                let c, h, l, d;\n                switch(u){\n                    case 1:\n                        s < 128 && (o = s);\n                        break;\n                    case 2:\n                        c = r[i + 1], (c & 192) === 128 && (d = (s & 31) << 6 | c & 63, d > 127 && (o = d));\n                        break;\n                    case 3:\n                        c = r[i + 1], h = r[i + 2], (c & 192) === 128 && (h & 192) === 128 && (d = (s & 15) << 12 | (c & 63) << 6 | h & 63, d > 2047 && (d < 55296 || d > 57343) && (o = d));\n                        break;\n                    case 4:\n                        c = r[i + 1], h = r[i + 2], l = r[i + 3], (c & 192) === 128 && (h & 192) === 128 && (l & 192) === 128 && (d = (s & 15) << 18 | (c & 63) << 12 | (h & 63) << 6 | l & 63, d > 65535 && d < 1114112 && (o = d));\n                }\n            }\n            o === null ? (o = 65533, u = 1) : o > 65535 && (o -= 65536, n.push(o >>> 10 & 1023 | 55296), o = 56320 | o & 1023), n.push(o), i += u;\n        }\n        return Io(n);\n    }\n    a(On, \"utf8Slice\");\n    var Rn = 4096;\n    function Io(r) {\n        let e = r.length;\n        if (e <= Rn) return String.fromCharCode.apply(String, r);\n        let t = \"\", n = 0;\n        for(; n < e;)t += String.fromCharCode.apply(String, r.slice(n, n += Rn));\n        return t;\n    }\n    a(Io, \"decodeCodePointsArray\");\n    function Po(r, e, t) {\n        let n = \"\";\n        t = Math.min(r.length, t);\n        for(let i = e; i < t; ++i)n += String.fromCharCode(r[i] & 127);\n        return n;\n    }\n    a(Po, \"asciiSlice\");\n    function Bo(r, e, t) {\n        let n = \"\";\n        t = Math.min(r.length, t);\n        for(let i = e; i < t; ++i)n += String.fromCharCode(r[i]);\n        return n;\n    }\n    a(Bo, \"latin1Slice\");\n    function Lo(r, e, t) {\n        let n = r.length;\n        (!e || e < 0) && (e = 0), (!t || t < 0 || t > n) && (t = n);\n        let i = \"\";\n        for(let s = e; s < t; ++s)i += Oo[r[s]];\n        return i;\n    }\n    a(Lo, \"hexSlice\");\n    function Ro(r, e, t) {\n        let n = r.slice(e, t), i = \"\";\n        for(let s = 0; s < n.length - 1; s += 2)i += String.fromCharCode(n[s] + n[s + 1] * 256);\n        return i;\n    }\n    a(Ro, \"utf16leSlice\");\n    f.prototype.slice = a(function(e, t) {\n        let n = this.length;\n        e = ~~e, t = t === void 0 ? n : ~~t, e < 0 ? (e += n, e < 0 && (e = 0)) : e > n && (e = n), t < 0 ? (t += n, t < 0 && (t = 0)) : t > n && (t = n), t < e && (t = e);\n        let i = this.subarray(e, t);\n        return Object.setPrototypeOf(i, f.prototype), i;\n    }, \"slice\");\n    function q(r, e, t) {\n        if (r % 1 !== 0 || r < 0) throw new RangeError(\"offset is not uint\");\n        if (r + e > t) throw new RangeError(\"Trying to access beyond buffer length\");\n    }\n    a(q, \"checkOffset\");\n    f.prototype.readUintLE = f.prototype.readUIntLE = a(function(e, t, n) {\n        e = e >>> 0, t = t >>> 0, n || q(e, t, this.length);\n        let i = this[e], s = 1, o = 0;\n        for(; ++o < t && (s *= 256);)i += this[e + o] * s;\n        return i;\n    }, \"readUIntLE\");\n    f.prototype.readUintBE = f.prototype.readUIntBE = a(function(e, t, n) {\n        e = e >>> 0, t = t >>> 0, n || q(e, t, this.length);\n        let i = this[e + --t], s = 1;\n        for(; t > 0 && (s *= 256);)i += this[e + --t] * s;\n        return i;\n    }, \"readUIntBE\");\n    f.prototype.readUint8 = f.prototype.readUInt8 = a(function(e, t) {\n        return e = e >>> 0, t || q(e, 1, this.length), this[e];\n    }, \"readUInt8\");\n    f.prototype.readUint16LE = f.prototype.readUInt16LE = a(function(e, t) {\n        return e = e >>> 0, t || q(e, 2, this.length), this[e] | this[e + 1] << 8;\n    }, \"readUInt16LE\");\n    f.prototype.readUint16BE = f.prototype.readUInt16BE = a(function(e, t) {\n        return e = e >>> 0, t || q(e, 2, this.length), this[e] << 8 | this[e + 1];\n    }, \"readUInt16BE\");\n    f.prototype.readUint32LE = f.prototype.readUInt32LE = a(function(e, t) {\n        return e = e >>> 0, t || q(e, 4, this.length), (this[e] | this[e + 1] << 8 | this[e + 2] << 16) + this[e + 3] * 16777216;\n    }, \"readUInt32LE\");\n    f.prototype.readUint32BE = f.prototype.readUInt32BE = a(function(e, t) {\n        return e = e >>> 0, t || q(e, 4, this.length), this[e] * 16777216 + (this[e + 1] << 16 | this[e + 2] << 8 | this[e + 3]);\n    }, \"readUInt32BE\");\n    f.prototype.readBigUInt64LE = ge(a(function(e) {\n        e = e >>> 0, Be(e, \"offset\");\n        let t = this[e], n = this[e + 7];\n        (t === void 0 || n === void 0) && We(e, this.length - 8);\n        let i = t + this[++e] * 2 ** 8 + this[++e] * 2 ** 16 + this[++e] * 2 ** 24, s = this[++e] + this[++e] * 2 ** 8 + this[++e] * 2 ** 16 + n * 2 ** 24;\n        return BigInt(i) + (BigInt(s) << BigInt(32));\n    }, \"readBigUInt64LE\"));\n    f.prototype.readBigUInt64BE = ge(a(function(e) {\n        e = e >>> 0, Be(e, \"offset\");\n        let t = this[e], n = this[e + 7];\n        (t === void 0 || n === void 0) && We(e, this.length - 8);\n        let i = t * 2 ** 24 + this[++e] * 2 ** 16 + this[++e] * 2 ** 8 + this[++e], s = this[++e] * 2 ** 24 + this[++e] * 2 ** 16 + this[++e] * 2 ** 8 + n;\n        return (BigInt(i) << BigInt(32)) + BigInt(s);\n    }, \"readBigUInt64BE\"));\n    f.prototype.readIntLE = a(function(e, t, n) {\n        e = e >>> 0, t = t >>> 0, n || q(e, t, this.length);\n        let i = this[e], s = 1, o = 0;\n        for(; ++o < t && (s *= 256);)i += this[e + o] * s;\n        return s *= 128, i >= s && (i -= Math.pow(2, 8 * t)), i;\n    }, \"readIntLE\");\n    f.prototype.readIntBE = a(function(e, t, n) {\n        e = e >>> 0, t = t >>> 0, n || q(e, t, this.length);\n        let i = t, s = 1, o = this[e + --i];\n        for(; i > 0 && (s *= 256);)o += this[e + --i] * s;\n        return s *= 128, o >= s && (o -= Math.pow(2, 8 * t)), o;\n    }, \"readIntBE\");\n    f.prototype.readInt8 = a(function(e, t) {\n        return e = e >>> 0, t || q(e, 1, this.length), this[e] & 128 ? (255 - this[e] + 1) * -1 : this[e];\n    }, \"readInt8\");\n    f.prototype.readInt16LE = a(function(e, t) {\n        e = e >>> 0, t || q(e, 2, this.length);\n        let n = this[e] | this[e + 1] << 8;\n        return n & 32768 ? n | 4294901760 : n;\n    }, \"readInt16LE\");\n    f.prototype.readInt16BE = a(function(e, t) {\n        e = e >>> 0, t || q(e, 2, this.length);\n        let n = this[e + 1] | this[e] << 8;\n        return n & 32768 ? n | 4294901760 : n;\n    }, \"readInt16BE\");\n    f.prototype.readInt32LE = a(function(e, t) {\n        return e = e >>> 0, t || q(e, 4, this.length), this[e] | this[e + 1] << 8 | this[e + 2] << 16 | this[e + 3] << 24;\n    }, \"readInt32LE\");\n    f.prototype.readInt32BE = a(function(e, t) {\n        return e = e >>> 0, t || q(e, 4, this.length), this[e] << 24 | this[e + 1] << 16 | this[e + 2] << 8 | this[e + 3];\n    }, \"readInt32BE\");\n    f.prototype.readBigInt64LE = ge(a(function(e) {\n        e = e >>> 0, Be(e, \"offset\");\n        let t = this[e], n = this[e + 7];\n        (t === void 0 || n === void 0) && We(e, this.length - 8);\n        let i = this[e + 4] + this[e + 5] * 2 ** 8 + this[e + 6] * 2 ** 16 + (n << 24);\n        return (BigInt(i) << BigInt(32)) + BigInt(t + this[++e] * 2 ** 8 + this[++e] * 2 ** 16 + this[++e] * 2 ** 24);\n    }, \"readBigInt64LE\"));\n    f.prototype.readBigInt64BE = ge(a(function(e) {\n        e = e >>> 0, Be(e, \"offset\");\n        let t = this[e], n = this[e + 7];\n        (t === void 0 || n === void 0) && We(e, this.length - 8);\n        let i = (t << 24) + this[++e] * 2 ** 16 + this[++e] * 2 ** 8 + this[++e];\n        return (BigInt(i) << BigInt(32)) + BigInt(this[++e] * 2 ** 24 + this[++e] * 2 ** 16 + this[++e] * 2 ** 8 + n);\n    }, \"readBigInt64BE\"));\n    f.prototype.readFloatLE = a(function(e, t) {\n        return e = e >>> 0, t || q(e, 4, this.length), Pe.read(this, e, !0, 23, 4);\n    }, \"readFloatLE\");\n    f.prototype.readFloatBE = a(function(e, t) {\n        return e = e >>> 0, t || q(e, 4, this.length), Pe.read(this, e, !1, 23, 4);\n    }, \"readFloatBE\");\n    f.prototype.readDoubleLE = a(function(e, t) {\n        return e = e >>> 0, t || q(e, 8, this.length), Pe.read(this, e, !0, 52, 8);\n    }, \"readDoubleLE\");\n    f.prototype.readDoubleBE = a(function(e, t) {\n        return e = e >>> 0, t || q(e, 8, this.length), Pe.read(this, e, !1, 52, 8);\n    }, \"readDoubleBE\");\n    function Y(r, e, t, n, i, s) {\n        if (!f.isBuffer(r)) throw new TypeError('\"buffer\" argument must be a Buffer instance');\n        if (e > i || e < s) throw new RangeError('\"value\" argument is out of bounds');\n        if (t + n > r.length) throw new RangeError(\"Index out of range\");\n    }\n    a(Y, \"checkInt\");\n    f.prototype.writeUintLE = f.prototype.writeUIntLE = a(function(e, t, n, i) {\n        if (e = +e, t = t >>> 0, n = n >>> 0, !i) {\n            let u = Math.pow(2, 8 * n) - 1;\n            Y(this, e, t, n, u, 0);\n        }\n        let s = 1, o = 0;\n        for(this[t] = e & 255; ++o < n && (s *= 256);)this[t + o] = e / s & 255;\n        return t + n;\n    }, \"writeUIntLE\");\n    f.prototype.writeUintBE = f.prototype.writeUIntBE = a(function(e, t, n, i) {\n        if (e = +e, t = t >>> 0, n = n >>> 0, !i) {\n            let u = Math.pow(2, 8 * n) - 1;\n            Y(this, e, t, n, u, 0);\n        }\n        let s = n - 1, o = 1;\n        for(this[t + s] = e & 255; --s >= 0 && (o *= 256);)this[t + s] = e / o & 255;\n        return t + n;\n    }, \"writeUIntBE\");\n    f.prototype.writeUint8 = f.prototype.writeUInt8 = a(function(e, t, n) {\n        return e = +e, t = t >>> 0, n || Y(this, e, t, 1, 255, 0), this[t] = e & 255, t + 1;\n    }, \"writeUInt8\");\n    f.prototype.writeUint16LE = f.prototype.writeUInt16LE = a(function(e, t, n) {\n        return e = +e, t = t >>> 0, n || Y(this, e, t, 2, 65535, 0), this[t] = e & 255, this[t + 1] = e >>> 8, t + 2;\n    }, \"writeUInt16LE\");\n    f.prototype.writeUint16BE = f.prototype.writeUInt16BE = a(function(e, t, n) {\n        return e = +e, t = t >>> 0, n || Y(this, e, t, 2, 65535, 0), this[t] = e >>> 8, this[t + 1] = e & 255, t + 2;\n    }, \"writeUInt16BE\");\n    f.prototype.writeUint32LE = f.prototype.writeUInt32LE = a(function(e, t, n) {\n        return e = +e, t = t >>> 0, n || Y(this, e, t, 4, 4294967295, 0), this[t + 3] = e >>> 24, this[t + 2] = e >>> 16, this[t + 1] = e >>> 8, this[t] = e & 255, t + 4;\n    }, \"writeUInt32LE\");\n    f.prototype.writeUint32BE = f.prototype.writeUInt32BE = a(function(e, t, n) {\n        return e = +e, t = t >>> 0, n || Y(this, e, t, 4, 4294967295, 0), this[t] = e >>> 24, this[t + 1] = e >>> 16, this[t + 2] = e >>> 8, this[t + 3] = e & 255, t + 4;\n    }, \"writeUInt32BE\");\n    function Nn(r, e, t, n, i) {\n        Hn(e, n, i, r, t, 7);\n        let s = Number(e & BigInt(4294967295));\n        r[t++] = s, s = s >> 8, r[t++] = s, s = s >> 8, r[t++] = s, s = s >> 8, r[t++] = s;\n        let o = Number(e >> BigInt(32) & BigInt(4294967295));\n        return r[t++] = o, o = o >> 8, r[t++] = o, o = o >> 8, r[t++] = o, o = o >> 8, r[t++] = o, t;\n    }\n    a(Nn, \"wrtBigUInt64LE\");\n    function qn(r, e, t, n, i) {\n        Hn(e, n, i, r, t, 7);\n        let s = Number(e & BigInt(4294967295));\n        r[t + 7] = s, s = s >> 8, r[t + 6] = s, s = s >> 8, r[t + 5] = s, s = s >> 8, r[t + 4] = s;\n        let o = Number(e >> BigInt(32) & BigInt(4294967295));\n        return r[t + 3] = o, o = o >> 8, r[t + 2] = o, o = o >> 8, r[t + 1] = o, o = o >> 8, r[t] = o, t + 8;\n    }\n    a(qn, \"wrtBigUInt64BE\");\n    f.prototype.writeBigUInt64LE = ge(a(function(e, t = 0) {\n        return Nn(this, e, t, BigInt(0), BigInt(\"0xffffffffffffffff\"));\n    }, \"writeBigUInt64LE\"));\n    f.prototype.writeBigUInt64BE = ge(a(function(e, t = 0) {\n        return qn(this, e, t, BigInt(0), BigInt(\"0xffffffffffffffff\"));\n    }, \"writeBigUInt64BE\"));\n    f.prototype.writeIntLE = a(function(e, t, n, i) {\n        if (e = +e, t = t >>> 0, !i) {\n            let c = Math.pow(2, 8 * n - 1);\n            Y(this, e, t, n, c - 1, -c);\n        }\n        let s = 0, o = 1, u = 0;\n        for(this[t] = e & 255; ++s < n && (o *= 256);)e < 0 && u === 0 && this[t + s - 1] !== 0 && (u = 1), this[t + s] = (e / o >> 0) - u & 255;\n        return t + n;\n    }, \"writeIntLE\");\n    f.prototype.writeIntBE = a(function(e, t, n, i) {\n        if (e = +e, t = t >>> 0, !i) {\n            let c = Math.pow(2, 8 * n - 1);\n            Y(this, e, t, n, c - 1, -c);\n        }\n        let s = n - 1, o = 1, u = 0;\n        for(this[t + s] = e & 255; --s >= 0 && (o *= 256);)e < 0 && u === 0 && this[t + s + 1] !== 0 && (u = 1), this[t + s] = (e / o >> 0) - u & 255;\n        return t + n;\n    }, \"writeIntBE\");\n    f.prototype.writeInt8 = a(function(e, t, n) {\n        return e = +e, t = t >>> 0, n || Y(this, e, t, 1, 127, -128), e < 0 && (e = 255 + e + 1), this[t] = e & 255, t + 1;\n    }, \"writeInt8\");\n    f.prototype.writeInt16LE = a(function(e, t, n) {\n        return e = +e, t = t >>> 0, n || Y(this, e, t, 2, 32767, -32768), this[t] = e & 255, this[t + 1] = e >>> 8, t + 2;\n    }, \"writeInt16LE\");\n    f.prototype.writeInt16BE = a(function(e, t, n) {\n        return e = +e, t = t >>> 0, n || Y(this, e, t, 2, 32767, -32768), this[t] = e >>> 8, this[t + 1] = e & 255, t + 2;\n    }, \"writeInt16BE\");\n    f.prototype.writeInt32LE = a(function(e, t, n) {\n        return e = +e, t = t >>> 0, n || Y(this, e, t, 4, 2147483647, -2147483648), this[t] = e & 255, this[t + 1] = e >>> 8, this[t + 2] = e >>> 16, this[t + 3] = e >>> 24, t + 4;\n    }, \"writeInt32LE\");\n    f.prototype.writeInt32BE = a(function(e, t, n) {\n        return e = +e, t = t >>> 0, n || Y(this, e, t, 4, 2147483647, -2147483648), e < 0 && (e = 4294967295 + e + 1), this[t] = e >>> 24, this[t + 1] = e >>> 16, this[t + 2] = e >>> 8, this[t + 3] = e & 255, t + 4;\n    }, \"writeInt32BE\");\n    f.prototype.writeBigInt64LE = ge(a(function(e, t = 0) {\n        return Nn(this, e, t, -BigInt(\"0x8000000000000000\"), BigInt(\"0x7fffffffffffffff\"));\n    }, \"writeBigInt64LE\"));\n    f.prototype.writeBigInt64BE = ge(a(function(e, t = 0) {\n        return qn(this, e, t, -BigInt(\"0x8000000000000000\"), BigInt(\"0x7fffffffffffffff\"));\n    }, \"writeBigInt64BE\"));\n    function Qn(r, e, t, n, i, s) {\n        if (t + n > r.length) throw new RangeError(\"Index out of range\");\n        if (t < 0) throw new RangeError(\"Index out of range\");\n    }\n    a(Qn, \"checkIEEE754\");\n    function Wn(r, e, t, n, i) {\n        return e = +e, t = t >>> 0, i || Qn(r, e, t, 4, 34028234663852886e22, -34028234663852886e22), Pe.write(r, e, t, n, 23, 4), t + 4;\n    }\n    a(Wn, \"writeFloat\");\n    f.prototype.writeFloatLE = a(function(e, t, n) {\n        return Wn(this, e, t, !0, n);\n    }, \"writeFloatLE\");\n    f.prototype.writeFloatBE = a(function(e, t, n) {\n        return Wn(this, e, t, !1, n);\n    }, \"writeFloatBE\");\n    function jn(r, e, t, n, i) {\n        return e = +e, t = t >>> 0, i || Qn(r, e, t, 8, 17976931348623157e292, -17976931348623157e292), Pe.write(r, e, t, n, 52, 8), t + 8;\n    }\n    a(jn, \"writeDouble\");\n    f.prototype.writeDoubleLE = a(function(e, t, n) {\n        return jn(this, e, t, !0, n);\n    }, \"writeDoubleLE\");\n    f.prototype.writeDoubleBE = a(function(e, t, n) {\n        return jn(this, e, t, !1, n);\n    }, \"writeDoubleBE\");\n    f.prototype.copy = a(function(e, t, n, i) {\n        if (!f.isBuffer(e)) throw new TypeError(\"argument should be a Buffer\");\n        if (n || (n = 0), !i && i !== 0 && (i = this.length), t >= e.length && (t = e.length), t || (t = 0), i > 0 && i < n && (i = n), i === n || e.length === 0 || this.length === 0) return 0;\n        if (t < 0) throw new RangeError(\"targetStart out of bounds\");\n        if (n < 0 || n >= this.length) throw new RangeError(\"Index out of range\");\n        if (i < 0) throw new RangeError(\"sourceEnd out of bounds\");\n        i > this.length && (i = this.length), e.length - t < i - n && (i = e.length - t + n);\n        let s = i - n;\n        return this === e && typeof Uint8Array.prototype.copyWithin == \"function\" ? this.copyWithin(t, n, i) : Uint8Array.prototype.set.call(e, this.subarray(n, i), t), s;\n    }, \"copy\");\n    f.prototype.fill = a(function(e, t, n, i) {\n        if (typeof e == \"string\") {\n            if (typeof t == \"string\" ? (i = t, t = 0, n = this.length) : typeof n == \"string\" && (i = n, n = this.length), i !== void 0 && typeof i != \"string\") throw new TypeError(\"encoding must be a string\");\n            if (typeof i == \"string\" && !f.isEncoding(i)) throw new TypeError(\"Unknown encoding: \" + i);\n            if (e.length === 1) {\n                let o = e.charCodeAt(0);\n                (i === \"utf8\" && o < 128 || i === \"latin1\") && (e = o);\n            }\n        } else typeof e == \"number\" ? e = e & 255 : typeof e == \"boolean\" && (e = Number(e));\n        if (t < 0 || this.length < t || this.length < n) throw new RangeError(\"Out of range index\");\n        if (n <= t) return this;\n        t = t >>> 0, n = n === void 0 ? this.length : n >>> 0, e || (e = 0);\n        let s;\n        if (typeof e == \"number\") for(s = t; s < n; ++s)this[s] = e;\n        else {\n            let o = f.isBuffer(e) ? e : f.from(e, i), u = o.length;\n            if (u === 0) throw new TypeError('The value \"' + e + '\" is invalid for argument \"value\"');\n            for(s = 0; s < n - t; ++s)this[s + t] = o[s % u];\n        }\n        return this;\n    }, \"fill\");\n    var Ie = {};\n    function Ut(r, e, t) {\n        var n;\n        Ie[r] = (n = class extends t {\n            constructor(){\n                super(), Object.defineProperty(this, \"message\", {\n                    value: e.apply(this, arguments),\n                    writable: !0,\n                    configurable: !0\n                }), this.name = `${this.name} [${r}]`, this.stack, delete this.name;\n            }\n            get code() {\n                return r;\n            }\n            set code(s) {\n                Object.defineProperty(this, \"code\", {\n                    configurable: !0,\n                    enumerable: !0,\n                    value: s,\n                    writable: !0\n                });\n            }\n            toString() {\n                return `${this.name} [${r}]: ${this.message}`;\n            }\n        }, a(n, \"NodeError\"), n);\n    }\n    a(Ut, \"E\");\n    Ut(\"ERR_BUFFER_OUT_OF_BOUNDS\", function(r) {\n        return r ? `${r} is outside of buffer bounds` : \"Attempt to access memory outside buffer bounds\";\n    }, RangeError);\n    Ut(\"ERR_INVALID_ARG_TYPE\", function(r, e) {\n        return `The \"${r}\" argum\\\nent must be of type number. Received type ${typeof e}`;\n    }, TypeError);\n    Ut(\"ERR_OUT_OF_RANGE\", function(r, e, t) {\n        let n = `The value of \"${r}\" is out of range.`, i = t;\n        return Number.isInteger(t) && Math.abs(t) > 2 ** 32 ? i = Fn(String(t)) : typeof t == \"bigint\" && (i = String(t), (t > BigInt(2) ** BigInt(32) || t < -(BigInt(2) ** BigInt(32))) && (i = Fn(i)), i += \"n\"), n += ` It\\\n must be ${e}. Received ${i}`, n;\n    }, RangeError);\n    function Fn(r) {\n        let e = \"\", t = r.length, n = r[0] === \"-\" ? 1 : 0;\n        for(; t >= n + 4; t -= 3)e = `_${r.slice(t - 3, t)}${e}`;\n        return `${r.slice(0, t)}${e}`;\n    }\n    a(Fn, \"addNumericalSeparator\");\n    function Fo(r, e, t) {\n        Be(e, \"offset\"), (r[e] === void 0 || r[e + t] === void 0) && We(e, r.length - (t + 1));\n    }\n    a(Fo, \"checkBounds\");\n    function Hn(r, e, t, n, i, s) {\n        if (r > t || r < e) {\n            let o = typeof e == \"bigint\" ? \"n\" : \"\", u;\n            throw s > 3 ? e === 0 || e === BigInt(0) ? u = `>= 0${o} and < 2${o} ** ${(s + 1) * 8}${o}` : u = `>= -(2${o} ** ${(s + 1) * 8 - 1}${o}) and \\\n< 2 ** ${(s + 1) * 8 - 1}${o}` : u = `>= ${e}${o} and <= ${t}${o}`, new Ie.ERR_OUT_OF_RANGE(\"value\", u, r);\n        }\n        Fo(n, i, s);\n    }\n    a(Hn, \"checkIntBI\");\n    function Be(r, e) {\n        if (typeof r != \"number\") throw new Ie.ERR_INVALID_ARG_TYPE(e, \"number\", r);\n    }\n    a(Be, \"validateNumber\");\n    function We(r, e, t) {\n        throw Math.floor(r) !== r ? (Be(r, t), new Ie.ERR_OUT_OF_RANGE(t || \"offset\", \"an integer\", r)) : e < 0 ? new Ie.ERR_BUFFER_OUT_OF_BOUNDS : new Ie.ERR_OUT_OF_RANGE(t || \"offset\", `>= ${t ? 1 : 0} and <= ${e}`, r);\n    }\n    a(We, \"boundsError\");\n    var Mo = /[^+/0-9A-Za-z-_]/g;\n    function Do(r) {\n        if (r = r.split(\"=\")[0], r = r.trim().replace(Mo, \"\"), r.length < 2) return \"\";\n        for(; r.length % 4 !== 0;)r = r + \"=\";\n        return r;\n    }\n    a(Do, \"base64clean\");\n    function Mt(r, e) {\n        e = e || 1 / 0;\n        let t, n = r.length, i = null, s = [];\n        for(let o = 0; o < n; ++o){\n            if (t = r.charCodeAt(o), t > 55295 && t < 57344) {\n                if (!i) {\n                    if (t > 56319) {\n                        (e -= 3) > -1 && s.push(239, 191, 189);\n                        continue;\n                    } else if (o + 1 === n) {\n                        (e -= 3) > -1 && s.push(239, 191, 189);\n                        continue;\n                    }\n                    i = t;\n                    continue;\n                }\n                if (t < 56320) {\n                    (e -= 3) > -1 && s.push(239, 191, 189), i = t;\n                    continue;\n                }\n                t = (i - 55296 << 10 | t - 56320) + 65536;\n            } else i && (e -= 3) > -1 && s.push(239, 191, 189);\n            if (i = null, t < 128) {\n                if ((e -= 1) < 0) break;\n                s.push(t);\n            } else if (t < 2048) {\n                if ((e -= 2) < 0) break;\n                s.push(t >> 6 | 192, t & 63 | 128);\n            } else if (t < 65536) {\n                if ((e -= 3) < 0) break;\n                s.push(t >> 12 | 224, t >> 6 & 63 | 128, t & 63 | 128);\n            } else if (t < 1114112) {\n                if ((e -= 4) < 0) break;\n                s.push(t >> 18 | 240, t >> 12 & 63 | 128, t >> 6 & 63 | 128, t & 63 | 128);\n            } else throw new Error(\"Invalid code point\");\n        }\n        return s;\n    }\n    a(Mt, \"utf8ToBytes\");\n    function ko(r) {\n        let e = [];\n        for(let t = 0; t < r.length; ++t)e.push(r.charCodeAt(t) & 255);\n        return e;\n    }\n    a(ko, \"asciiToBytes\");\n    function Uo(r, e) {\n        let t, n, i, s = [];\n        for(let o = 0; o < r.length && !((e -= 2) < 0); ++o)t = r.charCodeAt(o), n = t >> 8, i = t % 256, s.push(i), s.push(n);\n        return s;\n    }\n    a(Uo, \"utf16leToBytes\");\n    function Gn(r) {\n        return Lt.toByteArray(Do(r));\n    }\n    a(Gn, \"base64ToBytes\");\n    function st(r, e, t, n) {\n        let i;\n        for(i = 0; i < n && !(i + t >= e.length || i >= r.length); ++i)e[i + t] = r[i];\n        return i;\n    }\n    a(st, \"blitBuffer\");\n    function ue(r, e) {\n        return r instanceof e || r != null && r.constructor != null && r.constructor.name != null && r.constructor.name === e.name;\n    }\n    a(ue, \"isInstance\");\n    function Ot(r) {\n        return r !== r;\n    }\n    a(Ot, \"numberIsNaN\");\n    var Oo = function() {\n        let r = \"0123456789abcdef\", e = new Array(256);\n        for(let t = 0; t < 16; ++t){\n            let n = t * 16;\n            for(let i = 0; i < 16; ++i)e[n + i] = r[t] + r[i];\n        }\n        return e;\n    }();\n    function ge(r) {\n        return typeof BigInt > \"u\" ? No : r;\n    }\n    a(ge, \"defineBigIntMethod\");\n    function No() {\n        throw new Error(\"BigInt not supported\");\n    }\n    a(No, \"BufferBigIntNotDefined\");\n});\nvar S, x, v, g, y, m, p = z(()=>{\n    \"use strict\";\n    S = globalThis, x = globalThis.setImmediate ?? ((r)=>setTimeout(r, 0)), v = globalThis.clearImmediate ?? ((r)=>clearTimeout(r)), g = globalThis.crypto ?? {};\n    g.subtle ?? (g.subtle = {});\n    y = typeof globalThis.Buffer == \"function\" && typeof globalThis.Buffer.allocUnsafe == \"function\" ? globalThis.Buffer : $n().Buffer, m = globalThis.process ?? {};\n    m.env ?? (m.env = {});\n    try {\n        m.nextTick(()=>{});\n    } catch  {\n        let e = Promise.resolve();\n        m.nextTick = e.then.bind(e);\n    }\n});\nvar we = I((Xc, Nt)=>{\n    \"use strict\";\n    p();\n    var Re = typeof Reflect == \"object\" ? Reflect : null, Vn = Re && typeof Re.apply == \"function\" ? Re.apply : a(function(e, t, n) {\n        return Function.prototype.apply.call(e, t, n);\n    }, \"ReflectApply\"), ot;\n    Re && typeof Re.ownKeys == \"function\" ? ot = Re.ownKeys : Object.getOwnPropertySymbols ? ot = a(function(e) {\n        return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e));\n    }, \"ReflectOwnKeys\") : ot = a(function(e) {\n        return Object.getOwnPropertyNames(e);\n    }, \"ReflectOwnKeys\");\n    function qo(r) {\n        console && console.warn && console.warn(r);\n    }\n    a(qo, \"ProcessEmitWarning\");\n    var zn = Number.isNaN || a(function(e) {\n        return e !== e;\n    }, \"NumberIsNaN\");\n    function L() {\n        L.init.call(this);\n    }\n    a(L, \"EventEmitter\");\n    Nt.exports = L;\n    Nt.exports.once = Ho;\n    L.EventEmitter = L;\n    L.prototype._events = void 0;\n    L.prototype._eventsCount = 0;\n    L.prototype._maxListeners = void 0;\n    var Kn = 10;\n    function at(r) {\n        if (typeof r != \"function\") throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof r);\n    }\n    a(at, \"checkListener\");\n    Object.defineProperty(L, \"defaultMaxListeners\", {\n        enumerable: !0,\n        get: a(function() {\n            return Kn;\n        }, \"get\"),\n        set: a(function(r) {\n            if (typeof r != \"number\" || r < 0 || zn(r)) throw new RangeError('The value of \"defaultMaxListeners\" is out of range. It must be a non-negative number. Received ' + r + \".\");\n            Kn = r;\n        }, \"set\")\n    });\n    L.init = function() {\n        (this._events === void 0 || this._events === Object.getPrototypeOf(this)._events) && (this._events = Object.create(null), this._eventsCount = 0), this._maxListeners = this._maxListeners || void 0;\n    };\n    L.prototype.setMaxListeners = a(function(e) {\n        if (typeof e != \"number\" || e < 0 || zn(e)) throw new RangeError('The value of \"n\" is out of range. It must be a non-negative number. Received ' + e + \".\");\n        return this._maxListeners = e, this;\n    }, \"setMaxListeners\");\n    function Yn(r) {\n        return r._maxListeners === void 0 ? L.defaultMaxListeners : r._maxListeners;\n    }\n    a(Yn, \"_getMaxListeners\");\n    L.prototype.getMaxListeners = a(function() {\n        return Yn(this);\n    }, \"getMaxListeners\");\n    L.prototype.emit = a(function(e) {\n        for(var t = [], n = 1; n < arguments.length; n++)t.push(arguments[n]);\n        var i = e === \"error\", s = this._events;\n        if (s !== void 0) i = i && s.error === void 0;\n        else if (!i) return !1;\n        if (i) {\n            var o;\n            if (t.length > 0 && (o = t[0]), o instanceof Error) throw o;\n            var u = new Error(\"Unhandled error.\" + (o ? \" (\" + o.message + \")\" : \"\"));\n            throw u.context = o, u;\n        }\n        var c = s[e];\n        if (c === void 0) return !1;\n        if (typeof c == \"function\") Vn(c, this, t);\n        else for(var h = c.length, l = ti(c, h), n = 0; n < h; ++n)Vn(l[n], this, t);\n        return !0;\n    }, \"emit\");\n    function Zn(r, e, t, n) {\n        var i, s, o;\n        if (at(t), s = r._events, s === void 0 ? (s = r._events = Object.create(null), r._eventsCount = 0) : (s.newListener !== void 0 && (r.emit(\"newListener\", e, t.listener ? t.listener : t), s = r._events), o = s[e]), o === void 0) o = s[e] = t, ++r._eventsCount;\n        else if (typeof o == \"function\" ? o = s[e] = n ? [\n            t,\n            o\n        ] : [\n            o,\n            t\n        ] : n ? o.unshift(t) : o.push(t), i = Yn(r), i > 0 && o.length > i && !o.warned) {\n            o.warned = !0;\n            var u = new Error(\"Possible EventEmitter memory leak detected. \" + o.length + \" \" + String(e) + \" listeners added. Use emitter.setMaxListeners() to increase limit\");\n            u.name = \"MaxListenersExceededWarning\", u.emitter = r, u.type = e, u.count = o.length, qo(u);\n        }\n        return r;\n    }\n    a(Zn, \"_addListener\");\n    L.prototype.addListener = a(function(e, t) {\n        return Zn(this, e, t, !1);\n    }, \"addListener\");\n    L.prototype.on = L.prototype.addListener;\n    L.prototype.prependListener = a(function(e, t) {\n        return Zn(this, e, t, !0);\n    }, \"prependListener\");\n    function Qo() {\n        if (!this.fired) return this.target.removeListener(this.type, this.wrapFn), this.fired = !0, arguments.length === 0 ? this.listener.call(this.target) : this.listener.apply(this.target, arguments);\n    }\n    a(Qo, \"onceWrapper\");\n    function Jn(r, e, t) {\n        var n = {\n            fired: !1,\n            wrapFn: void 0,\n            target: r,\n            type: e,\n            listener: t\n        }, i = Qo.bind(n);\n        return i.listener = t, n.wrapFn = i, i;\n    }\n    a(Jn, \"_onceWrap\");\n    L.prototype.once = a(function(e, t) {\n        return at(t), this.on(e, Jn(this, e, t)), this;\n    }, \"once\");\n    L.prototype.prependOnceListener = a(function(e, t) {\n        return at(t), this.prependListener(e, Jn(this, e, t)), this;\n    }, \"prependOnceListener\");\n    L.prototype.removeListener = a(function(e, t) {\n        var n, i, s, o, u;\n        if (at(t), i = this._events, i === void 0) return this;\n        if (n = i[e], n === void 0) return this;\n        if (n === t || n.listener === t) --this._eventsCount === 0 ? this._events = Object.create(null) : (delete i[e], i.removeListener && this.emit(\"removeListener\", e, n.listener || t));\n        else if (typeof n != \"function\") {\n            for(s = -1, o = n.length - 1; o >= 0; o--)if (n[o] === t || n[o].listener === t) {\n                u = n[o].listener, s = o;\n                break;\n            }\n            if (s < 0) return this;\n            s === 0 ? n.shift() : Wo(n, s), n.length === 1 && (i[e] = n[0]), i.removeListener !== void 0 && this.emit(\"removeListener\", e, u || t);\n        }\n        return this;\n    }, \"removeListener\");\n    L.prototype.off = L.prototype.removeListener;\n    L.prototype.removeAllListeners = a(function(e) {\n        var t, n, i;\n        if (n = this._events, n === void 0) return this;\n        if (n.removeListener === void 0) return arguments.length === 0 ? (this._events = Object.create(null), this._eventsCount = 0) : n[e] !== void 0 && (--this._eventsCount === 0 ? this._events = Object.create(null) : delete n[e]), this;\n        if (arguments.length === 0) {\n            var s = Object.keys(n), o;\n            for(i = 0; i < s.length; ++i)o = s[i], o !== \"removeListener\" && this.removeAllListeners(o);\n            return this.removeAllListeners(\"removeListener\"), this._events = Object.create(null), this._eventsCount = 0, this;\n        }\n        if (t = n[e], typeof t == \"function\") this.removeListener(e, t);\n        else if (t !== void 0) for(i = t.length - 1; i >= 0; i--)this.removeListener(e, t[i]);\n        return this;\n    }, \"removeAllListeners\");\n    function Xn(r, e, t) {\n        var n = r._events;\n        if (n === void 0) return [];\n        var i = n[e];\n        return i === void 0 ? [] : typeof i == \"function\" ? t ? [\n            i.listener || i\n        ] : [\n            i\n        ] : t ? jo(i) : ti(i, i.length);\n    }\n    a(Xn, \"_listeners\");\n    L.prototype.listeners = a(function(e) {\n        return Xn(this, e, !0);\n    }, \"listeners\");\n    L.prototype.rawListeners = a(function(e) {\n        return Xn(this, e, !1);\n    }, \"rawListeners\");\n    L.listenerCount = function(r, e) {\n        return typeof r.listenerCount == \"function\" ? r.listenerCount(e) : ei.call(r, e);\n    };\n    L.prototype.listenerCount = ei;\n    function ei(r) {\n        var e = this._events;\n        if (e !== void 0) {\n            var t = e[r];\n            if (typeof t == \"function\") return 1;\n            if (t !== void 0) return t.length;\n        }\n        return 0;\n    }\n    a(ei, \"listenerCount\");\n    L.prototype.eventNames = a(function() {\n        return this._eventsCount > 0 ? ot(this._events) : [];\n    }, \"eventNames\");\n    function ti(r, e) {\n        for(var t = new Array(e), n = 0; n < e; ++n)t[n] = r[n];\n        return t;\n    }\n    a(ti, \"arrayClone\");\n    function Wo(r, e) {\n        for(; e + 1 < r.length; e++)r[e] = r[e + 1];\n        r.pop();\n    }\n    a(Wo, \"spliceOne\");\n    function jo(r) {\n        for(var e = new Array(r.length), t = 0; t < e.length; ++t)e[t] = r[t].listener || r[t];\n        return e;\n    }\n    a(jo, \"unwrapListeners\");\n    function Ho(r, e) {\n        return new Promise(function(t, n) {\n            function i(o) {\n                r.removeListener(e, s), n(o);\n            }\n            a(i, \"errorListener\");\n            function s() {\n                typeof r.removeListener == \"function\" && r.removeListener(\"error\", i), t([].slice.call(arguments));\n            }\n            a(s, \"resolver\"), ri(r, e, s, {\n                once: !0\n            }), e !== \"error\" && Go(r, i, {\n                once: !0\n            });\n        });\n    }\n    a(Ho, \"once\");\n    function Go(r, e, t) {\n        typeof r.on == \"function\" && ri(r, \"error\", e, t);\n    }\n    a(Go, \"addErrorHandlerIfEventEmitter\");\n    function ri(r, e, t, n) {\n        if (typeof r.on == \"function\") n.once ? r.once(e, t) : r.on(e, t);\n        else if (typeof r.addEventListener == \"function\") r.addEventListener(e, a(function i(s) {\n            n.once && r.removeEventListener(e, i), t(s);\n        }, \"wrapListener\"));\n        else throw new TypeError('The \"emitter\" argument must be of type EventEmitter. Received type ' + typeof r);\n    }\n    a(ri, \"eventTargetAgnosticAddListener\");\n});\nvar je = {};\nie(je, {\n    default: ()=>$o\n});\nvar $o, He = z(()=>{\n    \"use strict\";\n    p();\n    $o = {};\n});\nfunction Ge(r) {\n    let e = 1779033703, t = 3144134277, n = 1013904242, i = 2773480762, s = 1359893119, o = 2600822924, u = 528734635, c = 1541459225, h = 0, l = 0, d = [\n        1116352408,\n        1899447441,\n        3049323471,\n        3921009573,\n        961987163,\n        1508970993,\n        2453635748,\n        2870763221,\n        3624381080,\n        310598401,\n        607225278,\n        1426881987,\n        1925078388,\n        2162078206,\n        2614888103,\n        3248222580,\n        3835390401,\n        4022224774,\n        264347078,\n        604807628,\n        770255983,\n        1249150122,\n        1555081692,\n        1996064986,\n        2554220882,\n        2821834349,\n        2952996808,\n        3210313671,\n        3336571891,\n        3584528711,\n        113926993,\n        338241895,\n        666307205,\n        773529912,\n        1294757372,\n        1396182291,\n        1695183700,\n        1986661051,\n        2177026350,\n        2456956037,\n        2730485921,\n        2820302411,\n        3259730800,\n        3345764771,\n        3516065817,\n        3600352804,\n        4094571909,\n        275423344,\n        430227734,\n        506948616,\n        659060556,\n        883997877,\n        958139571,\n        1322822218,\n        1537002063,\n        1747873779,\n        1955562222,\n        2024104815,\n        2227730452,\n        2361852424,\n        2428436474,\n        2756734187,\n        3204031479,\n        3329325298\n    ], b = a((A, w)=>A >>> w | A << 32 - w, \"rrot\"), C = new Uint32Array(64), B = new Uint8Array(64), W = a(()=>{\n        for(let R = 0, G = 0; R < 16; R++, G += 4)C[R] = B[G] << 24 | B[G + 1] << 16 | B[G + 2] << 8 | B[G + 3];\n        for(let R = 16; R < 64; R++){\n            let G = b(C[R - 15], 7) ^ b(C[R - 15], 18) ^ C[R - 15] >>> 3, he = b(C[R - 2], 17) ^ b(C[R - 2], 19) ^ C[R - 2] >>> 10;\n            C[R] = C[R - 16] + G + C[R - 7] + he | 0;\n        }\n        let A = e, w = t, P = n, V = i, k = s, j = o, ce = u, ee = c;\n        for(let R = 0; R < 64; R++){\n            let G = b(k, 6) ^ b(k, 11) ^ b(k, 25), he = k & j ^ ~k & ce, ye = ee + G + he + d[R] + C[R] | 0, xe = b(A, 2) ^ b(A, 13) ^ b(A, 22), me = A & w ^ A & P ^ w & P, se = xe + me | 0;\n            ee = ce, ce = j, j = k, k = V + ye | 0, V = P, P = w, w = A, A = ye + se | 0;\n        }\n        e = e + A | 0, t = t + w | 0, n = n + P | 0, i = i + V | 0, s = s + k | 0, o = o + j | 0, u = u + ce | 0, c = c + ee | 0, l = 0;\n    }, \"process\"), X = a((A)=>{\n        typeof A == \"string\" && (A = new TextEncoder().encode(A));\n        for(let w = 0; w < A.length; w++)B[l++] = A[w], l === 64 && W();\n        h += A.length;\n    }, \"add\"), de = a(()=>{\n        if (B[l++] = 128, l == 64 && W(), l + 8 > 64) {\n            for(; l < 64;)B[l++] = 0;\n            W();\n        }\n        for(; l < 58;)B[l++] = 0;\n        let A = h * 8;\n        B[l++] = A / 1099511627776 & 255, B[l++] = A / 4294967296 & 255, B[l++] = A >>> 24, B[l++] = A >>> 16 & 255, B[l++] = A >>> 8 & 255, B[l++] = A & 255, W();\n        let w = new Uint8Array(32);\n        return w[0] = e >>> 24, w[1] = e >>> 16 & 255, w[2] = e >>> 8 & 255, w[3] = e & 255, w[4] = t >>> 24, w[5] = t >>> 16 & 255, w[6] = t >>> 8 & 255, w[7] = t & 255, w[8] = n >>> 24, w[9] = n >>> 16 & 255, w[10] = n >>> 8 & 255, w[11] = n & 255, w[12] = i >>> 24, w[13] = i >>> 16 & 255, w[14] = i >>> 8 & 255, w[15] = i & 255, w[16] = s >>> 24, w[17] = s >>> 16 & 255, w[18] = s >>> 8 & 255, w[19] = s & 255, w[20] = o >>> 24, w[21] = o >>> 16 & 255, w[22] = o >>> 8 & 255, w[23] = o & 255, w[24] = u >>> 24, w[25] = u >>> 16 & 255, w[26] = u >>> 8 & 255, w[27] = u & 255, w[28] = c >>> 24, w[29] = c >>> 16 & 255, w[30] = c >>> 8 & 255, w[31] = c & 255, w;\n    }, \"digest\");\n    return r === void 0 ? {\n        add: X,\n        digest: de\n    } : (X(r), de());\n}\nvar ni = z(()=>{\n    \"use strict\";\n    p();\n    a(Ge, \"sha256\");\n});\nvar O, $e, ii = z(()=>{\n    \"use strict\";\n    p();\n    O = class O {\n        constructor(){\n            _(this, \"_dataLength\", 0);\n            _(this, \"_bufferLength\", 0);\n            _(this, \"_state\", new Int32Array(4));\n            _(this, \"_buffer\", new ArrayBuffer(68));\n            _(this, \"_buffer8\");\n            _(this, \"_buffer32\");\n            this._buffer8 = new Uint8Array(this._buffer, 0, 68), this._buffer32 = new Uint32Array(this._buffer, 0, 17), this.start();\n        }\n        static hashByteArray(e, t = !1) {\n            return this.onePassHasher.start().appendByteArray(e).end(t);\n        }\n        static hashStr(e, t = !1) {\n            return this.onePassHasher.start().appendStr(e).end(t);\n        }\n        static hashAsciiStr(e, t = !1) {\n            return this.onePassHasher.start().appendAsciiStr(e).end(t);\n        }\n        static _hex(e) {\n            let t = O.hexChars, n = O.hexOut, i, s, o, u;\n            for(u = 0; u < 4; u += 1)for(s = u * 8, i = e[u], o = 0; o < 8; o += 2)n[s + 1 + o] = t.charAt(i & 15), i >>>= 4, n[s + 0 + o] = t.charAt(i & 15), i >>>= 4;\n            return n.join(\"\");\n        }\n        static _md5cycle(e, t) {\n            let n = e[0], i = e[1], s = e[2], o = e[3];\n            n += (i & s | ~i & o) + t[0] - 680876936 | 0, n = (n << 7 | n >>> 25) + i | 0, o += (n & i | ~n & s) + t[1] - 389564586 | 0, o = (o << 12 | o >>> 20) + n | 0, s += (o & n | ~o & i) + t[2] + 606105819 | 0, s = (s << 17 | s >>> 15) + o | 0, i += (s & o | ~s & n) + t[3] - 1044525330 | 0, i = (i << 22 | i >>> 10) + s | 0, n += (i & s | ~i & o) + t[4] - 176418897 | 0, n = (n << 7 | n >>> 25) + i | 0, o += (n & i | ~n & s) + t[5] + 1200080426 | 0, o = (o << 12 | o >>> 20) + n | 0, s += (o & n | ~o & i) + t[6] - 1473231341 | 0, s = (s << 17 | s >>> 15) + o | 0, i += (s & o | ~s & n) + t[7] - 45705983 | 0, i = (i << 22 | i >>> 10) + s | 0, n += (i & s | ~i & o) + t[8] + 1770035416 | 0, n = (n << 7 | n >>> 25) + i | 0, o += (n & i | ~n & s) + t[9] - 1958414417 | 0, o = (o << 12 | o >>> 20) + n | 0, s += (o & n | ~o & i) + t[10] - 42063 | 0, s = (s << 17 | s >>> 15) + o | 0, i += (s & o | ~s & n) + t[11] - 1990404162 | 0, i = (i << 22 | i >>> 10) + s | 0, n += (i & s | ~i & o) + t[12] + 1804603682 | 0, n = (n << 7 | n >>> 25) + i | 0, o += (n & i | ~n & s) + t[13] - 40341101 | 0, o = (o << 12 | o >>> 20) + n | 0, s += (o & n | ~o & i) + t[14] - 1502002290 | 0, s = (s << 17 | s >>> 15) + o | 0, i += (s & o | ~s & n) + t[15] + 1236535329 | 0, i = (i << 22 | i >>> 10) + s | 0, n += (i & o | s & ~o) + t[1] - 165796510 | 0, n = (n << 5 | n >>> 27) + i | 0, o += (n & s | i & ~s) + t[6] - 1069501632 | 0, o = (o << 9 | o >>> 23) + n | 0, s += (o & i | n & ~i) + t[11] + 643717713 | 0, s = (s << 14 | s >>> 18) + o | 0, i += (s & n | o & ~n) + t[0] - 373897302 | 0, i = (i << 20 | i >>> 12) + s | 0, n += (i & o | s & ~o) + t[5] - 701558691 | 0, n = (n << 5 | n >>> 27) + i | 0, o += (n & s | i & ~s) + t[10] + 38016083 | 0, o = (o << 9 | o >>> 23) + n | 0, s += (o & i | n & ~i) + t[15] - 660478335 | 0, s = (s << 14 | s >>> 18) + o | 0, i += (s & n | o & ~n) + t[4] - 405537848 | 0, i = (i << 20 | i >>> 12) + s | 0, n += (i & o | s & ~o) + t[9] + 568446438 | 0, n = (n << 5 | n >>> 27) + i | 0, o += (n & s | i & ~s) + t[14] - 1019803690 | 0, o = (o << 9 | o >>> 23) + n | 0, s += (o & i | n & ~i) + t[3] - 187363961 | 0, s = (s << 14 | s >>> 18) + o | 0, i += (s & n | o & ~n) + t[8] + 1163531501 | 0, i = (i << 20 | i >>> 12) + s | 0, n += (i & o | s & ~o) + t[13] - 1444681467 | 0, n = (n << 5 | n >>> 27) + i | 0, o += (n & s | i & ~s) + t[2] - 51403784 | 0, o = (o << 9 | o >>> 23) + n | 0, s += (o & i | n & ~i) + t[7] + 1735328473 | 0, s = (s << 14 | s >>> 18) + o | 0, i += (s & n | o & ~n) + t[12] - 1926607734 | 0, i = (i << 20 | i >>> 12) + s | 0, n += (i ^ s ^ o) + t[5] - 378558 | 0, n = (n << 4 | n >>> 28) + i | 0, o += (n ^ i ^ s) + t[8] - 2022574463 | 0, o = (o << 11 | o >>> 21) + n | 0, s += (o ^ n ^ i) + t[11] + 1839030562 | 0, s = (s << 16 | s >>> 16) + o | 0, i += (s ^ o ^ n) + t[14] - 35309556 | 0, i = (i << 23 | i >>> 9) + s | 0, n += (i ^ s ^ o) + t[1] - 1530992060 | 0, n = (n << 4 | n >>> 28) + i | 0, o += (n ^ i ^ s) + t[4] + 1272893353 | 0, o = (o << 11 | o >>> 21) + n | 0, s += (o ^ n ^ i) + t[7] - 155497632 | 0, s = (s << 16 | s >>> 16) + o | 0, i += (s ^ o ^ n) + t[10] - 1094730640 | 0, i = (i << 23 | i >>> 9) + s | 0, n += (i ^ s ^ o) + t[13] + 681279174 | 0, n = (n << 4 | n >>> 28) + i | 0, o += (n ^ i ^ s) + t[0] - 358537222 | 0, o = (o << 11 | o >>> 21) + n | 0, s += (o ^ n ^ i) + t[3] - 722521979 | 0, s = (s << 16 | s >>> 16) + o | 0, i += (s ^ o ^ n) + t[6] + 76029189 | 0, i = (i << 23 | i >>> 9) + s | 0, n += (i ^ s ^ o) + t[9] - 640364487 | 0, n = (n << 4 | n >>> 28) + i | 0, o += (n ^ i ^ s) + t[12] - 421815835 | 0, o = (o << 11 | o >>> 21) + n | 0, s += (o ^ n ^ i) + t[15] + 530742520 | 0, s = (s << 16 | s >>> 16) + o | 0, i += (s ^ o ^ n) + t[2] - 995338651 | 0, i = (i << 23 | i >>> 9) + s | 0, n += (s ^ (i | ~o)) + t[0] - 198630844 | 0, n = (n << 6 | n >>> 26) + i | 0, o += (i ^ (n | ~s)) + t[7] + 1126891415 | 0, o = (o << 10 | o >>> 22) + n | 0, s += (n ^ (o | ~i)) + t[14] - 1416354905 | 0, s = (s << 15 | s >>> 17) + o | 0, i += (o ^ (s | ~n)) + t[5] - 57434055 | 0, i = (i << 21 | i >>> 11) + s | 0, n += (s ^ (i | ~o)) + t[12] + 1700485571 | 0, n = (n << 6 | n >>> 26) + i | 0, o += (i ^ (n | ~s)) + t[3] - 1894986606 | 0, o = (o << 10 | o >>> 22) + n | 0, s += (n ^ (o | ~i)) + t[10] - 1051523 | 0, s = (s << 15 | s >>> 17) + o | 0, i += (o ^ (s | ~n)) + t[1] - 2054922799 | 0, i = (i << 21 | i >>> 11) + s | 0, n += (s ^ (i | ~o)) + t[8] + 1873313359 | 0, n = (n << 6 | n >>> 26) + i | 0, o += (i ^ (n | ~s)) + t[15] - 30611744 | 0, o = (o << 10 | o >>> 22) + n | 0, s += (n ^ (o | ~i)) + t[6] - 1560198380 | 0, s = (s << 15 | s >>> 17) + o | 0, i += (o ^ (s | ~n)) + t[13] + 1309151649 | 0, i = (i << 21 | i >>> 11) + s | 0, n += (s ^ (i | ~o)) + t[4] - 145523070 | 0, n = (n << 6 | n >>> 26) + i | 0, o += (i ^ (n | ~s)) + t[11] - 1120210379 | 0, o = (o << 10 | o >>> 22) + n | 0, s += (n ^ (o | ~i)) + t[2] + 718787259 | 0, s = (s << 15 | s >>> 17) + o | 0, i += (o ^ (s | ~n)) + t[9] - 343485551 | 0, i = (i << 21 | i >>> 11) + s | 0, e[0] = n + e[0] | 0, e[1] = i + e[1] | 0, e[2] = s + e[2] | 0, e[3] = o + e[3] | 0;\n        }\n        start() {\n            return this._dataLength = 0, this._bufferLength = 0, this._state.set(O.stateIdentity), this;\n        }\n        appendStr(e) {\n            let t = this._buffer8, n = this._buffer32, i = this._bufferLength, s, o;\n            for(o = 0; o < e.length; o += 1){\n                if (s = e.charCodeAt(o), s < 128) t[i++] = s;\n                else if (s < 2048) t[i++] = (s >>> 6) + 192, t[i++] = s & 63 | 128;\n                else if (s < 55296 || s > 56319) t[i++] = (s >>> 12) + 224, t[i++] = s >>> 6 & 63 | 128, t[i++] = s & 63 | 128;\n                else {\n                    if (s = (s - 55296) * 1024 + (e.charCodeAt(++o) - 56320) + 65536, s > 1114111) throw new Error(\"Unicode standard supports code points up to U+10FFFF\");\n                    t[i++] = (s >>> 18) + 240, t[i++] = s >>> 12 & 63 | 128, t[i++] = s >>> 6 & 63 | 128, t[i++] = s & 63 | 128;\n                }\n                i >= 64 && (this._dataLength += 64, O._md5cycle(this._state, n), i -= 64, n[0] = n[16]);\n            }\n            return this._bufferLength = i, this;\n        }\n        appendAsciiStr(e) {\n            let t = this._buffer8, n = this._buffer32, i = this._bufferLength, s, o = 0;\n            for(;;){\n                for(s = Math.min(e.length - o, 64 - i); s--;)t[i++] = e.charCodeAt(o++);\n                if (i < 64) break;\n                this._dataLength += 64, O._md5cycle(this._state, n), i = 0;\n            }\n            return this._bufferLength = i, this;\n        }\n        appendByteArray(e) {\n            let t = this._buffer8, n = this._buffer32, i = this._bufferLength, s, o = 0;\n            for(;;){\n                for(s = Math.min(e.length - o, 64 - i); s--;)t[i++] = e[o++];\n                if (i < 64) break;\n                this._dataLength += 64, O._md5cycle(this._state, n), i = 0;\n            }\n            return this._bufferLength = i, this;\n        }\n        getState() {\n            let e = this._state;\n            return {\n                buffer: String.fromCharCode.apply(null, Array.from(this._buffer8)),\n                buflen: this._bufferLength,\n                length: this._dataLength,\n                state: [\n                    e[0],\n                    e[1],\n                    e[2],\n                    e[3]\n                ]\n            };\n        }\n        setState(e) {\n            let t = e.buffer, n = e.state, i = this._state, s;\n            for(this._dataLength = e.length, this._bufferLength = e.buflen, i[0] = n[0], i[1] = n[1], i[2] = n[2], i[3] = n[3], s = 0; s < t.length; s += 1)this._buffer8[s] = t.charCodeAt(s);\n        }\n        end(e = !1) {\n            let t = this._bufferLength, n = this._buffer8, i = this._buffer32, s = (t >> 2) + 1;\n            this._dataLength += t;\n            let o = this._dataLength * 8;\n            if (n[t] = 128, n[t + 1] = n[t + 2] = n[t + 3] = 0, i.set(O.buffer32Identity.subarray(s), s), t > 55 && (O._md5cycle(this._state, i), i.set(O.buffer32Identity)), o <= 4294967295) i[14] = o;\n            else {\n                let u = o.toString(16).match(/(.*?)(.{0,8})$/);\n                if (u === null) return;\n                let c = parseInt(u[2], 16), h = parseInt(u[1], 16) || 0;\n                i[14] = c, i[15] = h;\n            }\n            return O._md5cycle(this._state, i), e ? this._state : O._hex(this._state);\n        }\n    };\n    a(O, \"Md5\"), _(O, \"stateIdentity\", new Int32Array([\n        1732584193,\n        -271733879,\n        -1732584194,\n        271733878\n    ])), _(O, \"buffer32Identity\", new Int32Array([\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0\n    ])), _(O, \"hexChars\", \"0123456789abcdef\"), _(O, \"hexOut\", []), _(O, \"onePassHasher\", new O);\n    $e = O;\n});\nvar qt = {};\nie(qt, {\n    createHash: ()=>Ko,\n    createHmac: ()=>zo,\n    randomBytes: ()=>Vo\n});\nfunction Vo(r) {\n    return g.getRandomValues(y.alloc(r));\n}\nfunction Ko(r) {\n    if (r === \"sha256\") return {\n        update: a(function(e) {\n            return {\n                digest: a(function() {\n                    return y.from(Ge(e));\n                }, \"digest\")\n            };\n        }, \"update\")\n    };\n    if (r === \"md5\") return {\n        update: a(function(e) {\n            return {\n                digest: a(function() {\n                    return typeof e == \"string\" ? $e.hashStr(e) : $e.hashByteArray(e);\n                }, \"digest\")\n            };\n        }, \"update\")\n    };\n    throw new Error(`Hash type '${r}' not supported`);\n}\nfunction zo(r, e) {\n    if (r !== \"sha256\") throw new Error(`Only sha256 is supported (requested: '${r}')`);\n    return {\n        update: a(function(t) {\n            return {\n                digest: a(function() {\n                    typeof e == \"string\" && (e = new TextEncoder().encode(e)), typeof t == \"string\" && (t = new TextEncoder().encode(t));\n                    let n = e.length;\n                    if (n > 64) e = Ge(e);\n                    else if (n < 64) {\n                        let c = new Uint8Array(64);\n                        c.set(e), e = c;\n                    }\n                    let i = new Uint8Array(64), s = new Uint8Array(64);\n                    for(let c = 0; c < 64; c++)i[c] = 54 ^ e[c], s[c] = 92 ^ e[c];\n                    let o = new Uint8Array(t.length + 64);\n                    o.set(i, 0), o.set(t, 64);\n                    let u = new Uint8Array(96);\n                    return u.set(s, 0), u.set(Ge(o), 64), y.from(Ge(u));\n                }, \"digest\")\n            };\n        }, \"update\")\n    };\n}\nvar Qt = z(()=>{\n    \"use strict\";\n    p();\n    ni();\n    ii();\n    a(Vo, \"randomBytes\");\n    a(Ko, \"createHash\");\n    a(zo, \"createHmac\");\n});\nvar jt = I((si)=>{\n    \"use strict\";\n    p();\n    si.parse = function(r, e) {\n        return new Wt(r, e).parse();\n    };\n    var ut = class ut {\n        constructor(e, t){\n            this.source = e, this.transform = t || Yo, this.position = 0, this.entries = [], this.recorded = [], this.dimension = 0;\n        }\n        isEof() {\n            return this.position >= this.source.length;\n        }\n        nextCharacter() {\n            var e = this.source[this.position++];\n            return e === \"\\\\\" ? {\n                value: this.source[this.position++],\n                escaped: !0\n            } : {\n                value: e,\n                escaped: !1\n            };\n        }\n        record(e) {\n            this.recorded.push(e);\n        }\n        newEntry(e) {\n            var t;\n            (this.recorded.length > 0 || e) && (t = this.recorded.join(\"\"), t === \"NULL\" && !e && (t = null), t !== null && (t = this.transform(t)), this.entries.push(t), this.recorded = []);\n        }\n        consumeDimensions() {\n            if (this.source[0] === \"[\") for(; !this.isEof();){\n                var e = this.nextCharacter();\n                if (e.value === \"=\") break;\n            }\n        }\n        parse(e) {\n            var t, n, i;\n            for(this.consumeDimensions(); !this.isEof();)if (t = this.nextCharacter(), t.value === \"{\" && !i) this.dimension++, this.dimension > 1 && (n = new ut(this.source.substr(this.position - 1), this.transform), this.entries.push(n.parse(!0)), this.position += n.position - 2);\n            else if (t.value === \"}\" && !i) {\n                if (this.dimension--, !this.dimension && (this.newEntry(), e)) return this.entries;\n            } else t.value === '\"' && !t.escaped ? (i && this.newEntry(!0), i = !i) : t.value === \",\" && !i ? this.newEntry() : this.record(t.value);\n            if (this.dimension !== 0) throw new Error(\"array dimension not balanced\");\n            return this.entries;\n        }\n    };\n    a(ut, \"ArrayParser\");\n    var Wt = ut;\n    function Yo(r) {\n        return r;\n    }\n    a(Yo, \"identity\");\n});\nvar Ht = I((mh, oi)=>{\n    p();\n    var Zo = jt();\n    oi.exports = {\n        create: a(function(r, e) {\n            return {\n                parse: a(function() {\n                    return Zo.parse(r, e);\n                }, \"parse\")\n            };\n        }, \"create\")\n    };\n});\nvar ci = I((bh, ui)=>{\n    \"use strict\";\n    p();\n    var Jo = /(\\d{1,})-(\\d{2})-(\\d{2}) (\\d{2}):(\\d{2}):(\\d{2})(\\.\\d{1,})?.*?( BC)?$/, Xo = /^(\\d{1,})-(\\d{2})-(\\d{2})( BC)?$/, ea = /([Z+-])(\\d{2})?:?(\\d{2})?:?(\\d{2})?/, ta = /^-?infinity$/;\n    ui.exports = a(function(e) {\n        if (ta.test(e)) return Number(e.replace(\"i\", \"I\"));\n        var t = Jo.exec(e);\n        if (!t) return ra(e) || null;\n        var n = !!t[8], i = parseInt(t[1], 10);\n        n && (i = ai(i));\n        var s = parseInt(t[2], 10) - 1, o = t[3], u = parseInt(t[4], 10), c = parseInt(t[5], 10), h = parseInt(t[6], 10), l = t[7];\n        l = l ? 1e3 * parseFloat(l) : 0;\n        var d, b = na(e);\n        return b != null ? (d = new Date(Date.UTC(i, s, o, u, c, h, l)), Gt(i) && d.setUTCFullYear(i), b !== 0 && d.setTime(d.getTime() - b)) : (d = new Date(i, s, o, u, c, h, l), Gt(i) && d.setFullYear(i)), d;\n    }, \"parseDate\");\n    function ra(r) {\n        var e = Xo.exec(r);\n        if (e) {\n            var t = parseInt(e[1], 10), n = !!e[4];\n            n && (t = ai(t));\n            var i = parseInt(e[2], 10) - 1, s = e[3], o = new Date(t, i, s);\n            return Gt(t) && o.setFullYear(t), o;\n        }\n    }\n    a(ra, \"getDate\");\n    function na(r) {\n        if (r.endsWith(\"+00\")) return 0;\n        var e = ea.exec(r.split(\" \")[1]);\n        if (e) {\n            var t = e[1];\n            if (t === \"Z\") return 0;\n            var n = t === \"-\" ? -1 : 1, i = parseInt(e[2], 10) * 3600 + parseInt(e[3] || 0, 10) * 60 + parseInt(e[4] || 0, 10);\n            return i * n * 1e3;\n        }\n    }\n    a(na, \"timeZoneOffset\");\n    function ai(r) {\n        return -(r - 1);\n    }\n    a(ai, \"bcYearToNegativeYear\");\n    function Gt(r) {\n        return r >= 0 && r < 100;\n    }\n    a(Gt, \"is0To99\");\n});\nvar li = I((vh, hi)=>{\n    p();\n    hi.exports = sa;\n    var ia = Object.prototype.hasOwnProperty;\n    function sa(r) {\n        for(var e = 1; e < arguments.length; e++){\n            var t = arguments[e];\n            for(var n in t)ia.call(t, n) && (r[n] = t[n]);\n        }\n        return r;\n    }\n    a(sa, \"extend\");\n});\nvar di = I((Ah, pi)=>{\n    \"use strict\";\n    p();\n    var oa = li();\n    pi.exports = Fe;\n    function Fe(r) {\n        if (!(this instanceof Fe)) return new Fe(r);\n        oa(this, wa(r));\n    }\n    a(Fe, \"PostgresInterval\");\n    var aa = [\n        \"seconds\",\n        \"minutes\",\n        \"hours\",\n        \"days\",\n        \"months\",\n        \"years\"\n    ];\n    Fe.prototype.toPostgres = function() {\n        var r = aa.filter(this.hasOwnProperty, this);\n        return this.milliseconds && r.indexOf(\"seconds\") < 0 && r.push(\"seconds\"), r.length === 0 ? \"0\" : r.map(function(e) {\n            var t = this[e] || 0;\n            return e === \"seconds\" && this.milliseconds && (t = (t + this.milliseconds / 1e3).toFixed(6).replace(/\\.?0+$/, \"\")), t + \" \" + e;\n        }, this).join(\" \");\n    };\n    var ua = {\n        years: \"Y\",\n        months: \"M\",\n        days: \"D\",\n        hours: \"H\",\n        minutes: \"M\",\n        seconds: \"S\"\n    }, ca = [\n        \"years\",\n        \"months\",\n        \"days\"\n    ], ha = [\n        \"hours\",\n        \"minutes\",\n        \"seconds\"\n    ];\n    Fe.prototype.toISOString = Fe.prototype.toISO = function() {\n        var r = ca.map(t, this).join(\"\"), e = ha.map(t, this).join(\"\");\n        return \"P\" + r + \"T\" + e;\n        function t(n) {\n            var i = this[n] || 0;\n            return n === \"seconds\" && this.milliseconds && (i = (i + this.milliseconds / 1e3).toFixed(6).replace(/0+$/, \"\")), i + ua[n];\n        }\n    };\n    var $t = \"([+-]?\\\\d+)\", la = $t + \"\\\\s+years?\", fa = $t + \"\\\\s+mons?\", pa = $t + \"\\\\s+days?\", da = \"([+-])?([\\\\d]*):(\\\\d\\\\d):(\\\\d\\\\d)\\\\.?(\\\\d{1,6})?\", ya = new RegExp([\n        la,\n        fa,\n        pa,\n        da\n    ].map(function(r) {\n        return \"(\" + r + \")?\";\n    }).join(\"\\\\s*\")), fi = {\n        years: 2,\n        months: 4,\n        days: 6,\n        hours: 9,\n        minutes: 10,\n        seconds: 11,\n        milliseconds: 12\n    }, ma = [\n        \"hours\",\n        \"minutes\",\n        \"seconds\",\n        \"milliseconds\"\n    ];\n    function ga(r) {\n        var e = r + \"000000\".slice(r.length);\n        return parseInt(e, 10) / 1e3;\n    }\n    a(ga, \"parseMilliseconds\");\n    function wa(r) {\n        if (!r) return {};\n        var e = ya.exec(r), t = e[8] === \"-\";\n        return Object.keys(fi).reduce(function(n, i) {\n            var s = fi[i], o = e[s];\n            return !o || (o = i === \"milliseconds\" ? ga(o) : parseInt(o, 10), !o) || (t && ~ma.indexOf(i) && (o *= -1), n[i] = o), n;\n        }, {});\n    }\n    a(wa, \"parse\");\n});\nvar mi = I((Ih, yi)=>{\n    \"use strict\";\n    p();\n    yi.exports = a(function(e) {\n        if (/^\\\\x/.test(e)) return new y(e.substr(2), \"hex\");\n        for(var t = \"\", n = 0; n < e.length;)if (e[n] !== \"\\\\\") t += e[n], ++n;\n        else if (/[0-7]{3}/.test(e.substr(n + 1, 3))) t += String.fromCharCode(parseInt(e.substr(n + 1, 3), 8)), n += 4;\n        else {\n            for(var i = 1; n + i < e.length && e[n + i] === \"\\\\\";)i++;\n            for(var s = 0; s < Math.floor(i / 2); ++s)t += \"\\\\\";\n            n += Math.floor(i / 2) * 2;\n        }\n        return new y(t, \"binary\");\n    }, \"parseBytea\");\n});\nvar Ei = I((Lh, vi)=>{\n    p();\n    var Ve = jt(), Ke = Ht(), ct = ci(), wi = di(), bi = mi();\n    function ht(r) {\n        return a(function(t) {\n            return t === null ? t : r(t);\n        }, \"nullAllowed\");\n    }\n    a(ht, \"allowNull\");\n    function Si(r) {\n        return r === null ? r : r === \"TRUE\" || r === \"t\" || r === \"true\" || r === \"y\" || r === \"yes\" || r === \"on\" || r === \"1\";\n    }\n    a(Si, \"parseBool\");\n    function ba(r) {\n        return r ? Ve.parse(r, Si) : null;\n    }\n    a(ba, \"parseBoolArray\");\n    function Sa(r) {\n        return parseInt(r, 10);\n    }\n    a(Sa, \"parseBaseTenInt\");\n    function Vt(r) {\n        return r ? Ve.parse(r, ht(Sa)) : null;\n    }\n    a(Vt, \"parseIntegerArray\");\n    function xa(r) {\n        return r ? Ve.parse(r, ht(function(e) {\n            return xi(e).trim();\n        })) : null;\n    }\n    a(xa, \"parseBigIntegerArray\");\n    var va = a(function(r) {\n        if (!r) return null;\n        var e = Ke.create(r, function(t) {\n            return t !== null && (t = Zt(t)), t;\n        });\n        return e.parse();\n    }, \"parsePointArray\"), Kt = a(function(r) {\n        if (!r) return null;\n        var e = Ke.create(r, function(t) {\n            return t !== null && (t = parseFloat(t)), t;\n        });\n        return e.parse();\n    }, \"parseFloatArray\"), re = a(function(r) {\n        if (!r) return null;\n        var e = Ke.create(r);\n        return e.parse();\n    }, \"parseStringArray\"), zt = a(function(r) {\n        if (!r) return null;\n        var e = Ke.create(r, function(t) {\n            return t !== null && (t = ct(t)), t;\n        });\n        return e.parse();\n    }, \"parseDateArray\"), Ea = a(function(r) {\n        if (!r) return null;\n        var e = Ke.create(r, function(t) {\n            return t !== null && (t = wi(t)), t;\n        });\n        return e.parse();\n    }, \"parseIntervalArray\"), _a = a(function(r) {\n        return r ? Ve.parse(r, ht(bi)) : null;\n    }, \"parseByteAArray\"), Yt = a(function(r) {\n        return parseInt(r, 10);\n    }, \"parseInteger\"), xi = a(function(r) {\n        var e = String(r);\n        return /^\\d+$/.test(e) ? e : r;\n    }, \"parseBigInteger\"), gi = a(function(r) {\n        return r ? Ve.parse(r, ht(JSON.parse)) : null;\n    }, \"parseJsonArray\"), Zt = a(function(r) {\n        return r[0] !== \"(\" ? null : (r = r.substring(1, r.length - 1).split(\",\"), {\n            x: parseFloat(r[0]),\n            y: parseFloat(r[1])\n        });\n    }, \"parsePoint\"), Aa = a(function(r) {\n        if (r[0] !== \"<\" && r[1] !== \"(\") return null;\n        for(var e = \"(\", t = \"\", n = !1, i = 2; i < r.length - 1; i++){\n            if (n || (e += r[i]), r[i] === \")\") {\n                n = !0;\n                continue;\n            } else if (!n) continue;\n            r[i] !== \",\" && (t += r[i]);\n        }\n        var s = Zt(e);\n        return s.radius = parseFloat(t), s;\n    }, \"parseCircle\"), Ca = a(function(r) {\n        r(20, xi), r(21, Yt), r(23, Yt), r(26, Yt), r(700, parseFloat), r(701, parseFloat), r(16, Si), r(1082, ct), r(1114, ct), r(1184, ct), r(600, Zt), r(651, re), r(718, Aa), r(1e3, ba), r(1001, _a), r(1005, Vt), r(1007, Vt), r(1028, Vt), r(1016, xa), r(1017, va), r(1021, Kt), r(1022, Kt), r(1231, Kt), r(1014, re), r(1015, re), r(1008, re), r(1009, re), r(1040, re), r(1041, re), r(1115, zt), r(1182, zt), r(1185, zt), r(1186, wi), r(1187, Ea), r(17, bi), r(114, JSON.parse.bind(JSON)), r(3802, JSON.parse.bind(JSON)), r(199, gi), r(3807, gi), r(3907, re), r(2951, re), r(791, re), r(1183, re), r(1270, re);\n    }, \"init\");\n    vi.exports = {\n        init: Ca\n    };\n});\nvar Ai = I((Mh, _i)=>{\n    \"use strict\";\n    p();\n    var Z = 1e6;\n    function Ta(r) {\n        var e = r.readInt32BE(0), t = r.readUInt32BE(4), n = \"\";\n        e < 0 && (e = ~e + (t === 0), t = ~t + 1 >>> 0, n = \"-\");\n        var i = \"\", s, o, u, c, h, l;\n        {\n            if (s = e % Z, e = e / Z >>> 0, o = 4294967296 * s + t, t = o / Z >>> 0, u = \"\" + (o - Z * t), t === 0 && e === 0) return n + u + i;\n            for(c = \"\", h = 6 - u.length, l = 0; l < h; l++)c += \"0\";\n            i = c + u + i;\n        }\n        {\n            if (s = e % Z, e = e / Z >>> 0, o = 4294967296 * s + t, t = o / Z >>> 0, u = \"\" + (o - Z * t), t === 0 && e === 0) return n + u + i;\n            for(c = \"\", h = 6 - u.length, l = 0; l < h; l++)c += \"0\";\n            i = c + u + i;\n        }\n        {\n            if (s = e % Z, e = e / Z >>> 0, o = 4294967296 * s + t, t = o / Z >>> 0, u = \"\" + (o - Z * t), t === 0 && e === 0) return n + u + i;\n            for(c = \"\", h = 6 - u.length, l = 0; l < h; l++)c += \"0\";\n            i = c + u + i;\n        }\n        return s = e % Z, o = 4294967296 * s + t, u = \"\" + o % Z, n + u + i;\n    }\n    a(Ta, \"readInt8\");\n    _i.exports = Ta;\n});\nvar Bi = I((Uh, Pi)=>{\n    p();\n    var Ia = Ai(), F = a(function(r, e, t, n, i) {\n        t = t || 0, n = n || !1, i = i || function(C, B, W) {\n            return C * Math.pow(2, W) + B;\n        };\n        var s = t >> 3, o = a(function(C) {\n            return n ? ~C & 255 : C;\n        }, \"inv\"), u = 255, c = 8 - t % 8;\n        e < c && (u = 255 << 8 - e & 255, c = e), t && (u = u >> t % 8);\n        var h = 0;\n        t % 8 + e >= 8 && (h = i(0, o(r[s]) & u, c));\n        for(var l = e + t >> 3, d = s + 1; d < l; d++)h = i(h, o(r[d]), 8);\n        var b = (e + t) % 8;\n        return b > 0 && (h = i(h, o(r[l]) >> 8 - b, b)), h;\n    }, \"parseBits\"), Ii = a(function(r, e, t) {\n        var n = Math.pow(2, t - 1) - 1, i = F(r, 1), s = F(r, t, 1);\n        if (s === 0) return 0;\n        var o = 1, u = a(function(h, l, d) {\n            h === 0 && (h = 1);\n            for(var b = 1; b <= d; b++)o /= 2, (l & 1 << d - b) > 0 && (h += o);\n            return h;\n        }, \"parsePrecisionBits\"), c = F(r, e, t + 1, !1, u);\n        return s == Math.pow(2, t + 1) - 1 ? c === 0 ? i === 0 ? 1 / 0 : -1 / 0 : NaN : (i === 0 ? 1 : -1) * Math.pow(2, s - n) * c;\n    }, \"parseFloatFromBits\"), Pa = a(function(r) {\n        return F(r, 1) == 1 ? -1 * (F(r, 15, 1, !0) + 1) : F(r, 15, 1);\n    }, \"parseInt16\"), Ci = a(function(r) {\n        return F(r, 1) == 1 ? -1 * (F(r, 31, 1, !0) + 1) : F(r, 31, 1);\n    }, \"parseInt32\"), Ba = a(function(r) {\n        return Ii(r, 23, 8);\n    }, \"parseFloat32\"), La = a(function(r) {\n        return Ii(r, 52, 11);\n    }, \"parseFloat64\"), Ra = a(function(r) {\n        var e = F(r, 16, 32);\n        if (e == 49152) return NaN;\n        for(var t = Math.pow(1e4, F(r, 16, 16)), n = 0, i = [], s = F(r, 16), o = 0; o < s; o++)n += F(r, 16, 64 + 16 * o) * t, t /= 1e4;\n        var u = Math.pow(10, F(r, 16, 48));\n        return (e === 0 ? 1 : -1) * Math.round(n * u) / u;\n    }, \"parseNumeric\"), Ti = a(function(r, e) {\n        var t = F(e, 1), n = F(e, 63, 1), i = new Date((t === 0 ? 1 : -1) * n / 1e3 + 9466848e5);\n        return r || i.setTime(i.getTime() + i.getTimezoneOffset() * 6e4), i.usec = n % 1e3, i.getMicroSeconds = function() {\n            return this.usec;\n        }, i.setMicroSeconds = function(s) {\n            this.usec = s;\n        }, i.getUTCMicroSeconds = function() {\n            return this.usec;\n        }, i;\n    }, \"parseDate\"), ze = a(function(r) {\n        for(var e = F(r, 32), t = F(r, 32, 32), n = F(r, 32, 64), i = 96, s = [], o = 0; o < e; o++)s[o] = F(r, 32, i), i += 32, i += 32;\n        var u = a(function(h) {\n            var l = F(r, 32, i);\n            if (i += 32, l == 4294967295) return null;\n            var d;\n            if (h == 23 || h == 20) return d = F(r, l * 8, i), i += l * 8, d;\n            if (h == 25) return d = r.toString(this.encoding, i >> 3, (i += l << 3) >> 3), d;\n            console.log(\"ERROR: ElementType not implemented: \" + h);\n        }, \"parseElement\"), c = a(function(h, l) {\n            var d = [], b;\n            if (h.length > 1) {\n                var C = h.shift();\n                for(b = 0; b < C; b++)d[b] = c(h, l);\n                h.unshift(C);\n            } else for(b = 0; b < h[0]; b++)d[b] = u(l);\n            return d;\n        }, \"parse\");\n        return c(s, n);\n    }, \"parseArray\"), Fa = a(function(r) {\n        return r.toString(\"utf8\");\n    }, \"parseText\"), Ma = a(function(r) {\n        return r === null ? null : F(r, 8) > 0;\n    }, \"parseBool\"), Da = a(function(r) {\n        r(20, Ia), r(21, Pa), r(23, Ci), r(26, Ci), r(1700, Ra), r(700, Ba), r(701, La), r(16, Ma), r(1114, Ti.bind(null, !1)), r(1184, Ti.bind(null, !0)), r(1e3, ze), r(1007, ze), r(1016, ze), r(1008, ze), r(1009, ze), r(25, Fa);\n    }, \"init\");\n    Pi.exports = {\n        init: Da\n    };\n});\nvar Ri = I((qh, Li)=>{\n    p();\n    Li.exports = {\n        BOOL: 16,\n        BYTEA: 17,\n        CHAR: 18,\n        INT8: 20,\n        INT2: 21,\n        INT4: 23,\n        REGPROC: 24,\n        TEXT: 25,\n        OID: 26,\n        TID: 27,\n        XID: 28,\n        CID: 29,\n        JSON: 114,\n        XML: 142,\n        PG_NODE_TREE: 194,\n        SMGR: 210,\n        PATH: 602,\n        POLYGON: 604,\n        CIDR: 650,\n        FLOAT4: 700,\n        FLOAT8: 701,\n        ABSTIME: 702,\n        RELTIME: 703,\n        TINTERVAL: 704,\n        CIRCLE: 718,\n        MACADDR8: 774,\n        MONEY: 790,\n        MACADDR: 829,\n        INET: 869,\n        ACLITEM: 1033,\n        BPCHAR: 1042,\n        VARCHAR: 1043,\n        DATE: 1082,\n        TIME: 1083,\n        TIMESTAMP: 1114,\n        TIMESTAMPTZ: 1184,\n        INTERVAL: 1186,\n        TIMETZ: 1266,\n        BIT: 1560,\n        VARBIT: 1562,\n        NUMERIC: 1700,\n        REFCURSOR: 1790,\n        REGPROCEDURE: 2202,\n        REGOPER: 2203,\n        REGOPERATOR: 2204,\n        REGCLASS: 2205,\n        REGTYPE: 2206,\n        UUID: 2950,\n        TXID_SNAPSHOT: 2970,\n        PG_LSN: 3220,\n        PG_NDISTINCT: 3361,\n        PG_DEPENDENCIES: 3402,\n        TSVECTOR: 3614,\n        TSQUERY: 3615,\n        GTSVECTOR: 3642,\n        REGCONFIG: 3734,\n        REGDICTIONARY: 3769,\n        JSONB: 3802,\n        REGNAMESPACE: 4089,\n        REGROLE: 4096\n    };\n});\nvar Je = I((Ze)=>{\n    p();\n    var ka = Ei(), Ua = Bi(), Oa = Ht(), Na = Ri();\n    Ze.getTypeParser = qa;\n    Ze.setTypeParser = Qa;\n    Ze.arrayParser = Oa;\n    Ze.builtins = Na;\n    var Ye = {\n        text: {},\n        binary: {}\n    };\n    function Fi(r) {\n        return String(r);\n    }\n    a(Fi, \"noParse\");\n    function qa(r, e) {\n        return e = e || \"text\", Ye[e] && Ye[e][r] || Fi;\n    }\n    a(qa, \"getTypeParser\");\n    function Qa(r, e, t) {\n        typeof e == \"function\" && (t = e, e = \"text\"), Ye[e][r] = t;\n    }\n    a(Qa, \"setTypeParser\");\n    ka.init(function(r, e) {\n        Ye.text[r] = e;\n    });\n    Ua.init(function(r, e) {\n        Ye.binary[r] = e;\n    });\n});\nvar Xe = I((Gh, Jt)=>{\n    \"use strict\";\n    p();\n    Jt.exports = {\n        host: \"localhost\",\n        user: m.platform === \"win32\" ? m.env.USERNAME : m.env.USER,\n        database: void 0,\n        password: null,\n        connectionString: void 0,\n        port: 5432,\n        rows: 0,\n        binary: !1,\n        max: 10,\n        idleTimeoutMillis: 3e4,\n        client_encoding: \"\",\n        ssl: !1,\n        application_name: void 0,\n        fallback_application_name: void 0,\n        options: void 0,\n        parseInputDatesAsUTC: !1,\n        statement_timeout: !1,\n        lock_timeout: !1,\n        idle_in_transaction_session_timeout: !1,\n        query_timeout: !1,\n        connect_timeout: 0,\n        keepalives: 1,\n        keepalives_idle: 0\n    };\n    var Me = Je(), Wa = Me.getTypeParser(20, \"text\"), ja = Me.getTypeParser(1016, \"text\");\n    Jt.exports.__defineSetter__(\"parseInt8\", function(r) {\n        Me.setTypeParser(20, \"text\", r ? Me.getTypeParser(23, \"text\") : Wa), Me.setTypeParser(1016, \"text\", r ? Me.getTypeParser(1007, \"text\") : ja);\n    });\n});\nvar et = I((Vh, Di)=>{\n    \"use strict\";\n    p();\n    var Ha = (Qt(), N(qt)), Ga = Xe();\n    function $a(r) {\n        var e = r.replace(/\\\\/g, \"\\\\\\\\\").replace(/\"/g, '\\\\\"');\n        return '\"' + e + '\"';\n    }\n    a($a, \"escapeElement\");\n    function Mi(r) {\n        for(var e = \"{\", t = 0; t < r.length; t++)t > 0 && (e = e + \",\"), r[t] === null || typeof r[t] > \"u\" ? e = e + \"NULL\" : Array.isArray(r[t]) ? e = e + Mi(r[t]) : r[t] instanceof y ? e += \"\\\\\\\\x\" + r[t].toString(\"hex\") : e += $a(lt(r[t]));\n        return e = e + \"}\", e;\n    }\n    a(Mi, \"arrayString\");\n    var lt = a(function(r, e) {\n        if (r == null) return null;\n        if (r instanceof y) return r;\n        if (ArrayBuffer.isView(r)) {\n            var t = y.from(r.buffer, r.byteOffset, r.byteLength);\n            return t.length === r.byteLength ? t : t.slice(r.byteOffset, r.byteOffset + r.byteLength);\n        }\n        return r instanceof Date ? Ga.parseInputDatesAsUTC ? za(r) : Ka(r) : Array.isArray(r) ? Mi(r) : typeof r == \"object\" ? Va(r, e) : r.toString();\n    }, \"prepareValue\");\n    function Va(r, e) {\n        if (r && typeof r.toPostgres == \"function\") {\n            if (e = e || [], e.indexOf(r) !== -1) throw new Error('circular reference detected while preparing \"' + r + '\" for query');\n            return e.push(r), lt(r.toPostgres(lt), e);\n        }\n        return JSON.stringify(r);\n    }\n    a(Va, \"prepareObject\");\n    function H(r, e) {\n        for(r = \"\" + r; r.length < e;)r = \"0\" + r;\n        return r;\n    }\n    a(H, \"pad\");\n    function Ka(r) {\n        var e = -r.getTimezoneOffset(), t = r.getFullYear(), n = t < 1;\n        n && (t = Math.abs(t) + 1);\n        var i = H(t, 4) + \"-\" + H(r.getMonth() + 1, 2) + \"-\" + H(r.getDate(), 2) + \"T\" + H(r.getHours(), 2) + \":\" + H(r.getMinutes(), 2) + \":\" + H(r.getSeconds(), 2) + \".\" + H(r.getMilliseconds(), 3);\n        return e < 0 ? (i += \"-\", e *= -1) : i += \"+\", i += H(Math.floor(e / 60), 2) + \":\" + H(e % 60, 2), n && (i += \" BC\"), i;\n    }\n    a(Ka, \"dateToString\");\n    function za(r) {\n        var e = r.getUTCFullYear(), t = e < 1;\n        t && (e = Math.abs(e) + 1);\n        var n = H(e, 4) + \"-\" + H(r.getUTCMonth() + 1, 2) + \"-\" + H(r.getUTCDate(), 2) + \"T\" + H(r.getUTCHours(), 2) + \":\" + H(r.getUTCMinutes(), 2) + \":\" + H(r.getUTCSeconds(), 2) + \".\" + H(r.getUTCMilliseconds(), 3);\n        return n += \"+00:00\", t && (n += \" BC\"), n;\n    }\n    a(za, \"dateToStringUTC\");\n    function Ya(r, e, t) {\n        return r = typeof r == \"string\" ? {\n            text: r\n        } : r, e && (typeof e == \"function\" ? r.callback = e : r.values = e), t && (r.callback = t), r;\n    }\n    a(Ya, \"normalizeQueryConfig\");\n    var Xt = a(function(r) {\n        return Ha.createHash(\"md5\").update(r, \"utf-8\").digest(\"hex\");\n    }, \"md5\"), Za = a(function(r, e, t) {\n        var n = Xt(e + r), i = Xt(y.concat([\n            y.from(n),\n            t\n        ]));\n        return \"md5\" + i;\n    }, \"postgresMd5PasswordHash\");\n    Di.exports = {\n        prepareValue: a(function(e) {\n            return lt(e);\n        }, \"prepareValueWrapper\"),\n        normalizeQueryConfig: Ya,\n        postgresMd5PasswordHash: Za,\n        md5: Xt\n    };\n});\nvar qi = I((Yh, Ni)=>{\n    \"use strict\";\n    p();\n    var er = (Qt(), N(qt));\n    function Ja(r) {\n        if (r.indexOf(\"SCRAM-SHA-256\") === -1) throw new Error(\"SASL: Only mechanism SCRAM-SHA-256 is currently supported\");\n        let e = er.randomBytes(18).toString(\"base64\");\n        return {\n            mechanism: \"SCRAM-SHA-256\",\n            clientNonce: e,\n            response: \"n,,n=*,r=\" + e,\n            message: \"SASLInitialResponse\"\n        };\n    }\n    a(Ja, \"startSession\");\n    function Xa(r, e, t) {\n        if (r.message !== \"SASLInitialResponse\") throw new Error(\"SASL: Last message was not SASLInitialResponse\");\n        if (typeof e != \"string\") throw new Error(\"SASL: SCRAM-SERVER-FIRST-MESSAGE: client password must be a string\");\n        if (typeof t != \"string\") throw new Error(\"SASL: SCRAM-SERVER-FIRST-MESSAGE: serverData must be a string\");\n        let n = ru(t);\n        if (n.nonce.startsWith(r.clientNonce)) {\n            if (n.nonce.length === r.clientNonce.length) throw new Error(\"SASL: SCRAM-SERVER-FIRST-MESSAGE: server nonce is too short\");\n        } else throw new Error(\"SASL: SCRAM-SERVER-FIRST-MESSAGE: server nonce does not start with client nonce\");\n        var i = y.from(n.salt, \"base64\"), s = su(e, i, n.iteration), o = De(s, \"Client Key\"), u = iu(o), c = \"n=*,r=\" + r.clientNonce, h = \"r=\" + n.nonce + \",s=\" + n.salt + \",i=\" + n.iteration, l = \"c=biws,r=\" + n.nonce, d = c + \",\" + h + \",\" + l, b = De(u, d), C = Oi(o, b), B = C.toString(\"base64\"), W = De(s, \"Server Key\"), X = De(W, d);\n        r.message = \"SASLResponse\", r.serverSignature = X.toString(\"base64\"), r.response = l + \",p=\" + B;\n    }\n    a(Xa, \"continueSession\");\n    function eu(r, e) {\n        if (r.message !== \"SASLResponse\") throw new Error(\"SASL: Last message was not SASLResponse\");\n        if (typeof e != \"string\") throw new Error(\"SASL: SCRAM-SERVER-FINAL-MESSAGE: serverData must be a string\");\n        let { serverSignature: t } = nu(e);\n        if (t !== r.serverSignature) throw new Error(\"SASL: SCRAM-SERVER-FINAL-MESSAGE: server signature does not match\");\n    }\n    a(eu, \"finalizeSession\");\n    function tu(r) {\n        if (typeof r != \"string\") throw new TypeError(\"SASL: text must be a string\");\n        return r.split(\"\").map((e, t)=>r.charCodeAt(t)).every((e)=>e >= 33 && e <= 43 || e >= 45 && e <= 126);\n    }\n    a(tu, \"isPrintableChars\");\n    function ki(r) {\n        return /^(?:[a-zA-Z0-9+/]{4})*(?:[a-zA-Z0-9+/]{2}==|[a-zA-Z0-9+/]{3}=)?$/.test(r);\n    }\n    a(ki, \"isBase64\");\n    function Ui(r) {\n        if (typeof r != \"string\") throw new TypeError(\"SASL: attribute pairs text must be a string\");\n        return new Map(r.split(\",\").map((e)=>{\n            if (!/^.=/.test(e)) throw new Error(\"SASL: Invalid attribute pair entry\");\n            let t = e[0], n = e.substring(2);\n            return [\n                t,\n                n\n            ];\n        }));\n    }\n    a(Ui, \"parseAttributePairs\");\n    function ru(r) {\n        let e = Ui(r), t = e.get(\"r\");\n        if (t) {\n            if (!tu(t)) throw new Error(\"SASL: SCRAM-SERVER-FIRST-MESSAGE: nonce must only contain printable characters\");\n        } else throw new Error(\"SASL: SCRAM-SERVER-FIRST-MESSAGE: nonce missing\");\n        let n = e.get(\"s\");\n        if (n) {\n            if (!ki(n)) throw new Error(\"SASL: SCRAM-SERVER-FIRST-MESSAGE: salt must be base64\");\n        } else throw new Error(\"SASL: SCRAM-SERVER-FIRST-MESSAGE: salt missing\");\n        let i = e.get(\"i\");\n        if (i) {\n            if (!/^[1-9][0-9]*$/.test(i)) throw new Error(\"SASL: SCRAM-SERVER-FIRST-MESSAGE: invalid iteration count\");\n        } else throw new Error(\"SASL: SCRAM-SERVER-FIRST-MESSAGE: iteration missing\");\n        let s = parseInt(i, 10);\n        return {\n            nonce: t,\n            salt: n,\n            iteration: s\n        };\n    }\n    a(ru, \"parseServerFirstMessage\");\n    function nu(r) {\n        let t = Ui(r).get(\"v\");\n        if (t) {\n            if (!ki(t)) throw new Error(\"SASL: SCRAM-SERVER-FINAL-MESSAGE: server signature must be base64\");\n        } else throw new Error(\"SASL: SCRAM-SERVER-FINAL-MESSAGE: server signature is missing\");\n        return {\n            serverSignature: t\n        };\n    }\n    a(nu, \"parseServerFinalMessage\");\n    function Oi(r, e) {\n        if (!y.isBuffer(r)) throw new TypeError(\"first argument must be a Buffer\");\n        if (!y.isBuffer(e)) throw new TypeError(\"second argument must be a Buffer\");\n        if (r.length !== e.length) throw new Error(\"Buffer lengths must match\");\n        if (r.length === 0) throw new Error(\"Buffers cannot be empty\");\n        return y.from(r.map((t, n)=>r[n] ^ e[n]));\n    }\n    a(Oi, \"xorBuffers\");\n    function iu(r) {\n        return er.createHash(\"sha256\").update(r).digest();\n    }\n    a(iu, \"sha256\");\n    function De(r, e) {\n        return er.createHmac(\"sha256\", r).update(e).digest();\n    }\n    a(De, \"hmacSha256\");\n    function su(r, e, t) {\n        for(var n = De(r, y.concat([\n            e,\n            y.from([\n                0,\n                0,\n                0,\n                1\n            ])\n        ])), i = n, s = 0; s < t - 1; s++)n = De(r, n), i = Oi(i, n);\n        return i;\n    }\n    a(su, \"Hi\");\n    Ni.exports = {\n        startSession: Ja,\n        continueSession: Xa,\n        finalizeSession: eu\n    };\n});\nvar tr = {};\nie(tr, {\n    join: ()=>ou\n});\nfunction ou(...r) {\n    return r.join(\"/\");\n}\nvar rr = z(()=>{\n    \"use strict\";\n    p();\n    a(ou, \"join\");\n});\nvar nr = {};\nie(nr, {\n    stat: ()=>au\n});\nfunction au(r, e) {\n    e(new Error(\"No filesystem\"));\n}\nvar ir = z(()=>{\n    \"use strict\";\n    p();\n    a(au, \"stat\");\n});\nvar sr = {};\nie(sr, {\n    default: ()=>uu\n});\nvar uu, or = z(()=>{\n    \"use strict\";\n    p();\n    uu = {};\n});\nvar Qi = {};\nie(Qi, {\n    StringDecoder: ()=>ar\n});\nvar ur, ar, Wi = z(()=>{\n    \"use strict\";\n    p();\n    ur = class ur {\n        constructor(e){\n            _(this, \"td\");\n            this.td = new TextDecoder(e);\n        }\n        write(e) {\n            return this.td.decode(e, {\n                stream: !0\n            });\n        }\n        end(e) {\n            return this.td.decode(e);\n        }\n    };\n    a(ur, \"StringDecoder\");\n    ar = ur;\n});\nvar $i = I((ol, Gi)=>{\n    \"use strict\";\n    p();\n    var { Transform: cu } = (or(), N(sr)), { StringDecoder: hu } = (Wi(), N(Qi)), be = Symbol(\"last\"), ft = Symbol(\"decoder\");\n    function lu(r, e, t) {\n        let n;\n        if (this.overflow) {\n            if (n = this[ft].write(r).split(this.matcher), n.length === 1) return t();\n            n.shift(), this.overflow = !1;\n        } else this[be] += this[ft].write(r), n = this[be].split(this.matcher);\n        this[be] = n.pop();\n        for(let i = 0; i < n.length; i++)try {\n            Hi(this, this.mapper(n[i]));\n        } catch (s) {\n            return t(s);\n        }\n        if (this.overflow = this[be].length > this.maxLength, this.overflow && !this.skipOverflow) {\n            t(new Error(\"maximum buffer reached\"));\n            return;\n        }\n        t();\n    }\n    a(lu, \"transform\");\n    function fu(r) {\n        if (this[be] += this[ft].end(), this[be]) try {\n            Hi(this, this.mapper(this[be]));\n        } catch (e) {\n            return r(e);\n        }\n        r();\n    }\n    a(fu, \"flush\");\n    function Hi(r, e) {\n        e !== void 0 && r.push(e);\n    }\n    a(Hi, \"push\");\n    function ji(r) {\n        return r;\n    }\n    a(ji, \"noop\");\n    function pu(r, e, t) {\n        switch(r = r || /\\r?\\n/, e = e || ji, t = t || {}, arguments.length){\n            case 1:\n                typeof r == \"function\" ? (e = r, r = /\\r?\\n/) : typeof r == \"object\" && !(r instanceof RegExp) && !r[Symbol.split] && (t = r, r = /\\r?\\n/);\n                break;\n            case 2:\n                typeof r == \"function\" ? (t = e, e = r, r = /\\r?\\n/) : typeof e == \"object\" && (t = e, e = ji);\n        }\n        t = Object.assign({}, t), t.autoDestroy = !0, t.transform = lu, t.flush = fu, t.readableObjectMode = !0;\n        let n = new cu(t);\n        return n[be] = \"\", n[ft] = new hu(\"utf8\"), n.matcher = r, n.mapper = e, n.maxLength = t.maxLength, n.skipOverflow = t.skipOverflow || !1, n.overflow = !1, n._destroy = function(i, s) {\n            this._writableState.errorEmitted = !1, s(i);\n        }, n;\n    }\n    a(pu, \"split\");\n    Gi.exports = pu;\n});\nvar zi = I((cl, pe)=>{\n    \"use strict\";\n    p();\n    var Vi = (rr(), N(tr)), du = (or(), N(sr)).Stream, yu = $i(), Ki = (He(), N(je)), mu = 5432, pt = m.platform === \"win32\", tt = m.stderr, gu = 56, wu = 7, bu = 61440, Su = 32768;\n    function xu(r) {\n        return (r & bu) == Su;\n    }\n    a(xu, \"isRegFile\");\n    var ke = [\n        \"host\",\n        \"port\",\n        \"database\",\n        \"user\",\n        \"password\"\n    ], cr = ke.length, vu = ke[cr - 1];\n    function hr() {\n        var r = tt instanceof du && tt.writable === !0;\n        if (r) {\n            var e = Array.prototype.slice.call(arguments).concat(`\n`);\n            tt.write(Ki.format.apply(Ki, e));\n        }\n    }\n    a(hr, \"warn\");\n    Object.defineProperty(pe.exports, \"isWin\", {\n        get: a(function() {\n            return pt;\n        }, \"get\"),\n        set: a(function(r) {\n            pt = r;\n        }, \"set\")\n    });\n    pe.exports.warnTo = function(r) {\n        var e = tt;\n        return tt = r, e;\n    };\n    pe.exports.getFileName = function(r) {\n        var e = r || m.env, t = e.PGPASSFILE || (pt ? Vi.join(e.APPDATA || \"./\", \"postgresql\", \"pgpass.conf\") : Vi.join(e.HOME || \"./\", \".pgpass\"));\n        return t;\n    };\n    pe.exports.usePgPass = function(r, e) {\n        return Object.prototype.hasOwnProperty.call(m.env, \"PGPASSWORD\") ? !1 : pt ? !0 : (e = e || \"<unkn>\", xu(r.mode) ? r.mode & (gu | wu) ? (hr('WARNING: password file \"%s\" has group or world access; permissions should be u=rw (0600) or less', e), !1) : !0 : (hr('WARNING: password file \"%s\" is not a plain file', e), !1));\n    };\n    var Eu = pe.exports.match = function(r, e) {\n        return ke.slice(0, -1).reduce(function(t, n, i) {\n            return i == 1 && Number(r[n] || mu) === Number(e[n]) ? t && !0 : t && (e[n] === \"*\" || e[n] === r[n]);\n        }, !0);\n    };\n    pe.exports.getPassword = function(r, e, t) {\n        var n, i = e.pipe(yu());\n        function s(c) {\n            var h = _u(c);\n            h && Au(h) && Eu(r, h) && (n = h[vu], i.end());\n        }\n        a(s, \"onLine\");\n        var o = a(function() {\n            e.destroy(), t(n);\n        }, \"onEnd\"), u = a(function(c) {\n            e.destroy(), hr(\"WARNING: error on reading file: %s\", c), t(void 0);\n        }, \"onErr\");\n        e.on(\"error\", u), i.on(\"data\", s).on(\"end\", o).on(\"error\", u);\n    };\n    var _u = pe.exports.parseLine = function(r) {\n        if (r.length < 11 || r.match(/^\\s+#/)) return null;\n        for(var e = \"\", t = \"\", n = 0, i = 0, s = 0, o = {}, u = !1, c = a(function(l, d, b) {\n            var C = r.substring(d, b);\n            Object.hasOwnProperty.call(m.env, \"PGPASS_NO_DEESCAPE\") || (C = C.replace(/\\\\([:\\\\])/g, \"$1\")), o[ke[l]] = C;\n        }, \"addToObj\"), h = 0; h < r.length - 1; h += 1){\n            if (e = r.charAt(h + 1), t = r.charAt(h), u = n == cr - 1, u) {\n                c(n, i);\n                break;\n            }\n            h >= 0 && e == \":\" && t !== \"\\\\\" && (c(n, i, h + 1), i = h + 2, n += 1);\n        }\n        return o = Object.keys(o).length === cr ? o : null, o;\n    }, Au = pe.exports.isValidEntry = function(r) {\n        for(var e = {\n            0: function(o) {\n                return o.length > 0;\n            },\n            1: function(o) {\n                return o === \"*\" ? !0 : (o = Number(o), isFinite(o) && o > 0 && o < 9007199254740992 && Math.floor(o) === o);\n            },\n            2: function(o) {\n                return o.length > 0;\n            },\n            3: function(o) {\n                return o.length > 0;\n            },\n            4: function(o) {\n                return o.length > 0;\n            }\n        }, t = 0; t < ke.length; t += 1){\n            var n = e[t], i = r[ke[t]] || \"\", s = n(i);\n            if (!s) return !1;\n        }\n        return !0;\n    };\n});\nvar Zi = I((pl, lr)=>{\n    \"use strict\";\n    p();\n    var fl = (rr(), N(tr)), Yi = (ir(), N(nr)), dt = zi();\n    lr.exports = function(r, e) {\n        var t = dt.getFileName();\n        Yi.stat(t, function(n, i) {\n            if (n || !dt.usePgPass(i, t)) return e(void 0);\n            var s = Yi.createReadStream(t);\n            dt.getPassword(r, s, e);\n        });\n    };\n    lr.exports.warnTo = dt.warnTo;\n});\nvar mt = I((yl, Ji)=>{\n    \"use strict\";\n    p();\n    var Cu = Je();\n    function yt(r) {\n        this._types = r || Cu, this.text = {}, this.binary = {};\n    }\n    a(yt, \"TypeOverrides\");\n    yt.prototype.getOverrides = function(r) {\n        switch(r){\n            case \"text\":\n                return this.text;\n            case \"binary\":\n                return this.binary;\n            default:\n                return {};\n        }\n    };\n    yt.prototype.setTypeParser = function(r, e, t) {\n        typeof e == \"function\" && (t = e, e = \"text\"), this.getOverrides(e)[r] = t;\n    };\n    yt.prototype.getTypeParser = function(r, e) {\n        return e = e || \"text\", this.getOverrides(e)[r] || this._types.getTypeParser(r, e);\n    };\n    Ji.exports = yt;\n});\nvar Xi = {};\nie(Xi, {\n    default: ()=>Tu\n});\nvar Tu, es = z(()=>{\n    \"use strict\";\n    p();\n    Tu = {};\n});\nvar ts = {};\nie(ts, {\n    parse: ()=>fr\n});\nfunction fr(r, e = !1) {\n    let { protocol: t } = new URL(r), n = \"http:\" + r.substring(t.length), { username: i, password: s, host: o, hostname: u, port: c, pathname: h, search: l, searchParams: d, hash: b } = new URL(n);\n    s = decodeURIComponent(s), i = decodeURIComponent(i), h = decodeURIComponent(h);\n    let C = i + \":\" + s, B = e ? Object.fromEntries(d.entries()) : l;\n    return {\n        href: r,\n        protocol: t,\n        auth: C,\n        username: i,\n        password: s,\n        host: o,\n        hostname: u,\n        port: c,\n        pathname: h,\n        search: l,\n        query: B,\n        hash: b\n    };\n}\nvar pr = z(()=>{\n    \"use strict\";\n    p();\n    a(fr, \"parse\");\n});\nvar ns = I((xl, rs)=>{\n    \"use strict\";\n    p();\n    var Iu = (pr(), N(ts)), dr = (ir(), N(nr));\n    function yr(r) {\n        if (r.charAt(0) === \"/\") {\n            var t = r.split(\" \");\n            return {\n                host: t[0],\n                database: t[1]\n            };\n        }\n        var e = Iu.parse(/ |%[^a-f0-9]|%[a-f0-9][^a-f0-9]/i.test(r) ? encodeURI(r).replace(/\\%25(\\d\\d)/g, \"%$1\") : r, !0), t = e.query;\n        for(var n in t)Array.isArray(t[n]) && (t[n] = t[n][t[n].length - 1]);\n        var i = (e.auth || \":\").split(\":\");\n        if (t.user = i[0], t.password = i.splice(1).join(\":\"), t.port = e.port, e.protocol == \"socket:\") return t.host = decodeURI(e.pathname), t.database = e.query.db, t.client_encoding = e.query.encoding, t;\n        t.host || (t.host = e.hostname);\n        var s = e.pathname;\n        if (!t.host && s && /^%2f/i.test(s)) {\n            var o = s.split(\"/\");\n            t.host = decodeURIComponent(o[0]), s = o.splice(1).join(\"/\");\n        }\n        switch(s && s.charAt(0) === \"/\" && (s = s.slice(1) || null), t.database = s && decodeURI(s), (t.ssl === \"true\" || t.ssl === \"1\") && (t.ssl = !0), t.ssl === \"0\" && (t.ssl = !1), (t.sslcert || t.sslkey || t.sslrootcert || t.sslmode) && (t.ssl = {}), t.sslcert && (t.ssl.cert = dr.readFileSync(t.sslcert).toString()), t.sslkey && (t.ssl.key = dr.readFileSync(t.sslkey).toString()), t.sslrootcert && (t.ssl.ca = dr.readFileSync(t.sslrootcert).toString()), t.sslmode){\n            case \"disable\":\n                {\n                    t.ssl = !1;\n                    break;\n                }\n            case \"prefer\":\n            case \"require\":\n            case \"verify-ca\":\n            case \"verify-full\":\n                break;\n            case \"no-verify\":\n                {\n                    t.ssl.rejectUnauthorized = !1;\n                    break;\n                }\n        }\n        return t;\n    }\n    a(yr, \"parse\");\n    rs.exports = yr;\n    yr.parse = yr;\n});\nvar gt = I((_l, os)=>{\n    \"use strict\";\n    p();\n    var Pu = (es(), N(Xi)), ss = Xe(), is = ns().parse, $ = a(function(r, e, t) {\n        return t === void 0 ? t = m.env[\"PG\" + r.toUpperCase()] : t === !1 || (t = m.env[t]), e[r] || t || ss[r];\n    }, \"val\"), Bu = a(function() {\n        switch(m.env.PGSSLMODE){\n            case \"disable\":\n                return !1;\n            case \"prefer\":\n            case \"require\":\n            case \"verify-ca\":\n            case \"verify-full\":\n                return !0;\n            case \"no-verify\":\n                return {\n                    rejectUnauthorized: !1\n                };\n        }\n        return ss.ssl;\n    }, \"readSSLConfigFromEnvironment\"), Ue = a(function(r) {\n        return \"'\" + (\"\" + r).replace(/\\\\/g, \"\\\\\\\\\").replace(/'/g, \"\\\\'\") + \"'\";\n    }, \"quoteParamValue\"), ne = a(function(r, e, t) {\n        var n = e[t];\n        n != null && r.push(t + \"=\" + Ue(n));\n    }, \"add\"), gr = class gr {\n        constructor(e){\n            e = typeof e == \"string\" ? is(e) : e || {}, e.connectionString && (e = Object.assign({}, e, is(e.connectionString))), this.user = $(\"user\", e), this.database = $(\"database\", e), this.database === void 0 && (this.database = this.user), this.port = parseInt($(\"port\", e), 10), this.host = $(\"host\", e), Object.defineProperty(this, \"password\", {\n                configurable: !0,\n                enumerable: !1,\n                writable: !0,\n                value: $(\"password\", e)\n            }), this.binary = $(\"binary\", e), this.options = $(\"options\", e), this.ssl = typeof e.ssl > \"u\" ? Bu() : e.ssl, typeof this.ssl == \"string\" && this.ssl === \"true\" && (this.ssl = !0), this.ssl === \"no-verify\" && (this.ssl = {\n                rejectUnauthorized: !1\n            }), this.ssl && this.ssl.key && Object.defineProperty(this.ssl, \"key\", {\n                enumerable: !1\n            }), this.client_encoding = $(\"client_encoding\", e), this.replication = $(\"replication\", e), this.isDomainSocket = !(this.host || \"\").indexOf(\"/\"), this.application_name = $(\"application_name\", e, \"PGAPPNAME\"), this.fallback_application_name = $(\"fallback_application_name\", e, !1), this.statement_timeout = $(\"statement_timeout\", e, !1), this.lock_timeout = $(\"lock_timeout\", e, !1), this.idle_in_transaction_session_timeout = $(\"idle_in_transaction_session_timeout\", e, !1), this.query_timeout = $(\"query_timeout\", e, !1), e.connectionTimeoutMillis === void 0 ? this.connect_timeout = m.env.PGCONNECT_TIMEOUT || 0 : this.connect_timeout = Math.floor(e.connectionTimeoutMillis / 1e3), e.keepAlive === !1 ? this.keepalives = 0 : e.keepAlive === !0 && (this.keepalives = 1), typeof e.keepAliveInitialDelayMillis == \"number\" && (this.keepalives_idle = Math.floor(e.keepAliveInitialDelayMillis / 1e3));\n        }\n        getLibpqConnectionString(e) {\n            var t = [];\n            ne(t, this, \"user\"), ne(t, this, \"password\"), ne(t, this, \"port\"), ne(t, this, \"application_name\"), ne(t, this, \"fallback_application_name\"), ne(t, this, \"connect_timeout\"), ne(t, this, \"options\");\n            var n = typeof this.ssl == \"object\" ? this.ssl : this.ssl ? {\n                sslmode: this.ssl\n            } : {};\n            if (ne(t, n, \"sslmode\"), ne(t, n, \"sslca\"), ne(t, n, \"sslkey\"), ne(t, n, \"sslcert\"), ne(t, n, \"sslrootcert\"), this.database && t.push(\"dbname=\" + Ue(this.database)), this.replication && t.push(\"replication=\" + Ue(this.replication)), this.host && t.push(\"host=\" + Ue(this.host)), this.isDomainSocket) return e(null, t.join(\" \"));\n            this.client_encoding && t.push(\"client_encoding=\" + Ue(this.client_encoding)), Pu.lookup(this.host, function(i, s) {\n                return i ? e(i, null) : (t.push(\"hostaddr=\" + Ue(s)), e(null, t.join(\" \")));\n            });\n        }\n    };\n    a(gr, \"ConnectionParameters\");\n    var mr = gr;\n    os.exports = mr;\n});\nvar cs = I((Tl, us)=>{\n    \"use strict\";\n    p();\n    var Lu = Je(), as = /^([A-Za-z]+)(?: (\\d+))?(?: (\\d+))?/, br = class br {\n        constructor(e, t){\n            this.command = null, this.rowCount = null, this.oid = null, this.rows = [], this.fields = [], this._parsers = void 0, this._types = t, this.RowCtor = null, this.rowAsArray = e === \"array\", this.rowAsArray && (this.parseRow = this._parseRowAsArray);\n        }\n        addCommandComplete(e) {\n            var t;\n            e.text ? t = as.exec(e.text) : t = as.exec(e.command), t && (this.command = t[1], t[3] ? (this.oid = parseInt(t[2], 10), this.rowCount = parseInt(t[3], 10)) : t[2] && (this.rowCount = parseInt(t[2], 10)));\n        }\n        _parseRowAsArray(e) {\n            for(var t = new Array(e.length), n = 0, i = e.length; n < i; n++){\n                var s = e[n];\n                s !== null ? t[n] = this._parsers[n](s) : t[n] = null;\n            }\n            return t;\n        }\n        parseRow(e) {\n            for(var t = {}, n = 0, i = e.length; n < i; n++){\n                var s = e[n], o = this.fields[n].name;\n                s !== null ? t[o] = this._parsers[n](s) : t[o] = null;\n            }\n            return t;\n        }\n        addRow(e) {\n            this.rows.push(e);\n        }\n        addFields(e) {\n            this.fields = e, this.fields.length && (this._parsers = new Array(e.length));\n            for(var t = 0; t < e.length; t++){\n                var n = e[t];\n                this._types ? this._parsers[t] = this._types.getTypeParser(n.dataTypeID, n.format || \"text\") : this._parsers[t] = Lu.getTypeParser(n.dataTypeID, n.format || \"text\");\n            }\n        }\n    };\n    a(br, \"Result\");\n    var wr = br;\n    us.exports = wr;\n});\nvar ps = I((Bl, fs)=>{\n    \"use strict\";\n    p();\n    var { EventEmitter: Ru } = we(), hs = cs(), ls = et(), xr = class xr extends Ru {\n        constructor(e, t, n){\n            super(), e = ls.normalizeQueryConfig(e, t, n), this.text = e.text, this.values = e.values, this.rows = e.rows, this.types = e.types, this.name = e.name, this.binary = e.binary, this.portal = e.portal || \"\", this.callback = e.callback, this._rowMode = e.rowMode, m.domain && e.callback && (this.callback = m.domain.bind(e.callback)), this._result = new hs(this._rowMode, this.types), this._results = this._result, this.isPreparedStatement = !1, this._canceledDueToError = !1, this._promise = null;\n        }\n        requiresPreparation() {\n            return this.name || this.rows ? !0 : !this.text || !this.values ? !1 : this.values.length > 0;\n        }\n        _checkForMultirow() {\n            this._result.command && (Array.isArray(this._results) || (this._results = [\n                this._result\n            ]), this._result = new hs(this._rowMode, this.types), this._results.push(this._result));\n        }\n        handleRowDescription(e) {\n            this._checkForMultirow(), this._result.addFields(e.fields), this._accumulateRows = this.callback || !this.listeners(\"row\").length;\n        }\n        handleDataRow(e) {\n            let t;\n            if (!this._canceledDueToError) {\n                try {\n                    t = this._result.parseRow(e.fields);\n                } catch (n) {\n                    this._canceledDueToError = n;\n                    return;\n                }\n                this.emit(\"row\", t, this._result), this._accumulateRows && this._result.addRow(t);\n            }\n        }\n        handleCommandComplete(e, t) {\n            this._checkForMultirow(), this._result.addCommandComplete(e), this.rows && t.sync();\n        }\n        handleEmptyQuery(e) {\n            this.rows && e.sync();\n        }\n        handleError(e, t) {\n            if (this._canceledDueToError && (e = this._canceledDueToError, this._canceledDueToError = !1), this.callback) return this.callback(e);\n            this.emit(\"error\", e);\n        }\n        handleReadyForQuery(e) {\n            if (this._canceledDueToError) return this.handleError(this._canceledDueToError, e);\n            if (this.callback) try {\n                this.callback(null, this._results);\n            } catch (t) {\n                m.nextTick(()=>{\n                    throw t;\n                });\n            }\n            this.emit(\"end\", this._results);\n        }\n        submit(e) {\n            if (typeof this.text != \"string\" && typeof this.name != \"string\") return new Error(\"A query must have either text or a name. Supplying neither is unsupported.\");\n            let t = e.parsedStatements[this.name];\n            return this.text && t && this.text !== t ? new Error(`Prepared statements must be \\\nunique - '${this.name}' was used for a different statement`) : this.values && !Array.isArray(this.values) ? new Error(\"Query values must be an array\") : (this.requiresPreparation() ? this.prepare(e) : e.query(this.text), null);\n        }\n        hasBeenParsed(e) {\n            return this.name && e.parsedStatements[this.name];\n        }\n        handlePortalSuspended(e) {\n            this._getRows(e, this.rows);\n        }\n        _getRows(e, t) {\n            e.execute({\n                portal: this.portal,\n                rows: t\n            }), t ? e.flush() : e.sync();\n        }\n        prepare(e) {\n            this.isPreparedStatement = !0, this.hasBeenParsed(e) || e.parse({\n                text: this.text,\n                name: this.name,\n                types: this.types\n            });\n            try {\n                e.bind({\n                    portal: this.portal,\n                    statement: this.name,\n                    values: this.values,\n                    binary: this.binary,\n                    valueMapper: ls.prepareValue\n                });\n            } catch (t) {\n                this.handleError(t, e);\n                return;\n            }\n            e.describe({\n                type: \"P\",\n                name: this.portal || \"\"\n            }), this._getRows(e, this.rows);\n        }\n        handleCopyInResponse(e) {\n            e.sendCopyFail(\"No source stream defined\");\n        }\n        handleCopyData(e, t) {}\n    };\n    a(xr, \"Query\");\n    var Sr = xr;\n    fs.exports = Sr;\n});\nvar ys = {};\nie(ys, {\n    Socket: ()=>_e,\n    isIP: ()=>Fu\n});\nfunction Fu(r) {\n    return 0;\n}\nvar ds, Mu, E, _e, wt = z(()=>{\n    \"use strict\";\n    p();\n    ds = Te(we(), 1);\n    a(Fu, \"isIP\");\n    Mu = a((r)=>r.replace(/^[^.]+\\./, \"api.\"), \"transformHost\"), E = class E extends ds.EventEmitter {\n        constructor(){\n            super(...arguments);\n            _(this, \"opts\", {});\n            _(this, \"connecting\", !1);\n            _(this, \"pending\", !0);\n            _(this, \"writable\", !0);\n            _(this, \"encrypted\", !1);\n            _(this, \"authorized\", !1);\n            _(this, \"destroyed\", !1);\n            _(this, \"ws\", null);\n            _(this, \"writeBuffer\");\n            _(this, \"tlsState\", 0);\n            _(this, \"tlsRead\");\n            _(this, \"tlsWrite\");\n        }\n        static get poolQueryViaFetch() {\n            return E.opts.poolQueryViaFetch ?? E.defaults.poolQueryViaFetch;\n        }\n        static set poolQueryViaFetch(t) {\n            E.opts.poolQueryViaFetch = t;\n        }\n        static get fetchEndpoint() {\n            return E.opts.fetchEndpoint ?? E.defaults.fetchEndpoint;\n        }\n        static set fetchEndpoint(t) {\n            E.opts.fetchEndpoint = t;\n        }\n        static get fetchConnectionCache() {\n            return !0;\n        }\n        static set fetchConnectionCache(t) {\n            console.warn(\"The `fetchConnectionCache` option is deprecated (now always `true`)\");\n        }\n        static get fetchFunction() {\n            return E.opts.fetchFunction ?? E.defaults.fetchFunction;\n        }\n        static set fetchFunction(t) {\n            E.opts.fetchFunction = t;\n        }\n        static get webSocketConstructor() {\n            return E.opts.webSocketConstructor ?? E.defaults.webSocketConstructor;\n        }\n        static set webSocketConstructor(t) {\n            E.opts.webSocketConstructor = t;\n        }\n        get webSocketConstructor() {\n            return this.opts.webSocketConstructor ?? E.webSocketConstructor;\n        }\n        set webSocketConstructor(t) {\n            this.opts.webSocketConstructor = t;\n        }\n        static get wsProxy() {\n            return E.opts.wsProxy ?? E.defaults.wsProxy;\n        }\n        static set wsProxy(t) {\n            E.opts.wsProxy = t;\n        }\n        get wsProxy() {\n            return this.opts.wsProxy ?? E.wsProxy;\n        }\n        set wsProxy(t) {\n            this.opts.wsProxy = t;\n        }\n        static get coalesceWrites() {\n            return E.opts.coalesceWrites ?? E.defaults.coalesceWrites;\n        }\n        static set coalesceWrites(t) {\n            E.opts.coalesceWrites = t;\n        }\n        get coalesceWrites() {\n            return this.opts.coalesceWrites ?? E.coalesceWrites;\n        }\n        set coalesceWrites(t) {\n            this.opts.coalesceWrites = t;\n        }\n        static get useSecureWebSocket() {\n            return E.opts.useSecureWebSocket ?? E.defaults.useSecureWebSocket;\n        }\n        static set useSecureWebSocket(t) {\n            E.opts.useSecureWebSocket = t;\n        }\n        get useSecureWebSocket() {\n            return this.opts.useSecureWebSocket ?? E.useSecureWebSocket;\n        }\n        set useSecureWebSocket(t) {\n            this.opts.useSecureWebSocket = t;\n        }\n        static get forceDisablePgSSL() {\n            return E.opts.forceDisablePgSSL ?? E.defaults.forceDisablePgSSL;\n        }\n        static set forceDisablePgSSL(t) {\n            E.opts.forceDisablePgSSL = t;\n        }\n        get forceDisablePgSSL() {\n            return this.opts.forceDisablePgSSL ?? E.forceDisablePgSSL;\n        }\n        set forceDisablePgSSL(t) {\n            this.opts.forceDisablePgSSL = t;\n        }\n        static get disableSNI() {\n            return E.opts.disableSNI ?? E.defaults.disableSNI;\n        }\n        static set disableSNI(t) {\n            E.opts.disableSNI = t;\n        }\n        get disableSNI() {\n            return this.opts.disableSNI ?? E.disableSNI;\n        }\n        set disableSNI(t) {\n            this.opts.disableSNI = t;\n        }\n        static get pipelineConnect() {\n            return E.opts.pipelineConnect ?? E.defaults.pipelineConnect;\n        }\n        static set pipelineConnect(t) {\n            E.opts.pipelineConnect = t;\n        }\n        get pipelineConnect() {\n            return this.opts.pipelineConnect ?? E.pipelineConnect;\n        }\n        set pipelineConnect(t) {\n            this.opts.pipelineConnect = t;\n        }\n        static get subtls() {\n            return E.opts.subtls ?? E.defaults.subtls;\n        }\n        static set subtls(t) {\n            E.opts.subtls = t;\n        }\n        get subtls() {\n            return this.opts.subtls ?? E.subtls;\n        }\n        set subtls(t) {\n            this.opts.subtls = t;\n        }\n        static get pipelineTLS() {\n            return E.opts.pipelineTLS ?? E.defaults.pipelineTLS;\n        }\n        static set pipelineTLS(t) {\n            E.opts.pipelineTLS = t;\n        }\n        get pipelineTLS() {\n            return this.opts.pipelineTLS ?? E.pipelineTLS;\n        }\n        set pipelineTLS(t) {\n            this.opts.pipelineTLS = t;\n        }\n        static get rootCerts() {\n            return E.opts.rootCerts ?? E.defaults.rootCerts;\n        }\n        static set rootCerts(t) {\n            E.opts.rootCerts = t;\n        }\n        get rootCerts() {\n            return this.opts.rootCerts ?? E.rootCerts;\n        }\n        set rootCerts(t) {\n            this.opts.rootCerts = t;\n        }\n        wsProxyAddrForHost(t, n) {\n            let i = this.wsProxy;\n            if (i === void 0) throw new Error(\"No WebSocket proxy is configured. Please see https://github.com/neondatabase/serverless/blob/main/CONFIG.md#wsproxy-string--host-string-port-number--string--string\");\n            return typeof i == \"function\" ? i(t, n) : `${i}?address=${t}:${n}`;\n        }\n        setNoDelay() {\n            return this;\n        }\n        setKeepAlive() {\n            return this;\n        }\n        ref() {\n            return this;\n        }\n        unref() {\n            return this;\n        }\n        connect(t, n, i) {\n            this.connecting = !0, i && this.once(\"connect\", i);\n            let s = a(()=>{\n                this.connecting = !1, this.pending = !1, this.emit(\"connect\"), this.emit(\"ready\");\n            }, \"handleWebSocketOpen\"), o = a((c, h = !1)=>{\n                c.binaryType = \"arraybuffer\", c.addEventListener(\"error\", (l)=>{\n                    this.emit(\"error\", l), this.emit(\"close\");\n                }), c.addEventListener(\"message\", (l)=>{\n                    if (this.tlsState === 0) {\n                        let d = y.from(l.data);\n                        this.emit(\"data\", d);\n                    }\n                }), c.addEventListener(\"close\", ()=>{\n                    this.emit(\"close\");\n                }), h ? s() : c.addEventListener(\"open\", s);\n            }, \"configureWebSocket\"), u;\n            try {\n                u = this.wsProxyAddrForHost(n, typeof t == \"string\" ? parseInt(t, 10) : t);\n            } catch (c) {\n                this.emit(\"error\", c), this.emit(\"close\");\n                return;\n            }\n            try {\n                let h = (this.useSecureWebSocket ? \"wss:\" : \"ws:\") + \"//\" + u;\n                if (this.webSocketConstructor !== void 0) this.ws = new this.webSocketConstructor(h), o(this.ws);\n                else try {\n                    this.ws = new WebSocket(h), o(this.ws);\n                } catch  {\n                    this.ws = new __unstable_WebSocket(h), o(this.ws);\n                }\n            } catch (c) {\n                let l = (this.useSecureWebSocket ? \"https:\" : \"http:\") + \"//\" + u;\n                fetch(l, {\n                    headers: {\n                        Upgrade: \"websocket\"\n                    }\n                }).then((d)=>{\n                    if (this.ws = d.webSocket, this.ws == null) throw c;\n                    this.ws.accept(), o(this.ws, !0);\n                }).catch((d)=>{\n                    this.emit(\"error\", new Error(`All attempts to open a WebSocket to\\\n connect to the database failed. Please refer to https://github.com/neondatabase\\\n/serverless/blob/main/CONFIG.md#websocketconstructor-typeof-websocket--undefined\\\n. Details: ${d.message}`)), this.emit(\"close\");\n                });\n            }\n        }\n        async startTls(t) {\n            if (this.subtls === void 0) throw new Error(\"For Postgres SSL connections, you must set `neonConfig.subtls` to the subtls library. See https://github.com/neondatabase/serverless/blob/main/CONFIG.md for more information.\");\n            this.tlsState = 1;\n            let n = this.subtls.TrustedCert.fromPEM(this.rootCerts), i = new this.subtls.WebSocketReadQueue(this.ws), s = i.read.bind(i), o = this.rawWrite.bind(this), [u, c] = await this.subtls.startTls(t, n, s, o, {\n                useSNI: !this.disableSNI,\n                expectPreData: this.pipelineTLS ? new Uint8Array([\n                    83\n                ]) : void 0\n            });\n            this.tlsRead = u, this.tlsWrite = c, this.tlsState = 2, this.encrypted = !0, this.authorized = !0, this.emit(\"secureConnection\", this), this.tlsReadLoop();\n        }\n        async tlsReadLoop() {\n            for(;;){\n                let t = await this.tlsRead();\n                if (t === void 0) break;\n                {\n                    let n = y.from(t);\n                    this.emit(\"data\", n);\n                }\n            }\n        }\n        rawWrite(t) {\n            if (!this.coalesceWrites) {\n                this.ws.send(t);\n                return;\n            }\n            if (this.writeBuffer === void 0) this.writeBuffer = t, setTimeout(()=>{\n                this.ws.send(this.writeBuffer), this.writeBuffer = void 0;\n            }, 0);\n            else {\n                let n = new Uint8Array(this.writeBuffer.length + t.length);\n                n.set(this.writeBuffer), n.set(t, this.writeBuffer.length), this.writeBuffer = n;\n            }\n        }\n        write(t, n = \"utf8\", i = (s)=>{}) {\n            return t.length === 0 ? (i(), !0) : (typeof t == \"string\" && (t = y.from(t, n)), this.tlsState === 0 ? (this.rawWrite(t), i()) : this.tlsState === 1 ? this.once(\"secureConnection\", ()=>{\n                this.write(t, n, i);\n            }) : (this.tlsWrite(t), i()), !0);\n        }\n        end(t = y.alloc(0), n = \"utf8\", i = ()=>{}) {\n            return this.write(t, n, ()=>{\n                this.ws.close(), i();\n            }), this;\n        }\n        destroy() {\n            return this.destroyed = !0, this.end();\n        }\n    };\n    a(E, \"Socket\"), _(E, \"defaults\", {\n        poolQueryViaFetch: !1,\n        fetchEndpoint: a((t)=>\"https://\" + Mu(t) + \"/sql\", \"fetchEndpoint\"),\n        fetchConnectionCache: !0,\n        fetchFunction: void 0,\n        webSocketConstructor: void 0,\n        wsProxy: a((t)=>t + \"/v2\", \"wsProxy\"),\n        useSecureWebSocket: !0,\n        forceDisablePgSSL: !0,\n        coalesceWrites: !0,\n        pipelineConnect: \"password\",\n        subtls: void 0,\n        rootCerts: \"\",\n        pipelineTLS: !1,\n        disableSNI: !1\n    }), _(E, \"opts\", {});\n    _e = E;\n});\nvar Yr = I((T)=>{\n    \"use strict\";\n    p();\n    Object.defineProperty(T, \"__esModule\", {\n        value: !0\n    });\n    T.NoticeMessage = T.DataRowMessage = T.CommandCompleteMessage = T.ReadyForQueryMessage = T.NotificationResponseMessage = T.BackendKeyDataMessage = T.AuthenticationMD5Password = T.ParameterStatusMessage = T.ParameterDescriptionMessage = T.RowDescriptionMessage = T.Field = T.CopyResponse = T.CopyDataMessage = T.DatabaseError = T.copyDone = T.emptyQuery = T.replicationStart = T.portalSuspended = T.noData = T.closeComplete = T.bindComplete = T.parseComplete = void 0;\n    T.parseComplete = {\n        name: \"parseComplete\",\n        length: 5\n    };\n    T.bindComplete = {\n        name: \"bindComplete\",\n        length: 5\n    };\n    T.closeComplete = {\n        name: \"closeComplete\",\n        length: 5\n    };\n    T.noData = {\n        name: \"noData\",\n        length: 5\n    };\n    T.portalSuspended = {\n        name: \"portalSuspended\",\n        length: 5\n    };\n    T.replicationStart = {\n        name: \"replicationStart\",\n        length: 4\n    };\n    T.emptyQuery = {\n        name: \"emptyQuery\",\n        length: 4\n    };\n    T.copyDone = {\n        name: \"copyDone\",\n        length: 4\n    };\n    var kr = class kr extends Error {\n        constructor(e, t, n){\n            super(e), this.length = t, this.name = n;\n        }\n    };\n    a(kr, \"DatabaseError\");\n    var vr = kr;\n    T.DatabaseError = vr;\n    var Ur = class Ur {\n        constructor(e, t){\n            this.length = e, this.chunk = t, this.name = \"copyData\";\n        }\n    };\n    a(Ur, \"CopyDataMessage\");\n    var Er = Ur;\n    T.CopyDataMessage = Er;\n    var Or = class Or {\n        constructor(e, t, n, i){\n            this.length = e, this.name = t, this.binary = n, this.columnTypes = new Array(i);\n        }\n    };\n    a(Or, \"CopyResponse\");\n    var _r = Or;\n    T.CopyResponse = _r;\n    var Nr = class Nr {\n        constructor(e, t, n, i, s, o, u){\n            this.name = e, this.tableID = t, this.columnID = n, this.dataTypeID = i, this.dataTypeSize = s, this.dataTypeModifier = o, this.format = u;\n        }\n    };\n    a(Nr, \"Field\");\n    var Ar = Nr;\n    T.Field = Ar;\n    var qr = class qr {\n        constructor(e, t){\n            this.length = e, this.fieldCount = t, this.name = \"rowDescription\", this.fields = new Array(this.fieldCount);\n        }\n    };\n    a(qr, \"RowDescriptionMessage\");\n    var Cr = qr;\n    T.RowDescriptionMessage = Cr;\n    var Qr = class Qr {\n        constructor(e, t){\n            this.length = e, this.parameterCount = t, this.name = \"parameterDescription\", this.dataTypeIDs = new Array(this.parameterCount);\n        }\n    };\n    a(Qr, \"ParameterDescriptionMessage\");\n    var Tr = Qr;\n    T.ParameterDescriptionMessage = Tr;\n    var Wr = class Wr {\n        constructor(e, t, n){\n            this.length = e, this.parameterName = t, this.parameterValue = n, this.name = \"parameterStatus\";\n        }\n    };\n    a(Wr, \"ParameterStatusMessage\");\n    var Ir = Wr;\n    T.ParameterStatusMessage = Ir;\n    var jr = class jr {\n        constructor(e, t){\n            this.length = e, this.salt = t, this.name = \"authenticationMD5Password\";\n        }\n    };\n    a(jr, \"AuthenticationMD5Password\");\n    var Pr = jr;\n    T.AuthenticationMD5Password = Pr;\n    var Hr = class Hr {\n        constructor(e, t, n){\n            this.length = e, this.processID = t, this.secretKey = n, this.name = \"backendKeyData\";\n        }\n    };\n    a(Hr, \"BackendKeyDataMessage\");\n    var Br = Hr;\n    T.BackendKeyDataMessage = Br;\n    var Gr = class Gr {\n        constructor(e, t, n, i){\n            this.length = e, this.processId = t, this.channel = n, this.payload = i, this.name = \"notification\";\n        }\n    };\n    a(Gr, \"NotificationResponseMessage\");\n    var Lr = Gr;\n    T.NotificationResponseMessage = Lr;\n    var $r = class $r {\n        constructor(e, t){\n            this.length = e, this.status = t, this.name = \"readyForQuery\";\n        }\n    };\n    a($r, \"ReadyForQueryMessage\");\n    var Rr = $r;\n    T.ReadyForQueryMessage = Rr;\n    var Vr = class Vr {\n        constructor(e, t){\n            this.length = e, this.text = t, this.name = \"commandComplete\";\n        }\n    };\n    a(Vr, \"CommandCompleteMessage\");\n    var Fr = Vr;\n    T.CommandCompleteMessage = Fr;\n    var Kr = class Kr {\n        constructor(e, t){\n            this.length = e, this.fields = t, this.name = \"dataRow\", this.fieldCount = t.length;\n        }\n    };\n    a(Kr, \"DataRowMessage\");\n    var Mr = Kr;\n    T.DataRowMessage = Mr;\n    var zr = class zr {\n        constructor(e, t){\n            this.length = e, this.message = t, this.name = \"notice\";\n        }\n    };\n    a(zr, \"NoticeMessage\");\n    var Dr = zr;\n    T.NoticeMessage = Dr;\n});\nvar ms = I((bt)=>{\n    \"use strict\";\n    p();\n    Object.defineProperty(bt, \"__esModule\", {\n        value: !0\n    });\n    bt.Writer = void 0;\n    var Jr = class Jr {\n        constructor(e = 256){\n            this.size = e, this.offset = 5, this.headerPosition = 0, this.buffer = y.allocUnsafe(e);\n        }\n        ensure(e) {\n            var t = this.buffer.length - this.offset;\n            if (t < e) {\n                var n = this.buffer, i = n.length + (n.length >> 1) + e;\n                this.buffer = y.allocUnsafe(i), n.copy(this.buffer);\n            }\n        }\n        addInt32(e) {\n            return this.ensure(4), this.buffer[this.offset++] = e >>> 24 & 255, this.buffer[this.offset++] = e >>> 16 & 255, this.buffer[this.offset++] = e >>> 8 & 255, this.buffer[this.offset++] = e >>> 0 & 255, this;\n        }\n        addInt16(e) {\n            return this.ensure(2), this.buffer[this.offset++] = e >>> 8 & 255, this.buffer[this.offset++] = e >>> 0 & 255, this;\n        }\n        addCString(e) {\n            if (!e) this.ensure(1);\n            else {\n                var t = y.byteLength(e);\n                this.ensure(t + 1), this.buffer.write(e, this.offset, \"utf-8\"), this.offset += t;\n            }\n            return this.buffer[this.offset++] = 0, this;\n        }\n        addString(e = \"\") {\n            var t = y.byteLength(e);\n            return this.ensure(t), this.buffer.write(e, this.offset), this.offset += t, this;\n        }\n        add(e) {\n            return this.ensure(e.length), e.copy(this.buffer, this.offset), this.offset += e.length, this;\n        }\n        join(e) {\n            if (e) {\n                this.buffer[this.headerPosition] = e;\n                let t = this.offset - (this.headerPosition + 1);\n                this.buffer.writeInt32BE(t, this.headerPosition + 1);\n            }\n            return this.buffer.slice(e ? 0 : 5, this.offset);\n        }\n        flush(e) {\n            var t = this.join(e);\n            return this.offset = 5, this.headerPosition = 0, this.buffer = y.allocUnsafe(this.size), t;\n        }\n    };\n    a(Jr, \"Writer\");\n    var Zr = Jr;\n    bt.Writer = Zr;\n});\nvar ws = I((xt)=>{\n    \"use strict\";\n    p();\n    Object.defineProperty(xt, \"__esModule\", {\n        value: !0\n    });\n    xt.serialize = void 0;\n    var Xr = ms(), M = new Xr.Writer, Du = a((r)=>{\n        M.addInt16(3).addInt16(0);\n        for (let n of Object.keys(r))M.addCString(n).addCString(r[n]);\n        M.addCString(\"client_encoding\").addCString(\"UTF8\");\n        var e = M.addCString(\"\").flush(), t = e.length + 4;\n        return new Xr.Writer().addInt32(t).add(e).flush();\n    }, \"startup\"), ku = a(()=>{\n        let r = y.allocUnsafe(8);\n        return r.writeInt32BE(8, 0), r.writeInt32BE(80877103, 4), r;\n    }, \"requestSsl\"), Uu = a((r)=>M.addCString(r).flush(112), \"password\"), Ou = a(function(r, e) {\n        return M.addCString(r).addInt32(y.byteLength(e)).addString(e), M.flush(112);\n    }, \"sendSASLInitialResponseMessage\"), Nu = a(function(r) {\n        return M.addString(r).flush(112);\n    }, \"sendSCRAMClientFinalMessage\"), qu = a((r)=>M.addCString(r).flush(81), \"query\"), gs = [], Qu = a((r)=>{\n        let e = r.name || \"\";\n        e.length > 63 && (console.error(\"Warning! Postgres only supports 63 characters for query names.\"), console.error(\"You supplied %s (%s)\", e, e.length), console.error(\"This can cause conflicts and silent errors executing queries\"));\n        let t = r.types || gs;\n        for(var n = t.length, i = M.addCString(e).addCString(r.text).addInt16(n), s = 0; s < n; s++)i.addInt32(t[s]);\n        return M.flush(80);\n    }, \"parse\"), Oe = new Xr.Writer, Wu = a(function(r, e) {\n        for(let t = 0; t < r.length; t++){\n            let n = e ? e(r[t], t) : r[t];\n            n == null ? (M.addInt16(0), Oe.addInt32(-1)) : n instanceof y ? (M.addInt16(1), Oe.addInt32(n.length), Oe.add(n)) : (M.addInt16(0), Oe.addInt32(y.byteLength(n)), Oe.addString(n));\n        }\n    }, \"writeValues\"), ju = a((r = {})=>{\n        let e = r.portal || \"\", t = r.statement || \"\", n = r.binary || !1, i = r.values || gs, s = i.length;\n        return M.addCString(e).addCString(t), M.addInt16(s), Wu(i, r.valueMapper), M.addInt16(s), M.add(Oe.flush()), M.addInt16(n ? 1 : 0), M.flush(66);\n    }, \"bind\"), Hu = y.from([\n        69,\n        0,\n        0,\n        0,\n        9,\n        0,\n        0,\n        0,\n        0,\n        0\n    ]), Gu = a((r)=>{\n        if (!r || !r.portal && !r.rows) return Hu;\n        let e = r.portal || \"\", t = r.rows || 0, n = y.byteLength(e), i = 4 + n + 1 + 4, s = y.allocUnsafe(1 + i);\n        return s[0] = 69, s.writeInt32BE(i, 1), s.write(e, 5, \"utf-8\"), s[n + 5] = 0, s.writeUInt32BE(t, s.length - 4), s;\n    }, \"execute\"), $u = a((r, e)=>{\n        let t = y.allocUnsafe(16);\n        return t.writeInt32BE(16, 0), t.writeInt16BE(1234, 4), t.writeInt16BE(5678, 6), t.writeInt32BE(r, 8), t.writeInt32BE(e, 12), t;\n    }, \"cancel\"), en = a((r, e)=>{\n        let n = 4 + y.byteLength(e) + 1, i = y.allocUnsafe(1 + n);\n        return i[0] = r, i.writeInt32BE(n, 1), i.write(e, 5, \"utf-8\"), i[n] = 0, i;\n    }, \"cstringMessage\"), Vu = M.addCString(\"P\").flush(68), Ku = M.addCString(\"S\").flush(68), zu = a((r)=>r.name ? en(68, `${r.type}${r.name || \"\"}`) : r.type === \"P\" ? Vu : Ku, \"describe\"), Yu = a((r)=>{\n        let e = `${r.type}${r.name || \"\"}`;\n        return en(67, e);\n    }, \"close\"), Zu = a((r)=>M.add(r).flush(100), \"copyData\"), Ju = a((r)=>en(102, r), \"copyFail\"), St = a((r)=>y.from([\n            r,\n            0,\n            0,\n            0,\n            4\n        ]), \"codeOnlyBuffer\"), Xu = St(72), ec = St(83), tc = St(88), rc = St(99), nc = {\n        startup: Du,\n        password: Uu,\n        requestSsl: ku,\n        sendSASLInitialResponseMessage: Ou,\n        sendSCRAMClientFinalMessage: Nu,\n        query: qu,\n        parse: Qu,\n        bind: ju,\n        execute: Gu,\n        describe: zu,\n        close: Yu,\n        flush: a(()=>Xu, \"flush\"),\n        sync: a(()=>ec, \"sync\"),\n        end: a(()=>tc, \"end\"),\n        copyData: Zu,\n        copyDone: a(()=>rc, \"copyDone\"),\n        copyFail: Ju,\n        cancel: $u\n    };\n    xt.serialize = nc;\n});\nvar bs = I((vt)=>{\n    \"use strict\";\n    p();\n    Object.defineProperty(vt, \"__esModule\", {\n        value: !0\n    });\n    vt.BufferReader = void 0;\n    var ic = y.allocUnsafe(0), rn = class rn {\n        constructor(e = 0){\n            this.offset = e, this.buffer = ic, this.encoding = \"utf-8\";\n        }\n        setBuffer(e, t) {\n            this.offset = e, this.buffer = t;\n        }\n        int16() {\n            let e = this.buffer.readInt16BE(this.offset);\n            return this.offset += 2, e;\n        }\n        byte() {\n            let e = this.buffer[this.offset];\n            return this.offset++, e;\n        }\n        int32() {\n            let e = this.buffer.readInt32BE(this.offset);\n            return this.offset += 4, e;\n        }\n        string(e) {\n            let t = this.buffer.toString(this.encoding, this.offset, this.offset + e);\n            return this.offset += e, t;\n        }\n        cstring() {\n            let e = this.offset, t = e;\n            for(; this.buffer[t++] !== 0;);\n            return this.offset = t, this.buffer.toString(this.encoding, e, t - 1);\n        }\n        bytes(e) {\n            let t = this.buffer.slice(this.offset, this.offset + e);\n            return this.offset += e, t;\n        }\n    };\n    a(rn, \"BufferReader\");\n    var tn = rn;\n    vt.BufferReader = tn;\n});\nvar vs = I((Et)=>{\n    \"use strict\";\n    p();\n    Object.defineProperty(Et, \"__esModule\", {\n        value: !0\n    });\n    Et.Parser = void 0;\n    var D = Yr(), sc = bs(), nn = 1, oc = 4, Ss = nn + oc, xs = y.allocUnsafe(0), on = class on {\n        constructor(e){\n            if (this.buffer = xs, this.bufferLength = 0, this.bufferOffset = 0, this.reader = new sc.BufferReader, e?.mode === \"binary\") throw new Error(\"Binary mode not supported yet\");\n            this.mode = e?.mode || \"text\";\n        }\n        parse(e, t) {\n            this.mergeBuffer(e);\n            let n = this.bufferOffset + this.bufferLength, i = this.bufferOffset;\n            for(; i + Ss <= n;){\n                let s = this.buffer[i], o = this.buffer.readUInt32BE(i + nn), u = nn + o;\n                if (u + i <= n) {\n                    let c = this.handlePacket(i + Ss, s, o, this.buffer);\n                    t(c), i += u;\n                } else break;\n            }\n            i === n ? (this.buffer = xs, this.bufferLength = 0, this.bufferOffset = 0) : (this.bufferLength = n - i, this.bufferOffset = i);\n        }\n        mergeBuffer(e) {\n            if (this.bufferLength > 0) {\n                let t = this.bufferLength + e.byteLength;\n                if (t + this.bufferOffset > this.buffer.byteLength) {\n                    let i;\n                    if (t <= this.buffer.byteLength && this.bufferOffset >= this.bufferLength) i = this.buffer;\n                    else {\n                        let s = this.buffer.byteLength * 2;\n                        for(; t >= s;)s *= 2;\n                        i = y.allocUnsafe(s);\n                    }\n                    this.buffer.copy(i, 0, this.bufferOffset, this.bufferOffset + this.bufferLength), this.buffer = i, this.bufferOffset = 0;\n                }\n                e.copy(this.buffer, this.bufferOffset + this.bufferLength), this.bufferLength = t;\n            } else this.buffer = e, this.bufferOffset = 0, this.bufferLength = e.byteLength;\n        }\n        handlePacket(e, t, n, i) {\n            switch(t){\n                case 50:\n                    return D.bindComplete;\n                case 49:\n                    return D.parseComplete;\n                case 51:\n                    return D.closeComplete;\n                case 110:\n                    return D.noData;\n                case 115:\n                    return D.portalSuspended;\n                case 99:\n                    return D.copyDone;\n                case 87:\n                    return D.replicationStart;\n                case 73:\n                    return D.emptyQuery;\n                case 68:\n                    return this.parseDataRowMessage(e, n, i);\n                case 67:\n                    return this.parseCommandCompleteMessage(e, n, i);\n                case 90:\n                    return this.parseReadyForQueryMessage(e, n, i);\n                case 65:\n                    return this.parseNotificationMessage(e, n, i);\n                case 82:\n                    return this.parseAuthenticationResponse(e, n, i);\n                case 83:\n                    return this.parseParameterStatusMessage(e, n, i);\n                case 75:\n                    return this.parseBackendKeyData(e, n, i);\n                case 69:\n                    return this.parseErrorMessage(e, n, i, \"error\");\n                case 78:\n                    return this.parseErrorMessage(e, n, i, \"notice\");\n                case 84:\n                    return this.parseRowDescriptionMessage(e, n, i);\n                case 116:\n                    return this.parseParameterDescriptionMessage(e, n, i);\n                case 71:\n                    return this.parseCopyInMessage(e, n, i);\n                case 72:\n                    return this.parseCopyOutMessage(e, n, i);\n                case 100:\n                    return this.parseCopyData(e, n, i);\n                default:\n                    return new D.DatabaseError(\"received invalid response: \" + t.toString(16), n, \"error\");\n            }\n        }\n        parseReadyForQueryMessage(e, t, n) {\n            this.reader.setBuffer(e, n);\n            let i = this.reader.string(1);\n            return new D.ReadyForQueryMessage(t, i);\n        }\n        parseCommandCompleteMessage(e, t, n) {\n            this.reader.setBuffer(e, n);\n            let i = this.reader.cstring();\n            return new D.CommandCompleteMessage(t, i);\n        }\n        parseCopyData(e, t, n) {\n            let i = n.slice(e, e + (t - 4));\n            return new D.CopyDataMessage(t, i);\n        }\n        parseCopyInMessage(e, t, n) {\n            return this.parseCopyMessage(e, t, n, \"copyInResponse\");\n        }\n        parseCopyOutMessage(e, t, n) {\n            return this.parseCopyMessage(e, t, n, \"copyOutResponse\");\n        }\n        parseCopyMessage(e, t, n, i) {\n            this.reader.setBuffer(e, n);\n            let s = this.reader.byte() !== 0, o = this.reader.int16(), u = new D.CopyResponse(t, i, s, o);\n            for(let c = 0; c < o; c++)u.columnTypes[c] = this.reader.int16();\n            return u;\n        }\n        parseNotificationMessage(e, t, n) {\n            this.reader.setBuffer(e, n);\n            let i = this.reader.int32(), s = this.reader.cstring(), o = this.reader.cstring();\n            return new D.NotificationResponseMessage(t, i, s, o);\n        }\n        parseRowDescriptionMessage(e, t, n) {\n            this.reader.setBuffer(e, n);\n            let i = this.reader.int16(), s = new D.RowDescriptionMessage(t, i);\n            for(let o = 0; o < i; o++)s.fields[o] = this.parseField();\n            return s;\n        }\n        parseField() {\n            let e = this.reader.cstring(), t = this.reader.int32(), n = this.reader.int16(), i = this.reader.int32(), s = this.reader.int16(), o = this.reader.int32(), u = this.reader.int16() === 0 ? \"text\" : \"binary\";\n            return new D.Field(e, t, n, i, s, o, u);\n        }\n        parseParameterDescriptionMessage(e, t, n) {\n            this.reader.setBuffer(e, n);\n            let i = this.reader.int16(), s = new D.ParameterDescriptionMessage(t, i);\n            for(let o = 0; o < i; o++)s.dataTypeIDs[o] = this.reader.int32();\n            return s;\n        }\n        parseDataRowMessage(e, t, n) {\n            this.reader.setBuffer(e, n);\n            let i = this.reader.int16(), s = new Array(i);\n            for(let o = 0; o < i; o++){\n                let u = this.reader.int32();\n                s[o] = u === -1 ? null : this.reader.string(u);\n            }\n            return new D.DataRowMessage(t, s);\n        }\n        parseParameterStatusMessage(e, t, n) {\n            this.reader.setBuffer(e, n);\n            let i = this.reader.cstring(), s = this.reader.cstring();\n            return new D.ParameterStatusMessage(t, i, s);\n        }\n        parseBackendKeyData(e, t, n) {\n            this.reader.setBuffer(e, n);\n            let i = this.reader.int32(), s = this.reader.int32();\n            return new D.BackendKeyDataMessage(t, i, s);\n        }\n        parseAuthenticationResponse(e, t, n) {\n            this.reader.setBuffer(e, n);\n            let i = this.reader.int32(), s = {\n                name: \"authenticationOk\",\n                length: t\n            };\n            switch(i){\n                case 0:\n                    break;\n                case 3:\n                    s.length === 8 && (s.name = \"authenticationCleartextPassword\");\n                    break;\n                case 5:\n                    if (s.length === 12) {\n                        s.name = \"authenticationMD5Password\";\n                        let u = this.reader.bytes(4);\n                        return new D.AuthenticationMD5Password(t, u);\n                    }\n                    break;\n                case 10:\n                    s.name = \"authenticationSASL\", s.mechanisms = [];\n                    let o;\n                    do o = this.reader.cstring(), o && s.mechanisms.push(o);\n                    while (o);\n                    break;\n                case 11:\n                    s.name = \"authenticationSASLContinue\", s.data = this.reader.string(t - 8);\n                    break;\n                case 12:\n                    s.name = \"authenticationSASLFinal\", s.data = this.reader.string(t - 8);\n                    break;\n                default:\n                    throw new Error(\"Unknown authenticationOk message type \" + i);\n            }\n            return s;\n        }\n        parseErrorMessage(e, t, n, i) {\n            this.reader.setBuffer(e, n);\n            let s = {}, o = this.reader.string(1);\n            for(; o !== \"\\x00\";)s[o] = this.reader.cstring(), o = this.reader.string(1);\n            let u = s.M, c = i === \"notice\" ? new D.NoticeMessage(t, u) : new D.DatabaseError(u, t, i);\n            return c.severity = s.S, c.code = s.C, c.detail = s.D, c.hint = s.H, c.position = s.P, c.internalPosition = s.p, c.internalQuery = s.q, c.where = s.W, c.schema = s.s, c.table = s.t, c.column = s.c, c.dataType = s.d, c.constraint = s.n, c.file = s.F, c.line = s.L, c.routine = s.R, c;\n        }\n    };\n    a(on, \"Parser\");\n    var sn = on;\n    Et.Parser = sn;\n});\nvar an = I((Se)=>{\n    \"use strict\";\n    p();\n    Object.defineProperty(Se, \"__esModule\", {\n        value: !0\n    });\n    Se.DatabaseError = Se.serialize = Se.parse = void 0;\n    var ac = Yr();\n    Object.defineProperty(Se, \"DatabaseError\", {\n        enumerable: !0,\n        get: a(function() {\n            return ac.DatabaseError;\n        }, \"get\")\n    });\n    var uc = ws();\n    Object.defineProperty(Se, \"serialize\", {\n        enumerable: !0,\n        get: a(function() {\n            return uc.serialize;\n        }, \"get\")\n    });\n    var cc = vs();\n    function hc(r, e) {\n        let t = new cc.Parser;\n        return r.on(\"data\", (n)=>t.parse(n, e)), new Promise((n)=>r.on(\"end\", ()=>n()));\n    }\n    a(hc, \"parse\");\n    Se.parse = hc;\n});\nvar Es = {};\nie(Es, {\n    connect: ()=>lc\n});\nfunction lc({ socket: r, servername: e }) {\n    return r.startTls(e), r;\n}\nvar _s = z(()=>{\n    \"use strict\";\n    p();\n    a(lc, \"connect\");\n});\nvar hn = I((tf, Ts)=>{\n    \"use strict\";\n    p();\n    var As = (wt(), N(ys)), fc = we().EventEmitter, { parse: pc, serialize: Q } = an(), Cs = Q.flush(), dc = Q.sync(), yc = Q.end(), cn = class cn extends fc {\n        constructor(e){\n            super(), e = e || {}, this.stream = e.stream || new As.Socket, this._keepAlive = e.keepAlive, this._keepAliveInitialDelayMillis = e.keepAliveInitialDelayMillis, this.lastBuffer = !1, this.parsedStatements = {}, this.ssl = e.ssl || !1, this._ending = !1, this._emitMessage = !1;\n            var t = this;\n            this.on(\"newListener\", function(n) {\n                n === \"message\" && (t._emitMessage = !0);\n            });\n        }\n        connect(e, t) {\n            var n = this;\n            this._connecting = !0, this.stream.setNoDelay(!0), this.stream.connect(e, t), this.stream.once(\"connect\", function() {\n                n._keepAlive && n.stream.setKeepAlive(!0, n._keepAliveInitialDelayMillis), n.emit(\"connect\");\n            });\n            let i = a(function(s) {\n                n._ending && (s.code === \"ECONNRESET\" || s.code === \"EPIPE\") || n.emit(\"error\", s);\n            }, \"reportStreamError\");\n            if (this.stream.on(\"error\", i), this.stream.on(\"close\", function() {\n                n.emit(\"end\");\n            }), !this.ssl) return this.attachListeners(this.stream);\n            this.stream.once(\"data\", function(s) {\n                var o = s.toString(\"utf8\");\n                switch(o){\n                    case \"S\":\n                        break;\n                    case \"N\":\n                        return n.stream.end(), n.emit(\"error\", new Error(\"The server does not support SSL connections\"));\n                    default:\n                        return n.stream.end(), n.emit(\"error\", new Error(\"There was an error establishing an SSL connection\"));\n                }\n                var u = (_s(), N(Es));\n                let c = {\n                    socket: n.stream\n                };\n                n.ssl !== !0 && (Object.assign(c, n.ssl), \"key\" in n.ssl && (c.key = n.ssl.key)), As.isIP(t) === 0 && (c.servername = t);\n                try {\n                    n.stream = u.connect(c);\n                } catch (h) {\n                    return n.emit(\"error\", h);\n                }\n                n.attachListeners(n.stream), n.stream.on(\"error\", i), n.emit(\"sslconnect\");\n            });\n        }\n        attachListeners(e) {\n            e.on(\"end\", ()=>{\n                this.emit(\"end\");\n            }), pc(e, (t)=>{\n                var n = t.name === \"error\" ? \"errorMessage\" : t.name;\n                this._emitMessage && this.emit(\"message\", t), this.emit(n, t);\n            });\n        }\n        requestSsl() {\n            this.stream.write(Q.requestSsl());\n        }\n        startup(e) {\n            this.stream.write(Q.startup(e));\n        }\n        cancel(e, t) {\n            this._send(Q.cancel(e, t));\n        }\n        password(e) {\n            this._send(Q.password(e));\n        }\n        sendSASLInitialResponseMessage(e, t) {\n            this._send(Q.sendSASLInitialResponseMessage(e, t));\n        }\n        sendSCRAMClientFinalMessage(e) {\n            this._send(Q.sendSCRAMClientFinalMessage(e));\n        }\n        _send(e) {\n            return this.stream.writable ? this.stream.write(e) : !1;\n        }\n        query(e) {\n            this._send(Q.query(e));\n        }\n        parse(e) {\n            this._send(Q.parse(e));\n        }\n        bind(e) {\n            this._send(Q.bind(e));\n        }\n        execute(e) {\n            this._send(Q.execute(e));\n        }\n        flush() {\n            this.stream.writable && this.stream.write(Cs);\n        }\n        sync() {\n            this._ending = !0, this._send(Cs), this._send(dc);\n        }\n        ref() {\n            this.stream.ref();\n        }\n        unref() {\n            this.stream.unref();\n        }\n        end() {\n            if (this._ending = !0, !this._connecting || !this.stream.writable) {\n                this.stream.end();\n                return;\n            }\n            return this.stream.write(yc, ()=>{\n                this.stream.end();\n            });\n        }\n        close(e) {\n            this._send(Q.close(e));\n        }\n        describe(e) {\n            this._send(Q.describe(e));\n        }\n        sendCopyFromChunk(e) {\n            this._send(Q.copyData(e));\n        }\n        endCopyFrom() {\n            this._send(Q.copyDone());\n        }\n        sendCopyFail(e) {\n            this._send(Q.copyFail(e));\n        }\n    };\n    a(cn, \"Connection\");\n    var un = cn;\n    Ts.exports = un;\n});\nvar Bs = I((of, Ps)=>{\n    \"use strict\";\n    p();\n    var mc = we().EventEmitter, sf = (He(), N(je)), gc = et(), ln = qi(), wc = Zi(), bc = mt(), Sc = gt(), Is = ps(), xc = Xe(), vc = hn(), fn = class fn extends mc {\n        constructor(e){\n            super(), this.connectionParameters = new Sc(e), this.user = this.connectionParameters.user, this.database = this.connectionParameters.database, this.port = this.connectionParameters.port, this.host = this.connectionParameters.host, Object.defineProperty(this, \"password\", {\n                configurable: !0,\n                enumerable: !1,\n                writable: !0,\n                value: this.connectionParameters.password\n            }), this.replication = this.connectionParameters.replication;\n            var t = e || {};\n            this._Promise = t.Promise || S.Promise, this._types = new bc(t.types), this._ending = !1, this._connecting = !1, this._connected = !1, this._connectionError = !1, this._queryable = !0, this.connection = t.connection || new vc({\n                stream: t.stream,\n                ssl: this.connectionParameters.ssl,\n                keepAlive: t.keepAlive || !1,\n                keepAliveInitialDelayMillis: t.keepAliveInitialDelayMillis || 0,\n                encoding: this.connectionParameters.client_encoding || \"utf8\"\n            }), this.queryQueue = [], this.binary = t.binary || xc.binary, this.processID = null, this.secretKey = null, this.ssl = this.connectionParameters.ssl || !1, this.ssl && this.ssl.key && Object.defineProperty(this.ssl, \"key\", {\n                enumerable: !1\n            }), this._connectionTimeoutMillis = t.connectionTimeoutMillis || 0;\n        }\n        _errorAllQueries(e) {\n            let t = a((n)=>{\n                m.nextTick(()=>{\n                    n.handleError(e, this.connection);\n                });\n            }, \"enqueueError\");\n            this.activeQuery && (t(this.activeQuery), this.activeQuery = null), this.queryQueue.forEach(t), this.queryQueue.length = 0;\n        }\n        _connect(e) {\n            var t = this, n = this.connection;\n            if (this._connectionCallback = e, this._connecting || this._connected) {\n                let i = new Error(\"Client has already been connected. You cannot reuse a client.\");\n                m.nextTick(()=>{\n                    e(i);\n                });\n                return;\n            }\n            this._connecting = !0, this.connectionTimeoutHandle, this._connectionTimeoutMillis > 0 && (this.connectionTimeoutHandle = setTimeout(()=>{\n                n._ending = !0, n.stream.destroy(new Error(\"timeout expired\"));\n            }, this._connectionTimeoutMillis)), this.host && this.host.indexOf(\"/\") === 0 ? n.connect(this.host + \"/.s.PGSQL.\" + this.port) : n.connect(this.port, this.host), n.on(\"connect\", function() {\n                t.ssl ? n.requestSsl() : n.startup(t.getStartupConf());\n            }), n.on(\"sslconnect\", function() {\n                n.startup(t.getStartupConf());\n            }), this._attachListeners(n), n.once(\"end\", ()=>{\n                let i = this._ending ? new Error(\"Connection terminated\") : new Error(\"Connection terminated unexpectedly\");\n                clearTimeout(this.connectionTimeoutHandle), this._errorAllQueries(i), this._ending || (this._connecting && !this._connectionError ? this._connectionCallback ? this._connectionCallback(i) : this._handleErrorEvent(i) : this._connectionError || this._handleErrorEvent(i)), m.nextTick(()=>{\n                    this.emit(\"end\");\n                });\n            });\n        }\n        connect(e) {\n            if (e) {\n                this._connect(e);\n                return;\n            }\n            return new this._Promise((t, n)=>{\n                this._connect((i)=>{\n                    i ? n(i) : t();\n                });\n            });\n        }\n        _attachListeners(e) {\n            e.on(\"authenticationCleartextPassword\", this._handleAuthCleartextPassword.bind(this)), e.on(\"authenticationMD5Password\", this._handleAuthMD5Password.bind(this)), e.on(\"authenticationSASL\", this._handleAuthSASL.bind(this)), e.on(\"authenticationSASLContinue\", this._handleAuthSASLContinue.bind(this)), e.on(\"authenticationSASLFinal\", this._handleAuthSASLFinal.bind(this)), e.on(\"backendKeyData\", this._handleBackendKeyData.bind(this)), e.on(\"error\", this._handleErrorEvent.bind(this)), e.on(\"errorMessage\", this._handleErrorMessage.bind(this)), e.on(\"readyForQuery\", this._handleReadyForQuery.bind(this)), e.on(\"notice\", this._handleNotice.bind(this)), e.on(\"rowDescription\", this._handleRowDescription.bind(this)), e.on(\"dataRow\", this._handleDataRow.bind(this)), e.on(\"portalSuspended\", this._handlePortalSuspended.bind(this)), e.on(\"emptyQuery\", this._handleEmptyQuery.bind(this)), e.on(\"commandComplete\", this._handleCommandComplete.bind(this)), e.on(\"parseComplete\", this._handleParseComplete.bind(this)), e.on(\"copyInResponse\", this._handleCopyInResponse.bind(this)), e.on(\"copyData\", this._handleCopyData.bind(this)), e.on(\"notification\", this._handleNotification.bind(this));\n        }\n        _checkPgPass(e) {\n            let t = this.connection;\n            typeof this.password == \"function\" ? this._Promise.resolve().then(()=>this.password()).then((n)=>{\n                if (n !== void 0) {\n                    if (typeof n != \"string\") {\n                        t.emit(\"error\", new TypeError(\"Password must be a string\"));\n                        return;\n                    }\n                    this.connectionParameters.password = this.password = n;\n                } else this.connectionParameters.password = this.password = null;\n                e();\n            }).catch((n)=>{\n                t.emit(\"error\", n);\n            }) : this.password !== null ? e() : wc(this.connectionParameters, (n)=>{\n                n !== void 0 && (this.connectionParameters.password = this.password = n), e();\n            });\n        }\n        _handleAuthCleartextPassword(e) {\n            this._checkPgPass(()=>{\n                this.connection.password(this.password);\n            });\n        }\n        _handleAuthMD5Password(e) {\n            this._checkPgPass(()=>{\n                let t = gc.postgresMd5PasswordHash(this.user, this.password, e.salt);\n                this.connection.password(t);\n            });\n        }\n        _handleAuthSASL(e) {\n            this._checkPgPass(()=>{\n                this.saslSession = ln.startSession(e.mechanisms), this.connection.sendSASLInitialResponseMessage(this.saslSession.mechanism, this.saslSession.response);\n            });\n        }\n        _handleAuthSASLContinue(e) {\n            ln.continueSession(this.saslSession, this.password, e.data), this.connection.sendSCRAMClientFinalMessage(this.saslSession.response);\n        }\n        _handleAuthSASLFinal(e) {\n            ln.finalizeSession(this.saslSession, e.data), this.saslSession = null;\n        }\n        _handleBackendKeyData(e) {\n            this.processID = e.processID, this.secretKey = e.secretKey;\n        }\n        _handleReadyForQuery(e) {\n            this._connecting && (this._connecting = !1, this._connected = !0, clearTimeout(this.connectionTimeoutHandle), this._connectionCallback && (this._connectionCallback(null, this), this._connectionCallback = null), this.emit(\"connect\"));\n            let { activeQuery: t } = this;\n            this.activeQuery = null, this.readyForQuery = !0, t && t.handleReadyForQuery(this.connection), this._pulseQueryQueue();\n        }\n        _handleErrorWhileConnecting(e) {\n            if (!this._connectionError) {\n                if (this._connectionError = !0, clearTimeout(this.connectionTimeoutHandle), this._connectionCallback) return this._connectionCallback(e);\n                this.emit(\"error\", e);\n            }\n        }\n        _handleErrorEvent(e) {\n            if (this._connecting) return this._handleErrorWhileConnecting(e);\n            this._queryable = !1, this._errorAllQueries(e), this.emit(\"error\", e);\n        }\n        _handleErrorMessage(e) {\n            if (this._connecting) return this._handleErrorWhileConnecting(e);\n            let t = this.activeQuery;\n            if (!t) {\n                this._handleErrorEvent(e);\n                return;\n            }\n            this.activeQuery = null, t.handleError(e, this.connection);\n        }\n        _handleRowDescription(e) {\n            this.activeQuery.handleRowDescription(e);\n        }\n        _handleDataRow(e) {\n            this.activeQuery.handleDataRow(e);\n        }\n        _handlePortalSuspended(e) {\n            this.activeQuery.handlePortalSuspended(this.connection);\n        }\n        _handleEmptyQuery(e) {\n            this.activeQuery.handleEmptyQuery(this.connection);\n        }\n        _handleCommandComplete(e) {\n            this.activeQuery.handleCommandComplete(e, this.connection);\n        }\n        _handleParseComplete(e) {\n            this.activeQuery.name && (this.connection.parsedStatements[this.activeQuery.name] = this.activeQuery.text);\n        }\n        _handleCopyInResponse(e) {\n            this.activeQuery.handleCopyInResponse(this.connection);\n        }\n        _handleCopyData(e) {\n            this.activeQuery.handleCopyData(e, this.connection);\n        }\n        _handleNotification(e) {\n            this.emit(\"notification\", e);\n        }\n        _handleNotice(e) {\n            this.emit(\"notice\", e);\n        }\n        getStartupConf() {\n            var e = this.connectionParameters, t = {\n                user: e.user,\n                database: e.database\n            }, n = e.application_name || e.fallback_application_name;\n            return n && (t.application_name = n), e.replication && (t.replication = \"\" + e.replication), e.statement_timeout && (t.statement_timeout = String(parseInt(e.statement_timeout, 10))), e.lock_timeout && (t.lock_timeout = String(parseInt(e.lock_timeout, 10))), e.idle_in_transaction_session_timeout && (t.idle_in_transaction_session_timeout = String(parseInt(e.idle_in_transaction_session_timeout, 10))), e.options && (t.options = e.options), t;\n        }\n        cancel(e, t) {\n            if (e.activeQuery === t) {\n                var n = this.connection;\n                this.host && this.host.indexOf(\"/\") === 0 ? n.connect(this.host + \"/.s.PGSQL.\" + this.port) : n.connect(this.port, this.host), n.on(\"connect\", function() {\n                    n.cancel(e.processID, e.secretKey);\n                });\n            } else e.queryQueue.indexOf(t) !== -1 && e.queryQueue.splice(e.queryQueue.indexOf(t), 1);\n        }\n        setTypeParser(e, t, n) {\n            return this._types.setTypeParser(e, t, n);\n        }\n        getTypeParser(e, t) {\n            return this._types.getTypeParser(e, t);\n        }\n        escapeIdentifier(e) {\n            return '\"' + e.replace(/\"/g, '\"\"') + '\"';\n        }\n        escapeLiteral(e) {\n            for(var t = !1, n = \"'\", i = 0; i < e.length; i++){\n                var s = e[i];\n                s === \"'\" ? n += s + s : s === \"\\\\\" ? (n += s + s, t = !0) : n += s;\n            }\n            return n += \"'\", t === !0 && (n = \" E\" + n), n;\n        }\n        _pulseQueryQueue() {\n            if (this.readyForQuery === !0) if (this.activeQuery = this.queryQueue.shift(), this.activeQuery) {\n                this.readyForQuery = !1, this.hasExecuted = !0;\n                let e = this.activeQuery.submit(this.connection);\n                e && m.nextTick(()=>{\n                    this.activeQuery.handleError(e, this.connection), this.readyForQuery = !0, this._pulseQueryQueue();\n                });\n            } else this.hasExecuted && (this.activeQuery = null, this.emit(\"drain\"));\n        }\n        query(e, t, n) {\n            var i, s, o, u, c;\n            if (e == null) throw new TypeError(\"Client was passed a null or undefined query\");\n            return typeof e.submit == \"function\" ? (o = e.query_timeout || this.connectionParameters.query_timeout, s = i = e, typeof t == \"function\" && (i.callback = i.callback || t)) : (o = this.connectionParameters.query_timeout, i = new Is(e, t, n), i.callback || (s = new this._Promise((h, l)=>{\n                i.callback = (d, b)=>d ? l(d) : h(b);\n            }))), o && (c = i.callback, u = setTimeout(()=>{\n                var h = new Error(\"Query read timeout\");\n                m.nextTick(()=>{\n                    i.handleError(h, this.connection);\n                }), c(h), i.callback = ()=>{};\n                var l = this.queryQueue.indexOf(i);\n                l > -1 && this.queryQueue.splice(l, 1), this._pulseQueryQueue();\n            }, o), i.callback = (h, l)=>{\n                clearTimeout(u), c(h, l);\n            }), this.binary && !i.binary && (i.binary = !0), i._result && !i._result._types && (i._result._types = this._types), this._queryable ? this._ending ? (m.nextTick(()=>{\n                i.handleError(new Error(\"Client was closed and is not queryable\"), this.connection);\n            }), s) : (this.queryQueue.push(i), this._pulseQueryQueue(), s) : (m.nextTick(()=>{\n                i.handleError(new Error(\"Client has encountered a connection error and is not queryable\"), this.connection);\n            }), s);\n        }\n        ref() {\n            this.connection.ref();\n        }\n        unref() {\n            this.connection.unref();\n        }\n        end(e) {\n            if (this._ending = !0, !this.connection._connecting) if (e) e();\n            else return this._Promise.resolve();\n            if (this.activeQuery || !this._queryable ? this.connection.stream.destroy() : this.connection.end(), e) this.connection.once(\"end\", e);\n            else return new this._Promise((t)=>{\n                this.connection.once(\"end\", t);\n            });\n        }\n    };\n    a(fn, \"Client\");\n    var _t = fn;\n    _t.Query = Is;\n    Ps.exports = _t;\n});\nvar Ms = I((cf, Fs)=>{\n    \"use strict\";\n    p();\n    var Ec = we().EventEmitter, Ls = a(function() {}, \"NOOP\"), Rs = a((r, e)=>{\n        let t = r.findIndex(e);\n        return t === -1 ? void 0 : r.splice(t, 1)[0];\n    }, \"removeWhere\"), yn = class yn {\n        constructor(e, t, n){\n            this.client = e, this.idleListener = t, this.timeoutId = n;\n        }\n    };\n    a(yn, \"IdleItem\");\n    var pn = yn, mn = class mn {\n        constructor(e){\n            this.callback = e;\n        }\n    };\n    a(mn, \"PendingItem\");\n    var Ne = mn;\n    function _c() {\n        throw new Error(\"Release called on client which has already been released to the pool.\");\n    }\n    a(_c, \"throwOnDoubleRelease\");\n    function At(r, e) {\n        if (e) return {\n            callback: e,\n            result: void 0\n        };\n        let t, n, i = a(function(o, u) {\n            o ? t(o) : n(u);\n        }, \"cb\"), s = new r(function(o, u) {\n            n = o, t = u;\n        }).catch((o)=>{\n            throw Error.captureStackTrace(o), o;\n        });\n        return {\n            callback: i,\n            result: s\n        };\n    }\n    a(At, \"promisify\");\n    function Ac(r, e) {\n        return a(function t(n) {\n            n.client = e, e.removeListener(\"error\", t), e.on(\"error\", ()=>{\n                r.log(\"additional client error after disconnection due to error\", n);\n            }), r._remove(e), r.emit(\"error\", n, e);\n        }, \"idleListener\");\n    }\n    a(Ac, \"makeIdleListener\");\n    var gn = class gn extends Ec {\n        constructor(e, t){\n            super(), this.options = Object.assign({}, e), e != null && \"password\" in e && Object.defineProperty(this.options, \"password\", {\n                configurable: !0,\n                enumerable: !1,\n                writable: !0,\n                value: e.password\n            }), e != null && e.ssl && e.ssl.key && Object.defineProperty(this.options.ssl, \"key\", {\n                enumerable: !1\n            }), this.options.max = this.options.max || this.options.poolSize || 10, this.options.maxUses = this.options.maxUses || 1 / 0, this.options.allowExitOnIdle = this.options.allowExitOnIdle || !1, this.options.maxLifetimeSeconds = this.options.maxLifetimeSeconds || 0, this.log = this.options.log || function() {}, this.Client = this.options.Client || t || Ct().Client, this.Promise = this.options.Promise || S.Promise, typeof this.options.idleTimeoutMillis > \"u\" && (this.options.idleTimeoutMillis = 1e4), this._clients = [], this._idle = [], this._expired = new WeakSet, this._pendingQueue = [], this._endCallback = void 0, this.ending = !1, this.ended = !1;\n        }\n        _isFull() {\n            return this._clients.length >= this.options.max;\n        }\n        _pulseQueue() {\n            if (this.log(\"pulse queue\"), this.ended) {\n                this.log(\"pulse queue ended\");\n                return;\n            }\n            if (this.ending) {\n                this.log(\"pulse queue on ending\"), this._idle.length && this._idle.slice().map((t)=>{\n                    this._remove(t.client);\n                }), this._clients.length || (this.ended = !0, this._endCallback());\n                return;\n            }\n            if (!this._pendingQueue.length) {\n                this.log(\"no queued requests\");\n                return;\n            }\n            if (!this._idle.length && this._isFull()) return;\n            let e = this._pendingQueue.shift();\n            if (this._idle.length) {\n                let t = this._idle.pop();\n                clearTimeout(t.timeoutId);\n                let n = t.client;\n                n.ref && n.ref();\n                let i = t.idleListener;\n                return this._acquireClient(n, e, i, !1);\n            }\n            if (!this._isFull()) return this.newClient(e);\n            throw new Error(\"unexpected condition\");\n        }\n        _remove(e) {\n            let t = Rs(this._idle, (n)=>n.client === e);\n            t !== void 0 && clearTimeout(t.timeoutId), this._clients = this._clients.filter((n)=>n !== e), e.end(), this.emit(\"remove\", e);\n        }\n        connect(e) {\n            if (this.ending) {\n                let i = new Error(\"Cannot use a pool after calling end on the pool\");\n                return e ? e(i) : this.Promise.reject(i);\n            }\n            let t = At(this.Promise, e), n = t.result;\n            if (this._isFull() || this._idle.length) {\n                if (this._idle.length && m.nextTick(()=>this._pulseQueue()), !this.options.connectionTimeoutMillis) return this._pendingQueue.push(new Ne(t.callback)), n;\n                let i = a((u, c, h)=>{\n                    clearTimeout(o), t.callback(u, c, h);\n                }, \"queueCallback\"), s = new Ne(i), o = setTimeout(()=>{\n                    Rs(this._pendingQueue, (u)=>u.callback === i), s.timedOut = !0, t.callback(new Error(\"timeout exceeded when trying to connect\"));\n                }, this.options.connectionTimeoutMillis);\n                return this._pendingQueue.push(s), n;\n            }\n            return this.newClient(new Ne(t.callback)), n;\n        }\n        newClient(e) {\n            let t = new this.Client(this.options);\n            this._clients.push(t);\n            let n = Ac(this, t);\n            this.log(\"checking client timeout\");\n            let i, s = !1;\n            this.options.connectionTimeoutMillis && (i = setTimeout(()=>{\n                this.log(\"ending client due to timeout\"), s = !0, t.connection ? t.connection.stream.destroy() : t.end();\n            }, this.options.connectionTimeoutMillis)), this.log(\"connecting new client\"), t.connect((o)=>{\n                if (i && clearTimeout(i), t.on(\"error\", n), o) this.log(\"client failed to connect\", o), this._clients = this._clients.filter((u)=>u !== t), s && (o.message = \"Connection terminated due to connection timeout\"), this._pulseQueue(), e.timedOut || e.callback(o, void 0, Ls);\n                else {\n                    if (this.log(\"new client connected\"), this.options.maxLifetimeSeconds !== 0) {\n                        let u = setTimeout(()=>{\n                            this.log(\"ending client due to expired lifetime\"), this._expired.add(t), this._idle.findIndex((h)=>h.client === t) !== -1 && this._acquireClient(t, new Ne((h, l, d)=>d()), n, !1);\n                        }, this.options.maxLifetimeSeconds * 1e3);\n                        u.unref(), t.once(\"end\", ()=>clearTimeout(u));\n                    }\n                    return this._acquireClient(t, e, n, !0);\n                }\n            });\n        }\n        _acquireClient(e, t, n, i) {\n            i && this.emit(\"connect\", e), this.emit(\"acquire\", e), e.release = this._releaseOnce(e, n), e.removeListener(\"error\", n), t.timedOut ? i && this.options.verify ? this.options.verify(e, e.release) : e.release() : i && this.options.verify ? this.options.verify(e, (s)=>{\n                if (s) return e.release(s), t.callback(s, void 0, Ls);\n                t.callback(void 0, e, e.release);\n            }) : t.callback(void 0, e, e.release);\n        }\n        _releaseOnce(e, t) {\n            let n = !1;\n            return (i)=>{\n                n && _c(), n = !0, this._release(e, t, i);\n            };\n        }\n        _release(e, t, n) {\n            if (e.on(\"error\", t), e._poolUseCount = (e._poolUseCount || 0) + 1, this.emit(\"release\", n, e), n || this.ending || !e._queryable || e._ending || e._poolUseCount >= this.options.maxUses) {\n                e._poolUseCount >= this.options.maxUses && this.log(\"remove expended client\"), this._remove(e), this._pulseQueue();\n                return;\n            }\n            if (this._expired.has(e)) {\n                this.log(\"remove expired client\"), this._expired.delete(e), this._remove(e), this._pulseQueue();\n                return;\n            }\n            let s;\n            this.options.idleTimeoutMillis && (s = setTimeout(()=>{\n                this.log(\"remove idle client\"), this._remove(e);\n            }, this.options.idleTimeoutMillis), this.options.allowExitOnIdle && s.unref()), this.options.allowExitOnIdle && e.unref(), this._idle.push(new pn(e, t, s)), this._pulseQueue();\n        }\n        query(e, t, n) {\n            if (typeof e == \"function\") {\n                let s = At(this.Promise, e);\n                return x(function() {\n                    return s.callback(new Error(\"Passing a function as the first parameter to pool.query is not supported\"));\n                }), s.result;\n            }\n            typeof t == \"function\" && (n = t, t = void 0);\n            let i = At(this.Promise, n);\n            return n = i.callback, this.connect((s, o)=>{\n                if (s) return n(s);\n                let u = !1, c = a((h)=>{\n                    u || (u = !0, o.release(h), n(h));\n                }, \"onError\");\n                o.once(\"error\", c), this.log(\"dispatching query\");\n                try {\n                    o.query(e, t, (h, l)=>{\n                        if (this.log(\"query dispatched\"), o.removeListener(\"error\", c), !u) return u = !0, o.release(h), h ? n(h) : n(void 0, l);\n                    });\n                } catch (h) {\n                    return o.release(h), n(h);\n                }\n            }), i.result;\n        }\n        end(e) {\n            if (this.log(\"ending\"), this.ending) {\n                let n = new Error(\"Called end on pool more than once\");\n                return e ? e(n) : this.Promise.reject(n);\n            }\n            this.ending = !0;\n            let t = At(this.Promise, e);\n            return this._endCallback = t.callback, this._pulseQueue(), t.result;\n        }\n        get waitingCount() {\n            return this._pendingQueue.length;\n        }\n        get idleCount() {\n            return this._idle.length;\n        }\n        get expiredCount() {\n            return this._clients.reduce((e, t)=>e + (this._expired.has(t) ? 1 : 0), 0);\n        }\n        get totalCount() {\n            return this._clients.length;\n        }\n    };\n    a(gn, \"Pool\");\n    var dn = gn;\n    Fs.exports = dn;\n});\nvar Ds = {};\nie(Ds, {\n    default: ()=>Cc\n});\nvar Cc, ks = z(()=>{\n    \"use strict\";\n    p();\n    Cc = {};\n});\nvar Us = I((pf, Tc)=>{\n    Tc.exports = {\n        name: \"pg\",\n        version: \"8.8.0\",\n        description: \"PostgreSQL client - pure javascript & libpq with the same API\",\n        keywords: [\n            \"database\",\n            \"libpq\",\n            \"pg\",\n            \"postgre\",\n            \"postgres\",\n            \"postgresql\",\n            \"rdbms\"\n        ],\n        homepage: \"https://github.com/brianc/node-postgres\",\n        repository: {\n            type: \"git\",\n            url: \"git://github.com/brianc/node-postgres.git\",\n            directory: \"packages/pg\"\n        },\n        author: \"Brian Carlson <brian.m.carlson@gmail.com>\",\n        main: \"./lib\",\n        dependencies: {\n            \"buffer-writer\": \"2.0.0\",\n            \"packet-reader\": \"1.0.0\",\n            \"pg-connection-string\": \"^2.5.0\",\n            \"pg-pool\": \"^3.5.2\",\n            \"pg-protocol\": \"^1.5.0\",\n            \"pg-types\": \"^2.1.0\",\n            pgpass: \"1.x\"\n        },\n        devDependencies: {\n            async: \"2.6.4\",\n            bluebird: \"3.5.2\",\n            co: \"4.6.0\",\n            \"pg-copy-streams\": \"0.3.0\"\n        },\n        peerDependencies: {\n            \"pg-native\": \">=3.0.1\"\n        },\n        peerDependenciesMeta: {\n            \"pg-native\": {\n                optional: !0\n            }\n        },\n        scripts: {\n            test: \"make test-all\"\n        },\n        files: [\n            \"lib\",\n            \"SPONSORS.md\"\n        ],\n        license: \"MIT\",\n        engines: {\n            node: \">= 8.0.0\"\n        },\n        gitHead: \"c99fb2c127ddf8d712500db2c7b9a5491a178655\"\n    };\n});\nvar qs = I((df, Ns)=>{\n    \"use strict\";\n    p();\n    var Os = we().EventEmitter, Ic = (He(), N(je)), wn = et(), qe = Ns.exports = function(r, e, t) {\n        Os.call(this), r = wn.normalizeQueryConfig(r, e, t), this.text = r.text, this.values = r.values, this.name = r.name, this.callback = r.callback, this.state = \"new\", this._arrayMode = r.rowMode === \"array\", this._emitRowEvents = !1, this.on(\"newListener\", (function(n) {\n            n === \"row\" && (this._emitRowEvents = !0);\n        }).bind(this));\n    };\n    Ic.inherits(qe, Os);\n    var Pc = {\n        sqlState: \"code\",\n        statementPosition: \"position\",\n        messagePrimary: \"message\",\n        context: \"where\",\n        schemaName: \"schema\",\n        tableName: \"table\",\n        columnName: \"column\",\n        dataTypeName: \"dataType\",\n        constraintName: \"constraint\",\n        sourceFile: \"file\",\n        sourceLine: \"line\",\n        sourceFunction: \"routine\"\n    };\n    qe.prototype.handleError = function(r) {\n        var e = this.native.pq.resultErrorFields();\n        if (e) for(var t in e){\n            var n = Pc[t] || t;\n            r[n] = e[t];\n        }\n        this.callback ? this.callback(r) : this.emit(\"error\", r), this.state = \"error\";\n    };\n    qe.prototype.then = function(r, e) {\n        return this._getPromise().then(r, e);\n    };\n    qe.prototype.catch = function(r) {\n        return this._getPromise().catch(r);\n    };\n    qe.prototype._getPromise = function() {\n        return this._promise ? this._promise : (this._promise = new Promise((function(r, e) {\n            this._once(\"end\", r), this._once(\"error\", e);\n        }).bind(this)), this._promise);\n    };\n    qe.prototype.submit = function(r) {\n        this.state = \"running\";\n        var e = this;\n        this.native = r.native, r.native.arrayMode = this._arrayMode;\n        var t = a(function(s, o, u) {\n            if (r.native.arrayMode = !1, x(function() {\n                e.emit(\"_done\");\n            }), s) return e.handleError(s);\n            e._emitRowEvents && (u.length > 1 ? o.forEach((c, h)=>{\n                c.forEach((l)=>{\n                    e.emit(\"row\", l, u[h]);\n                });\n            }) : o.forEach(function(c) {\n                e.emit(\"row\", c, u);\n            })), e.state = \"end\", e.emit(\"end\", u), e.callback && e.callback(null, u);\n        }, \"after\");\n        if (m.domain && (t = m.domain.bind(t)), this.name) {\n            this.name.length > 63 && (console.error(\"Warning! Postgres only supports 63 characters for query names.\"), console.error(\"You supplied %s (%s)\", this.name, this.name.length), console.error(\"This can cause conflicts and silent errors executing queries\"));\n            var n = (this.values || []).map(wn.prepareValue);\n            if (r.namedQueries[this.name]) {\n                if (this.text && r.namedQueries[this.name] !== this.text) {\n                    let s = new Error(`Pre\\\npared statements must be unique - '${this.name}' was used for a different statem\\\nent`);\n                    return t(s);\n                }\n                return r.native.execute(this.name, n, t);\n            }\n            return r.native.prepare(this.name, this.text, n.length, function(s) {\n                return s ? t(s) : (r.namedQueries[e.name] = e.text, e.native.execute(e.name, n, t));\n            });\n        } else if (this.values) {\n            if (!Array.isArray(this.values)) {\n                let s = new Error(\"Query values must be an array\");\n                return t(s);\n            }\n            var i = this.values.map(wn.prepareValue);\n            r.native.query(this.text, i, t);\n        } else r.native.query(this.text, t);\n    };\n});\nvar Hs = I((wf, js)=>{\n    \"use strict\";\n    p();\n    var Bc = (ks(), N(Ds)), Lc = mt(), gf = Us(), Qs = we().EventEmitter, Rc = (He(), N(je)), Fc = gt(), Ws = qs(), J = js.exports = function(r) {\n        Qs.call(this), r = r || {}, this._Promise = r.Promise || S.Promise, this._types = new Lc(r.types), this.native = new Bc({\n            types: this._types\n        }), this._queryQueue = [], this._ending = !1, this._connecting = !1, this._connected = !1, this._queryable = !0;\n        var e = this.connectionParameters = new Fc(r);\n        this.user = e.user, Object.defineProperty(this, \"password\", {\n            configurable: !0,\n            enumerable: !1,\n            writable: !0,\n            value: e.password\n        }), this.database = e.database, this.host = e.host, this.port = e.port, this.namedQueries = {};\n    };\n    J.Query = Ws;\n    Rc.inherits(J, Qs);\n    J.prototype._errorAllQueries = function(r) {\n        let e = a((t)=>{\n            m.nextTick(()=>{\n                t.native = this.native, t.handleError(r);\n            });\n        }, \"enqueueError\");\n        this._hasActiveQuery() && (e(this._activeQuery), this._activeQuery = null), this._queryQueue.forEach(e), this._queryQueue.length = 0;\n    };\n    J.prototype._connect = function(r) {\n        var e = this;\n        if (this._connecting) {\n            m.nextTick(()=>r(new Error(\"Client has already been connected. You cannot reuse a client.\")));\n            return;\n        }\n        this._connecting = !0, this.connectionParameters.getLibpqConnectionString(function(t, n) {\n            if (t) return r(t);\n            e.native.connect(n, function(i) {\n                if (i) return e.native.end(), r(i);\n                e._connected = !0, e.native.on(\"error\", function(s) {\n                    e._queryable = !1, e._errorAllQueries(s), e.emit(\"error\", s);\n                }), e.native.on(\"notification\", function(s) {\n                    e.emit(\"notification\", {\n                        channel: s.relname,\n                        payload: s.extra\n                    });\n                }), e.emit(\"connect\"), e._pulseQueryQueue(!0), r();\n            });\n        });\n    };\n    J.prototype.connect = function(r) {\n        if (r) {\n            this._connect(r);\n            return;\n        }\n        return new this._Promise((e, t)=>{\n            this._connect((n)=>{\n                n ? t(n) : e();\n            });\n        });\n    };\n    J.prototype.query = function(r, e, t) {\n        var n, i, s, o, u;\n        if (r == null) throw new TypeError(\"Client was passed a null or undefined query\");\n        if (typeof r.submit == \"function\") s = r.query_timeout || this.connectionParameters.query_timeout, i = n = r, typeof e == \"function\" && (r.callback = e);\n        else if (s = this.connectionParameters.query_timeout, n = new Ws(r, e, t), !n.callback) {\n            let c, h;\n            i = new this._Promise((l, d)=>{\n                c = l, h = d;\n            }), n.callback = (l, d)=>l ? h(l) : c(d);\n        }\n        return s && (u = n.callback, o = setTimeout(()=>{\n            var c = new Error(\"Query read timeout\");\n            m.nextTick(()=>{\n                n.handleError(c, this.connection);\n            }), u(c), n.callback = ()=>{};\n            var h = this._queryQueue.indexOf(n);\n            h > -1 && this._queryQueue.splice(h, 1), this._pulseQueryQueue();\n        }, s), n.callback = (c, h)=>{\n            clearTimeout(o), u(c, h);\n        }), this._queryable ? this._ending ? (n.native = this.native, m.nextTick(()=>{\n            n.handleError(new Error(\"Client was closed and is not queryable\"));\n        }), i) : (this._queryQueue.push(n), this._pulseQueryQueue(), i) : (n.native = this.native, m.nextTick(()=>{\n            n.handleError(new Error(\"Client has encountered a connection error and is not queryable\"));\n        }), i);\n    };\n    J.prototype.end = function(r) {\n        var e = this;\n        this._ending = !0, this._connected || this.once(\"connect\", this.end.bind(this, r));\n        var t;\n        return r || (t = new this._Promise(function(n, i) {\n            r = a((s)=>s ? i(s) : n(), \"cb\");\n        })), this.native.end(function() {\n            e._errorAllQueries(new Error(\"Connection terminated\")), m.nextTick(()=>{\n                e.emit(\"end\"), r && r();\n            });\n        }), t;\n    };\n    J.prototype._hasActiveQuery = function() {\n        return this._activeQuery && this._activeQuery.state !== \"error\" && this._activeQuery.state !== \"end\";\n    };\n    J.prototype._pulseQueryQueue = function(r) {\n        if (this._connected && !this._hasActiveQuery()) {\n            var e = this._queryQueue.shift();\n            if (!e) {\n                r || this.emit(\"drain\");\n                return;\n            }\n            this._activeQuery = e, e.submit(this);\n            var t = this;\n            e.once(\"_done\", function() {\n                t._pulseQueryQueue();\n            });\n        }\n    };\n    J.prototype.cancel = function(r) {\n        this._activeQuery === r ? this.native.cancel(function() {}) : this._queryQueue.indexOf(r) !== -1 && this._queryQueue.splice(this._queryQueue.indexOf(r), 1);\n    };\n    J.prototype.ref = function() {};\n    J.prototype.unref = function() {};\n    J.prototype.setTypeParser = function(r, e, t) {\n        return this._types.setTypeParser(r, e, t);\n    };\n    J.prototype.getTypeParser = function(r, e) {\n        return this._types.getTypeParser(r, e);\n    };\n});\nvar bn = I((xf, Gs)=>{\n    \"use strict\";\n    p();\n    Gs.exports = Hs();\n});\nvar Ct = I((Ef, rt)=>{\n    \"use strict\";\n    p();\n    var Mc = Bs(), Dc = Xe(), kc = hn(), Uc = Ms(), { DatabaseError: Oc } = an(), Nc = a((r)=>{\n        var e;\n        return e = class extends Uc {\n            constructor(n){\n                super(n, r);\n            }\n        }, a(e, \"BoundPool\"), e;\n    }, \"poolFactory\"), Sn = a(function(r) {\n        this.defaults = Dc, this.Client = r, this.Query = this.Client.Query, this.Pool = Nc(this.Client), this._pools = [], this.Connection = kc, this.types = Je(), this.DatabaseError = Oc;\n    }, \"PG\");\n    typeof m.env.NODE_PG_FORCE_NATIVE < \"u\" ? rt.exports = new Sn(bn()) : (rt.exports = new Sn(Mc), Object.defineProperty(rt.exports, \"native\", {\n        configurable: !0,\n        enumerable: !1,\n        get () {\n            var r = null;\n            try {\n                r = new Sn(bn());\n            } catch (e) {\n                if (e.code !== \"MODULE_NOT_FOUND\") throw e;\n            }\n            return Object.defineProperty(rt.exports, \"native\", {\n                value: r\n            }), r;\n        }\n    }));\n});\np();\nvar Tt = Te(Ct());\nwt();\np();\npr();\nwt();\nvar Ks = Te(et()), zs = Te(mt());\nvar xn = class xn extends Error {\n    constructor(){\n        super(...arguments);\n        _(this, \"name\", \"NeonDbError\");\n        _(this, \"severity\");\n        _(this, \"code\");\n        _(this, \"detail\");\n        _(this, \"hint\");\n        _(this, \"position\");\n        _(this, \"internalPosition\");\n        _(this, \"internalQuery\");\n        _(this, \"where\");\n        _(this, \"schema\");\n        _(this, \"table\");\n        _(this, \"column\");\n        _(this, \"dataType\");\n        _(this, \"constraint\");\n        _(this, \"file\");\n        _(this, \"line\");\n        _(this, \"routine\");\n        _(this, \"sourceError\");\n    }\n};\na(xn, \"NeonDbError\");\nvar Ae = xn, $s = \"transaction() expects an array of queries, or a function returning an array of queries\", qc = [\n    \"severity\",\n    \"code\",\n    \"detail\",\n    \"hint\",\n    \"position\",\n    \"internalPosition\",\n    \"internalQuery\",\n    \"where\",\n    \"schema\",\n    \"table\",\n    \"column\",\n    \"dataType\",\n    \"constraint\",\n    \"file\",\n    \"line\",\n    \"routine\"\n];\nfunction Ys(r, { arrayMode: e, fullResults: t, fetchOptions: n, isolationLevel: i, readOnly: s, deferrable: o, queryCallback: u, resultCallback: c } = {}) {\n    if (!r) throw new Error(\"No database connection string was provided to `neon()`. Perhaps an environment variable has not been set?\");\n    let h;\n    try {\n        h = fr(r);\n    } catch  {\n        throw new Error(\"Database connection string provided to `neon()` is not a valid URL. Connection string: \" + String(r));\n    }\n    let { protocol: l, username: d, password: b, hostname: C, port: B, pathname: W } = h;\n    if (l !== \"postgres:\" && l !== \"postgresql:\" || !d || !b || !C || !W) throw new Error(\"Database connection string format for `neon()` should be: postgresql://user:password@host.tld/dbname?option=value\");\n    function X(A, ...w) {\n        let P, V;\n        if (typeof A == \"string\") P = A, V = w[1], w = w[0] ?? [];\n        else {\n            P = \"\";\n            for(let j = 0; j < A.length; j++)P += A[j], j < w.length && (P += \"$\" + (j + 1));\n        }\n        w = w.map((j)=>(0, Ks.prepareValue)(j));\n        let k = {\n            query: P,\n            params: w\n        };\n        return u && u(k), Qc(de, k, V);\n    }\n    a(X, \"resolve\"), X.transaction = async (A, w)=>{\n        if (typeof A == \"function\" && (A = A(X)), !Array.isArray(A)) throw new Error($s);\n        A.forEach((k)=>{\n            if (k[Symbol.toStringTag] !== \"NeonQueryPromise\") throw new Error($s);\n        });\n        let P = A.map((k)=>k.parameterizedQuery), V = A.map((k)=>k.opts ?? {});\n        return de(P, V, w);\n    };\n    async function de(A, w, P) {\n        let { fetchEndpoint: V, fetchFunction: k } = _e, j = typeof V == \"function\" ? V(C, B) : V, ce = Array.isArray(A) ? {\n            queries: A\n        } : A, ee = n ?? {}, R = e ?? !1, G = t ?? !1, he = i, ye = s, xe = o;\n        P !== void 0 && (P.fetchOptions !== void 0 && (ee = {\n            ...ee,\n            ...P.fetchOptions\n        }), P.arrayMode !== void 0 && (R = P.arrayMode), P.fullResults !== void 0 && (G = P.fullResults), P.isolationLevel !== void 0 && (he = P.isolationLevel), P.readOnly !== void 0 && (ye = P.readOnly), P.deferrable !== void 0 && (xe = P.deferrable)), w !== void 0 && !Array.isArray(w) && w.fetchOptions !== void 0 && (ee = {\n            ...ee,\n            ...w.fetchOptions\n        });\n        let me = {\n            \"Neon-Connection-String\": r,\n            \"Neon-Raw-Text-Output\": \"true\",\n            \"Neon-Array-Mode\": \"true\"\n        };\n        Array.isArray(A) && (he !== void 0 && (me[\"Neon-Batch-Isolation-Level\"] = he), ye !== void 0 && (me[\"Neon-Batch-Read-Only\"] = String(ye)), xe !== void 0 && (me[\"Neon-Batch-Deferrable\"] = String(xe)));\n        let se;\n        try {\n            se = await (k ?? fetch)(j, {\n                method: \"POST\",\n                body: JSON.stringify(ce),\n                headers: me,\n                ...ee\n            });\n        } catch (oe) {\n            let U = new Ae(`Error connecting to database: ${oe.message}`);\n            throw U.sourceError = oe, U;\n        }\n        if (se.ok) {\n            let oe = await se.json();\n            if (Array.isArray(A)) {\n                let U = oe.results;\n                if (!Array.isArray(U)) throw new Ae(\"Neon internal error: unexpected result format\");\n                return U.map((K, le)=>{\n                    let It = w[le] ?? {}, Xs = It.arrayMode ?? R, eo = It.fullResults ?? G;\n                    return Vs(K, {\n                        arrayMode: Xs,\n                        fullResults: eo,\n                        parameterizedQuery: A[le],\n                        resultCallback: c,\n                        types: It.types\n                    });\n                });\n            } else {\n                let U = w ?? {}, K = U.arrayMode ?? R, le = U.fullResults ?? G;\n                return Vs(oe, {\n                    arrayMode: K,\n                    fullResults: le,\n                    parameterizedQuery: A,\n                    resultCallback: c,\n                    types: U.types\n                });\n            }\n        } else {\n            let { status: oe } = se;\n            if (oe === 400) {\n                let U = await se.json(), K = new Ae(U.message);\n                for (let le of qc)K[le] = U[le] ?? void 0;\n                throw K;\n            } else {\n                let U = await se.text();\n                throw new Ae(`Server erro\\\nr (HTTP status ${oe}): ${U}`);\n            }\n        }\n    }\n    return a(de, \"execute\"), X;\n}\na(Ys, \"neon\");\nfunction Qc(r, e, t) {\n    return {\n        [Symbol.toStringTag]: \"NeonQueryPromise\",\n        parameterizedQuery: e,\n        opts: t,\n        then: a((n, i)=>r(e, t).then(n, i), \"then\"),\n        catch: a((n)=>r(e, t).catch(n), \"catch\"),\n        finally: a((n)=>r(e, t).finally(n), \"finally\")\n    };\n}\na(Qc, \"createNeonQueryPromise\");\nfunction Vs(r, { arrayMode: e, fullResults: t, parameterizedQuery: n, resultCallback: i, types: s }) {\n    let o = new zs.default(s), u = r.fields.map((l)=>l.name), c = r.fields.map((l)=>o.getTypeParser(l.dataTypeID)), h = e === !0 ? r.rows.map((l)=>l.map((d, b)=>d === null ? null : c[b](d))) : r.rows.map((l)=>Object.fromEntries(l.map((d, b)=>[\n                u[b],\n                d === null ? null : c[b](d)\n            ])));\n    return i && i(n, r, h, {\n        arrayMode: e,\n        fullResults: t\n    }), t ? (r.viaNeonFetch = !0, r.rowAsArray = e, r.rows = h, r._parsers = c, r._types = o, r) : h;\n}\na(Vs, \"processQueryResult\");\nvar Js = Te(gt()), Qe = Te(Ct());\nvar En = class En extends Tt.Client {\n    constructor(t){\n        super(t);\n        this.config = t;\n    }\n    get neonConfig() {\n        return this.connection.stream;\n    }\n    connect(t) {\n        let { neonConfig: n } = this;\n        n.forceDisablePgSSL && (this.ssl = this.connection.ssl = !1), this.ssl && n.useSecureWebSocket && console.warn(\"SSL is enabled for both Postgres (e.g. ?sslmode=require in the connection string + forceDisablePgSSL = false) and the WebSocket tunnel (useSecureWebSocket = true). Double encryption will increase latency and CPU usage. It may be appropriate to disable SSL in the Postgres connection parameters or set forceDisablePgSSL = true.\");\n        let i = this.config?.host !== void 0 || this.config?.connectionString !== void 0 || m.env.PGHOST !== void 0, s = m.env.USER ?? m.env.USERNAME;\n        if (!i && this.host === \"localhost\" && this.user === s && this.database === s && this.password === null) throw new Error(`No datab\\\nase host or connection string was set, and key parameters have default values (h\\\nost: localhost, user: ${s}, db: ${s}, password: null). Is an environment variabl\\\ne missing? Alternatively, if you intended to connect with these parameters, plea\\\nse set the host to 'localhost' explicitly.`);\n        let o = super.connect(t), u = n.pipelineTLS && this.ssl, c = n.pipelineConnect === \"password\";\n        if (!u && !n.pipelineConnect) return o;\n        let h = this.connection;\n        if (u && h.on(\"connect\", ()=>h.stream.emit(\"data\", \"S\")), c) {\n            h.removeAllListeners(\"authenticationCleartextPassword\"), h.removeAllListeners(\"readyForQuery\"), h.once(\"readyForQuery\", ()=>h.on(\"readyForQuery\", this._handleReadyForQuery.bind(this)));\n            let l = this.ssl ? \"sslconnect\" : \"connect\";\n            h.on(l, ()=>{\n                this._handleAuthCleartextPassword(), this._handleReadyForQuery();\n            });\n        }\n        return o;\n    }\n    async _handleAuthSASLContinue(t) {\n        let n = this.saslSession, i = this.password, s = t.data;\n        if (n.message !== \"SASLInitialResponse\" || typeof i != \"string\" || typeof s != \"string\") throw new Error(\"SASL: protocol error\");\n        let o = Object.fromEntries(s.split(\",\").map((U)=>{\n            if (!/^.=/.test(U)) throw new Error(\"SASL: Invalid attribute pair entry\");\n            let K = U[0], le = U.substring(2);\n            return [\n                K,\n                le\n            ];\n        })), u = o.r, c = o.s, h = o.i;\n        if (!u || !/^[!-+--~]+$/.test(u)) throw new Error(\"SASL: SCRAM-SERVER-FIRST-MESSAGE: nonce missing/unprintable\");\n        if (!c || !/^(?:[a-zA-Z0-9+/]{4})*(?:[a-zA-Z0-9+/]{2}==|[a-zA-Z0-9+/]{3}=)?$/.test(c)) throw new Error(\"SASL: SCRAM-SERVER-FIRST-MESSAGE: salt missing/not base64\");\n        if (!h || !/^[1-9][0-9]*$/.test(h)) throw new Error(\"SASL: SCRAM-SERVER-FIRST-MESSAGE: missing/invalid iteration count\");\n        if (!u.startsWith(n.clientNonce)) throw new Error(\"SASL: SCRAM-SERVER-FIRST-MESSAGE: server nonce does not start with client nonce\");\n        if (u.length === n.clientNonce.length) throw new Error(\"SASL: SCRAM-SERVER-FIRST-MESSAGE: server nonce is too short\");\n        let l = parseInt(h, 10), d = y.from(c, \"base64\"), b = new TextEncoder, C = b.encode(i), B = await g.subtle.importKey(\"raw\", C, {\n            name: \"HMAC\",\n            hash: {\n                name: \"SHA-256\"\n            }\n        }, !1, [\n            \"sign\"\n        ]), W = new Uint8Array(await g.subtle.sign(\"HMAC\", B, y.concat([\n            d,\n            y.from([\n                0,\n                0,\n                0,\n                1\n            ])\n        ]))), X = W;\n        for(var de = 0; de < l - 1; de++)W = new Uint8Array(await g.subtle.sign(\"HMAC\", B, W)), X = y.from(X.map((U, K)=>X[K] ^ W[K]));\n        let A = X, w = await g.subtle.importKey(\"raw\", A, {\n            name: \"HMAC\",\n            hash: {\n                name: \"SHA-256\"\n            }\n        }, !1, [\n            \"sign\"\n        ]), P = new Uint8Array(await g.subtle.sign(\"HMAC\", w, b.encode(\"Client Key\"))), V = await g.subtle.digest(\"SHA-256\", P), k = \"n=*,r=\" + n.clientNonce, j = \"r=\" + u + \",s=\" + c + \",i=\" + l, ce = \"c=biws,r=\" + u, ee = k + \",\" + j + \",\" + ce, R = await g.subtle.importKey(\"raw\", V, {\n            name: \"HMAC\",\n            hash: {\n                name: \"SHA-256\"\n            }\n        }, !1, [\n            \"sign\"\n        ]);\n        var G = new Uint8Array(await g.subtle.sign(\"HMAC\", R, b.encode(ee))), he = y.from(P.map((U, K)=>P[K] ^ G[K])), ye = he.toString(\"base64\");\n        let xe = await g.subtle.importKey(\"raw\", A, {\n            name: \"HMAC\",\n            hash: {\n                name: \"SHA-256\"\n            }\n        }, !1, [\n            \"sign\"\n        ]), me = await g.subtle.sign(\"HMAC\", xe, b.encode(\"Server Key\")), se = await g.subtle.importKey(\"raw\", me, {\n            name: \"HMAC\",\n            hash: {\n                name: \"SHA-256\"\n            }\n        }, !1, [\n            \"sign\"\n        ]);\n        var oe = y.from(await g.subtle.sign(\"HMAC\", se, b.encode(ee)));\n        n.message = \"SASLResponse\", n.serverSignature = oe.toString(\"base64\"), n.response = ce + \",p=\" + ye, this.connection.sendSCRAMClientFinalMessage(this.saslSession.response);\n    }\n};\na(En, \"NeonClient\");\nvar vn = En;\nfunction Wc(r, e) {\n    if (e) return {\n        callback: e,\n        result: void 0\n    };\n    let t, n, i = a(function(o, u) {\n        o ? t(o) : n(u);\n    }, \"cb\"), s = new r(function(o, u) {\n        n = o, t = u;\n    });\n    return {\n        callback: i,\n        result: s\n    };\n}\na(Wc, \"promisify\");\nvar _n = class _n extends Tt.Pool {\n    constructor(){\n        super(...arguments);\n        _(this, \"Client\", vn);\n        _(this, \"hasFetchUnsupportedListeners\", !1);\n    }\n    on(t, n) {\n        return t !== \"error\" && (this.hasFetchUnsupportedListeners = !0), super.on(t, n);\n    }\n    query(t, n, i) {\n        if (!_e.poolQueryViaFetch || this.hasFetchUnsupportedListeners || typeof t == \"function\") return super.query(t, n, i);\n        typeof n == \"function\" && (i = n, n = void 0);\n        let s = Wc(this.Promise, i);\n        i = s.callback;\n        try {\n            let o = new Js.default(this.options), u = encodeURIComponent, c = encodeURI, h = `postgresql://${u(o.user)}:${u(o.password)}@${u(o.host)}/${c(o.database)}`, l = typeof t == \"string\" ? t : t.text, d = n ?? t.values ?? [];\n            Ys(h, {\n                fullResults: !0,\n                arrayMode: t.rowMode === \"array\"\n            })(l, d, {\n                types: t.types ?? this.options?.types\n            }).then((C)=>i(void 0, C)).catch((C)=>i(C));\n        } catch (o) {\n            i(o);\n        }\n        return s.result;\n    }\n};\na(_n, \"NeonPool\");\nvar Zs = _n;\nvar export_ClientBase = Qe.ClientBase;\nvar export_Connection = Qe.Connection;\nvar export_DatabaseError = Qe.DatabaseError;\nvar export_Query = Qe.Query;\nvar export_defaults = Qe.defaults;\nvar export_types = Qe.types;\n /*! Bundled license information:\n\nieee754/index.js:\n  (*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> *)\n\nbuffer/index.js:\n  (*!\n   * The buffer module from node.js, for the browser.\n   *\n   * @author   Feross Aboukhadijeh <https://feross.org>\n   * @license  MIT\n   *)\n*/ \n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@neondatabase/serverless/index.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@neondatabase/serverless/index.mjs":
/*!*********************************************************!*\
  !*** ./node_modules/@neondatabase/serverless/index.mjs ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Client: () => (/* binding */ vn),\n/* harmony export */   ClientBase: () => (/* binding */ export_ClientBase),\n/* harmony export */   Connection: () => (/* binding */ export_Connection),\n/* harmony export */   DatabaseError: () => (/* binding */ export_DatabaseError),\n/* harmony export */   NeonDbError: () => (/* binding */ Ae),\n/* harmony export */   Pool: () => (/* binding */ Zs),\n/* harmony export */   Query: () => (/* binding */ export_Query),\n/* harmony export */   defaults: () => (/* binding */ export_defaults),\n/* harmony export */   neon: () => (/* binding */ Ys),\n/* harmony export */   neonConfig: () => (/* binding */ _e),\n/* harmony export */   types: () => (/* binding */ export_types)\n/* harmony export */ });\nvar to = Object.create;\nvar Ce = Object.defineProperty;\nvar ro = Object.getOwnPropertyDescriptor;\nvar no = Object.getOwnPropertyNames;\nvar io = Object.getPrototypeOf, so = Object.prototype.hasOwnProperty;\nvar oo = (r, e, t)=>e in r ? Ce(r, e, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: t\n    }) : r[e] = t;\nvar a = (r, e)=>Ce(r, \"name\", {\n        value: e,\n        configurable: !0\n    });\nvar z = (r, e)=>()=>(r && (e = r(r = 0)), e);\nvar I = (r, e)=>()=>(e || r((e = {\n            exports: {}\n        }).exports, e), e.exports), ie = (r, e)=>{\n    for(var t in e)Ce(r, t, {\n        get: e[t],\n        enumerable: !0\n    });\n}, An = (r, e, t, n)=>{\n    if (e && typeof e == \"object\" || typeof e == \"function\") for (let i of no(e))!so.call(r, i) && i !== t && Ce(r, i, {\n        get: ()=>e[i],\n        enumerable: !(n = ro(e, i)) || n.enumerable\n    });\n    return r;\n};\nvar Te = (r, e, t)=>(t = r != null ? to(io(r)) : {}, An(e || !r || !r.__esModule ? Ce(t, \"default\", {\n        value: r,\n        enumerable: !0\n    }) : t, r)), N = (r)=>An(Ce({}, \"__esModule\", {\n        value: !0\n    }), r);\nvar _ = (r, e, t)=>oo(r, typeof e != \"symbol\" ? e + \"\" : e, t);\nvar In = I((nt)=>{\n    \"use strict\";\n    p();\n    nt.byteLength = uo;\n    nt.toByteArray = ho;\n    nt.fromByteArray = po;\n    var ae = [], te = [], ao = typeof Uint8Array < \"u\" ? Uint8Array : Array, Pt = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n    for(ve = 0, Cn = Pt.length; ve < Cn; ++ve)ae[ve] = Pt[ve], te[Pt.charCodeAt(ve)] = ve;\n    var ve, Cn;\n    te[45] = 62;\n    te[95] = 63;\n    function Tn(r) {\n        var e = r.length;\n        if (e % 4 > 0) throw new Error(\"Invalid string. Length must be a multiple of 4\");\n        var t = r.indexOf(\"=\");\n        t === -1 && (t = e);\n        var n = t === e ? 0 : 4 - t % 4;\n        return [\n            t,\n            n\n        ];\n    }\n    a(Tn, \"getLens\");\n    function uo(r) {\n        var e = Tn(r), t = e[0], n = e[1];\n        return (t + n) * 3 / 4 - n;\n    }\n    a(uo, \"byteLength\");\n    function co(r, e, t) {\n        return (e + t) * 3 / 4 - t;\n    }\n    a(co, \"_byteLength\");\n    function ho(r) {\n        var e, t = Tn(r), n = t[0], i = t[1], s = new ao(co(r, n, i)), o = 0, u = i > 0 ? n - 4 : n, c;\n        for(c = 0; c < u; c += 4)e = te[r.charCodeAt(c)] << 18 | te[r.charCodeAt(c + 1)] << 12 | te[r.charCodeAt(c + 2)] << 6 | te[r.charCodeAt(c + 3)], s[o++] = e >> 16 & 255, s[o++] = e >> 8 & 255, s[o++] = e & 255;\n        return i === 2 && (e = te[r.charCodeAt(c)] << 2 | te[r.charCodeAt(c + 1)] >> 4, s[o++] = e & 255), i === 1 && (e = te[r.charCodeAt(c)] << 10 | te[r.charCodeAt(c + 1)] << 4 | te[r.charCodeAt(c + 2)] >> 2, s[o++] = e >> 8 & 255, s[o++] = e & 255), s;\n    }\n    a(ho, \"toByteArray\");\n    function lo(r) {\n        return ae[r >> 18 & 63] + ae[r >> 12 & 63] + ae[r >> 6 & 63] + ae[r & 63];\n    }\n    a(lo, \"tripletToBase64\");\n    function fo(r, e, t) {\n        for(var n, i = [], s = e; s < t; s += 3)n = (r[s] << 16 & 16711680) + (r[s + 1] << 8 & 65280) + (r[s + 2] & 255), i.push(lo(n));\n        return i.join(\"\");\n    }\n    a(fo, \"encodeChunk\");\n    function po(r) {\n        for(var e, t = r.length, n = t % 3, i = [], s = 16383, o = 0, u = t - n; o < u; o += s)i.push(fo(r, o, o + s > u ? u : o + s));\n        return n === 1 ? (e = r[t - 1], i.push(ae[e >> 2] + ae[e << 4 & 63] + \"==\")) : n === 2 && (e = (r[t - 2] << 8) + r[t - 1], i.push(ae[e >> 10] + ae[e >> 4 & 63] + ae[e << 2 & 63] + \"=\")), i.join(\"\");\n    }\n    a(po, \"fromByteArray\");\n});\nvar Pn = I((Bt)=>{\n    p();\n    Bt.read = function(r, e, t, n, i) {\n        var s, o, u = i * 8 - n - 1, c = (1 << u) - 1, h = c >> 1, l = -7, d = t ? i - 1 : 0, b = t ? -1 : 1, C = r[e + d];\n        for(d += b, s = C & (1 << -l) - 1, C >>= -l, l += u; l > 0; s = s * 256 + r[e + d], d += b, l -= 8);\n        for(o = s & (1 << -l) - 1, s >>= -l, l += n; l > 0; o = o * 256 + r[e + d], d += b, l -= 8);\n        if (s === 0) s = 1 - h;\n        else {\n            if (s === c) return o ? NaN : (C ? -1 : 1) * (1 / 0);\n            o = o + Math.pow(2, n), s = s - h;\n        }\n        return (C ? -1 : 1) * o * Math.pow(2, s - n);\n    };\n    Bt.write = function(r, e, t, n, i, s) {\n        var o, u, c, h = s * 8 - i - 1, l = (1 << h) - 1, d = l >> 1, b = i === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0, C = n ? 0 : s - 1, B = n ? 1 : -1, W = e < 0 || e === 0 && 1 / e < 0 ? 1 : 0;\n        for(e = Math.abs(e), isNaN(e) || e === 1 / 0 ? (u = isNaN(e) ? 1 : 0, o = l) : (o = Math.floor(Math.log(e) / Math.LN2), e * (c = Math.pow(2, -o)) < 1 && (o--, c *= 2), o + d >= 1 ? e += b / c : e += b * Math.pow(2, 1 - d), e * c >= 2 && (o++, c /= 2), o + d >= l ? (u = 0, o = l) : o + d >= 1 ? (u = (e * c - 1) * Math.pow(2, i), o = o + d) : (u = e * Math.pow(2, d - 1) * Math.pow(2, i), o = 0)); i >= 8; r[t + C] = u & 255, C += B, u /= 256, i -= 8);\n        for(o = o << i | u, h += i; h > 0; r[t + C] = o & 255, C += B, o /= 256, h -= 8);\n        r[t + C - B] |= W * 128;\n    };\n});\nvar $n = I((Le)=>{\n    \"use strict\";\n    p();\n    var Lt = In(), Pe = Pn(), Bn = typeof Symbol == \"function\" && typeof Symbol.for == \"function\" ? Symbol.for(\"nodejs.util.inspect.custom\") : null;\n    Le.Buffer = f;\n    Le.SlowBuffer = So;\n    Le.INSPECT_MAX_BYTES = 50;\n    var it = 2147483647;\n    Le.kMaxLength = it;\n    f.TYPED_ARRAY_SUPPORT = yo();\n    !f.TYPED_ARRAY_SUPPORT && typeof console < \"u\" && typeof console.error == \"function\" && console.error(\"This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support.\");\n    function yo() {\n        try {\n            let r = new Uint8Array(1), e = {\n                foo: a(function() {\n                    return 42;\n                }, \"foo\")\n            };\n            return Object.setPrototypeOf(e, Uint8Array.prototype), Object.setPrototypeOf(r, e), r.foo() === 42;\n        } catch  {\n            return !1;\n        }\n    }\n    a(yo, \"typedArraySupport\");\n    Object.defineProperty(f.prototype, \"parent\", {\n        enumerable: !0,\n        get: a(function() {\n            if (f.isBuffer(this)) return this.buffer;\n        }, \"get\")\n    });\n    Object.defineProperty(f.prototype, \"offset\", {\n        enumerable: !0,\n        get: a(function() {\n            if (f.isBuffer(this)) return this.byteOffset;\n        }, \"get\")\n    });\n    function fe(r) {\n        if (r > it) throw new RangeError('The value \"' + r + '\" is invalid for option \"size\"');\n        let e = new Uint8Array(r);\n        return Object.setPrototypeOf(e, f.prototype), e;\n    }\n    a(fe, \"createBuffer\");\n    function f(r, e, t) {\n        if (typeof r == \"number\") {\n            if (typeof e == \"string\") throw new TypeError('The \"string\" argument must be of type string. Received type number');\n            return Dt(r);\n        }\n        return Mn(r, e, t);\n    }\n    a(f, \"Buffer\");\n    f.poolSize = 8192;\n    function Mn(r, e, t) {\n        if (typeof r == \"string\") return go(r, e);\n        if (ArrayBuffer.isView(r)) return wo(r);\n        if (r == null) throw new TypeError(\"The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type \" + typeof r);\n        if (ue(r, ArrayBuffer) || r && ue(r.buffer, ArrayBuffer) || typeof SharedArrayBuffer < \"u\" && (ue(r, SharedArrayBuffer) || r && ue(r.buffer, SharedArrayBuffer))) return Ft(r, e, t);\n        if (typeof r == \"number\") throw new TypeError('The \"value\" argument must not be of type number. Received type number');\n        let n = r.valueOf && r.valueOf();\n        if (n != null && n !== r) return f.from(n, e, t);\n        let i = bo(r);\n        if (i) return i;\n        if (typeof Symbol < \"u\" && Symbol.toPrimitive != null && typeof r[Symbol.toPrimitive] == \"function\") return f.from(r[Symbol.toPrimitive](\"string\"), e, t);\n        throw new TypeError(\"The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type \" + typeof r);\n    }\n    a(Mn, \"from\");\n    f.from = function(r, e, t) {\n        return Mn(r, e, t);\n    };\n    Object.setPrototypeOf(f.prototype, Uint8Array.prototype);\n    Object.setPrototypeOf(f, Uint8Array);\n    function Dn(r) {\n        if (typeof r != \"number\") throw new TypeError('\"size\" argument must be of type number');\n        if (r < 0) throw new RangeError('The value \"' + r + '\" is invalid for option \"size\"');\n    }\n    a(Dn, \"assertSize\");\n    function mo(r, e, t) {\n        return Dn(r), r <= 0 ? fe(r) : e !== void 0 ? typeof t == \"string\" ? fe(r).fill(e, t) : fe(r).fill(e) : fe(r);\n    }\n    a(mo, \"alloc\");\n    f.alloc = function(r, e, t) {\n        return mo(r, e, t);\n    };\n    function Dt(r) {\n        return Dn(r), fe(r < 0 ? 0 : kt(r) | 0);\n    }\n    a(Dt, \"allocUnsafe\");\n    f.allocUnsafe = function(r) {\n        return Dt(r);\n    };\n    f.allocUnsafeSlow = function(r) {\n        return Dt(r);\n    };\n    function go(r, e) {\n        if ((typeof e != \"string\" || e === \"\") && (e = \"utf8\"), !f.isEncoding(e)) throw new TypeError(\"Unknown encoding: \" + e);\n        let t = kn(r, e) | 0, n = fe(t), i = n.write(r, e);\n        return i !== t && (n = n.slice(0, i)), n;\n    }\n    a(go, \"fromString\");\n    function Rt(r) {\n        let e = r.length < 0 ? 0 : kt(r.length) | 0, t = fe(e);\n        for(let n = 0; n < e; n += 1)t[n] = r[n] & 255;\n        return t;\n    }\n    a(Rt, \"fromArrayLike\");\n    function wo(r) {\n        if (ue(r, Uint8Array)) {\n            let e = new Uint8Array(r);\n            return Ft(e.buffer, e.byteOffset, e.byteLength);\n        }\n        return Rt(r);\n    }\n    a(wo, \"fromArrayView\");\n    function Ft(r, e, t) {\n        if (e < 0 || r.byteLength < e) throw new RangeError('\"offset\" is outside of buffer bounds');\n        if (r.byteLength < e + (t || 0)) throw new RangeError('\"length\" is outside of buffer bounds');\n        let n;\n        return e === void 0 && t === void 0 ? n = new Uint8Array(r) : t === void 0 ? n = new Uint8Array(r, e) : n = new Uint8Array(r, e, t), Object.setPrototypeOf(n, f.prototype), n;\n    }\n    a(Ft, \"fromArrayBuffer\");\n    function bo(r) {\n        if (f.isBuffer(r)) {\n            let e = kt(r.length) | 0, t = fe(e);\n            return t.length === 0 || r.copy(t, 0, 0, e), t;\n        }\n        if (r.length !== void 0) return typeof r.length != \"number\" || Ot(r.length) ? fe(0) : Rt(r);\n        if (r.type === \"Buffer\" && Array.isArray(r.data)) return Rt(r.data);\n    }\n    a(bo, \"fromObject\");\n    function kt(r) {\n        if (r >= it) throw new RangeError(\"Attempt to allocate Buffer larger than maximum size: 0x\" + it.toString(16) + \" bytes\");\n        return r | 0;\n    }\n    a(kt, \"checked\");\n    function So(r) {\n        return +r != r && (r = 0), f.alloc(+r);\n    }\n    a(So, \"SlowBuffer\");\n    f.isBuffer = a(function(e) {\n        return e != null && e._isBuffer === !0 && e !== f.prototype;\n    }, \"isBuffer\");\n    f.compare = a(function(e, t) {\n        if (ue(e, Uint8Array) && (e = f.from(e, e.offset, e.byteLength)), ue(t, Uint8Array) && (t = f.from(t, t.offset, t.byteLength)), !f.isBuffer(e) || !f.isBuffer(t)) throw new TypeError('The \"buf1\", \"buf2\" arguments must be one of type Buffer or Uint8Array');\n        if (e === t) return 0;\n        let n = e.length, i = t.length;\n        for(let s = 0, o = Math.min(n, i); s < o; ++s)if (e[s] !== t[s]) {\n            n = e[s], i = t[s];\n            break;\n        }\n        return n < i ? -1 : i < n ? 1 : 0;\n    }, \"compare\");\n    f.isEncoding = a(function(e) {\n        switch(String(e).toLowerCase()){\n            case \"hex\":\n            case \"utf8\":\n            case \"utf-8\":\n            case \"ascii\":\n            case \"latin1\":\n            case \"binary\":\n            case \"base64\":\n            case \"ucs2\":\n            case \"ucs-2\":\n            case \"utf16le\":\n            case \"utf-16le\":\n                return !0;\n            default:\n                return !1;\n        }\n    }, \"isEncoding\");\n    f.concat = a(function(e, t) {\n        if (!Array.isArray(e)) throw new TypeError('\"list\" argument must be an Array of Buffers');\n        if (e.length === 0) return f.alloc(0);\n        let n;\n        if (t === void 0) for(t = 0, n = 0; n < e.length; ++n)t += e[n].length;\n        let i = f.allocUnsafe(t), s = 0;\n        for(n = 0; n < e.length; ++n){\n            let o = e[n];\n            if (ue(o, Uint8Array)) s + o.length > i.length ? (f.isBuffer(o) || (o = f.from(o)), o.copy(i, s)) : Uint8Array.prototype.set.call(i, o, s);\n            else if (f.isBuffer(o)) o.copy(i, s);\n            else throw new TypeError('\"list\" argument must be an Array of Buffers');\n            s += o.length;\n        }\n        return i;\n    }, \"concat\");\n    function kn(r, e) {\n        if (f.isBuffer(r)) return r.length;\n        if (ArrayBuffer.isView(r) || ue(r, ArrayBuffer)) return r.byteLength;\n        if (typeof r != \"string\") throw new TypeError('The \"string\" argument must be one of type string, Buffer, or ArrayBuffer. Received type ' + typeof r);\n        let t = r.length, n = arguments.length > 2 && arguments[2] === !0;\n        if (!n && t === 0) return 0;\n        let i = !1;\n        for(;;)switch(e){\n            case \"ascii\":\n            case \"latin1\":\n            case \"binary\":\n                return t;\n            case \"utf8\":\n            case \"utf-8\":\n                return Mt(r).length;\n            case \"ucs2\":\n            case \"ucs-2\":\n            case \"utf16le\":\n            case \"utf-16le\":\n                return t * 2;\n            case \"hex\":\n                return t >>> 1;\n            case \"base64\":\n                return Gn(r).length;\n            default:\n                if (i) return n ? -1 : Mt(r).length;\n                e = (\"\" + e).toLowerCase(), i = !0;\n        }\n    }\n    a(kn, \"byteLength\");\n    f.byteLength = kn;\n    function xo(r, e, t) {\n        let n = !1;\n        if ((e === void 0 || e < 0) && (e = 0), e > this.length || ((t === void 0 || t > this.length) && (t = this.length), t <= 0) || (t >>>= 0, e >>>= 0, t <= e)) return \"\";\n        for(r || (r = \"utf8\");;)switch(r){\n            case \"hex\":\n                return Lo(this, e, t);\n            case \"utf8\":\n            case \"utf-8\":\n                return On(this, e, t);\n            case \"ascii\":\n                return Po(this, e, t);\n            case \"latin1\":\n            case \"binary\":\n                return Bo(this, e, t);\n            case \"base64\":\n                return To(this, e, t);\n            case \"ucs2\":\n            case \"ucs-2\":\n            case \"utf16le\":\n            case \"utf-16le\":\n                return Ro(this, e, t);\n            default:\n                if (n) throw new TypeError(\"Unknown encoding: \" + r);\n                r = (r + \"\").toLowerCase(), n = !0;\n        }\n    }\n    a(xo, \"slowToString\");\n    f.prototype._isBuffer = !0;\n    function Ee(r, e, t) {\n        let n = r[e];\n        r[e] = r[t], r[t] = n;\n    }\n    a(Ee, \"swap\");\n    f.prototype.swap16 = a(function() {\n        let e = this.length;\n        if (e % 2 !== 0) throw new RangeError(\"Buffer size must be a multiple of 16-bits\");\n        for(let t = 0; t < e; t += 2)Ee(this, t, t + 1);\n        return this;\n    }, \"swap16\");\n    f.prototype.swap32 = a(function() {\n        let e = this.length;\n        if (e % 4 !== 0) throw new RangeError(\"Buffer size must be a multiple of 32-bits\");\n        for(let t = 0; t < e; t += 4)Ee(this, t, t + 3), Ee(this, t + 1, t + 2);\n        return this;\n    }, \"swap32\");\n    f.prototype.swap64 = a(function() {\n        let e = this.length;\n        if (e % 8 !== 0) throw new RangeError(\"Buffer size must be a multiple of 64-bits\");\n        for(let t = 0; t < e; t += 8)Ee(this, t, t + 7), Ee(this, t + 1, t + 6), Ee(this, t + 2, t + 5), Ee(this, t + 3, t + 4);\n        return this;\n    }, \"swap64\");\n    f.prototype.toString = a(function() {\n        let e = this.length;\n        return e === 0 ? \"\" : arguments.length === 0 ? On(this, 0, e) : xo.apply(this, arguments);\n    }, \"toString\");\n    f.prototype.toLocaleString = f.prototype.toString;\n    f.prototype.equals = a(function(e) {\n        if (!f.isBuffer(e)) throw new TypeError(\"Argument must be a Buffer\");\n        return this === e ? !0 : f.compare(this, e) === 0;\n    }, \"equals\");\n    f.prototype.inspect = a(function() {\n        let e = \"\", t = Le.INSPECT_MAX_BYTES;\n        return e = this.toString(\"hex\", 0, t).replace(/(.{2})/g, \"$1 \").trim(), this.length > t && (e += \" ... \"), \"<Buffer \" + e + \">\";\n    }, \"inspect\");\n    Bn && (f.prototype[Bn] = f.prototype.inspect);\n    f.prototype.compare = a(function(e, t, n, i, s) {\n        if (ue(e, Uint8Array) && (e = f.from(e, e.offset, e.byteLength)), !f.isBuffer(e)) throw new TypeError('The \"target\" argument must be one of type Buffer or Uint8Array. Received type ' + typeof e);\n        if (t === void 0 && (t = 0), n === void 0 && (n = e ? e.length : 0), i === void 0 && (i = 0), s === void 0 && (s = this.length), t < 0 || n > e.length || i < 0 || s > this.length) throw new RangeError(\"out of range index\");\n        if (i >= s && t >= n) return 0;\n        if (i >= s) return -1;\n        if (t >= n) return 1;\n        if (t >>>= 0, n >>>= 0, i >>>= 0, s >>>= 0, this === e) return 0;\n        let o = s - i, u = n - t, c = Math.min(o, u), h = this.slice(i, s), l = e.slice(t, n);\n        for(let d = 0; d < c; ++d)if (h[d] !== l[d]) {\n            o = h[d], u = l[d];\n            break;\n        }\n        return o < u ? -1 : u < o ? 1 : 0;\n    }, \"compare\");\n    function Un(r, e, t, n, i) {\n        if (r.length === 0) return -1;\n        if (typeof t == \"string\" ? (n = t, t = 0) : t > 2147483647 ? t = 2147483647 : t < -2147483648 && (t = -2147483648), t = +t, Ot(t) && (t = i ? 0 : r.length - 1), t < 0 && (t = r.length + t), t >= r.length) {\n            if (i) return -1;\n            t = r.length - 1;\n        } else if (t < 0) if (i) t = 0;\n        else return -1;\n        if (typeof e == \"string\" && (e = f.from(e, n)), f.isBuffer(e)) return e.length === 0 ? -1 : Ln(r, e, t, n, i);\n        if (typeof e == \"number\") return e = e & 255, typeof Uint8Array.prototype.indexOf == \"function\" ? i ? Uint8Array.prototype.indexOf.call(r, e, t) : Uint8Array.prototype.lastIndexOf.call(r, e, t) : Ln(r, [\n            e\n        ], t, n, i);\n        throw new TypeError(\"val must be string, number or Buffer\");\n    }\n    a(Un, \"bidirectionalIndexOf\");\n    function Ln(r, e, t, n, i) {\n        let s = 1, o = r.length, u = e.length;\n        if (n !== void 0 && (n = String(n).toLowerCase(), n === \"ucs2\" || n === \"ucs-2\" || n === \"utf16le\" || n === \"utf-16le\")) {\n            if (r.length < 2 || e.length < 2) return -1;\n            s = 2, o /= 2, u /= 2, t /= 2;\n        }\n        function c(l, d) {\n            return s === 1 ? l[d] : l.readUInt16BE(d * s);\n        }\n        a(c, \"read\");\n        let h;\n        if (i) {\n            let l = -1;\n            for(h = t; h < o; h++)if (c(r, h) === c(e, l === -1 ? 0 : h - l)) {\n                if (l === -1 && (l = h), h - l + 1 === u) return l * s;\n            } else l !== -1 && (h -= h - l), l = -1;\n        } else for(t + u > o && (t = o - u), h = t; h >= 0; h--){\n            let l = !0;\n            for(let d = 0; d < u; d++)if (c(r, h + d) !== c(e, d)) {\n                l = !1;\n                break;\n            }\n            if (l) return h;\n        }\n        return -1;\n    }\n    a(Ln, \"arrayIndexOf\");\n    f.prototype.includes = a(function(e, t, n) {\n        return this.indexOf(e, t, n) !== -1;\n    }, \"includes\");\n    f.prototype.indexOf = a(function(e, t, n) {\n        return Un(this, e, t, n, !0);\n    }, \"indexOf\");\n    f.prototype.lastIndexOf = a(function(e, t, n) {\n        return Un(this, e, t, n, !1);\n    }, \"lastIndexOf\");\n    function vo(r, e, t, n) {\n        t = Number(t) || 0;\n        let i = r.length - t;\n        n ? (n = Number(n), n > i && (n = i)) : n = i;\n        let s = e.length;\n        n > s / 2 && (n = s / 2);\n        let o;\n        for(o = 0; o < n; ++o){\n            let u = parseInt(e.substr(o * 2, 2), 16);\n            if (Ot(u)) return o;\n            r[t + o] = u;\n        }\n        return o;\n    }\n    a(vo, \"hexWrite\");\n    function Eo(r, e, t, n) {\n        return st(Mt(e, r.length - t), r, t, n);\n    }\n    a(Eo, \"utf8Write\");\n    function _o(r, e, t, n) {\n        return st(ko(e), r, t, n);\n    }\n    a(_o, \"asciiWrite\");\n    function Ao(r, e, t, n) {\n        return st(Gn(e), r, t, n);\n    }\n    a(Ao, \"base64Write\");\n    function Co(r, e, t, n) {\n        return st(Uo(e, r.length - t), r, t, n);\n    }\n    a(Co, \"ucs2Write\");\n    f.prototype.write = a(function(e, t, n, i) {\n        if (t === void 0) i = \"utf8\", n = this.length, t = 0;\n        else if (n === void 0 && typeof t == \"string\") i = t, n = this.length, t = 0;\n        else if (isFinite(t)) t = t >>> 0, isFinite(n) ? (n = n >>> 0, i === void 0 && (i = \"utf8\")) : (i = n, n = void 0);\n        else throw new Error(\"Buffer.write(string, encoding, offset[, length]) is no longer supported\");\n        let s = this.length - t;\n        if ((n === void 0 || n > s) && (n = s), e.length > 0 && (n < 0 || t < 0) || t > this.length) throw new RangeError(\"Attempt to write outside buffer bounds\");\n        i || (i = \"utf8\");\n        let o = !1;\n        for(;;)switch(i){\n            case \"hex\":\n                return vo(this, e, t, n);\n            case \"utf8\":\n            case \"utf-8\":\n                return Eo(this, e, t, n);\n            case \"ascii\":\n            case \"latin1\":\n            case \"binary\":\n                return _o(this, e, t, n);\n            case \"base64\":\n                return Ao(this, e, t, n);\n            case \"ucs2\":\n            case \"ucs-2\":\n            case \"utf16le\":\n            case \"utf-16le\":\n                return Co(this, e, t, n);\n            default:\n                if (o) throw new TypeError(\"Unknown encoding: \" + i);\n                i = (\"\" + i).toLowerCase(), o = !0;\n        }\n    }, \"write\");\n    f.prototype.toJSON = a(function() {\n        return {\n            type: \"Buffer\",\n            data: Array.prototype.slice.call(this._arr || this, 0)\n        };\n    }, \"toJSON\");\n    function To(r, e, t) {\n        return e === 0 && t === r.length ? Lt.fromByteArray(r) : Lt.fromByteArray(r.slice(e, t));\n    }\n    a(To, \"base64Slice\");\n    function On(r, e, t) {\n        t = Math.min(r.length, t);\n        let n = [], i = e;\n        for(; i < t;){\n            let s = r[i], o = null, u = s > 239 ? 4 : s > 223 ? 3 : s > 191 ? 2 : 1;\n            if (i + u <= t) {\n                let c, h, l, d;\n                switch(u){\n                    case 1:\n                        s < 128 && (o = s);\n                        break;\n                    case 2:\n                        c = r[i + 1], (c & 192) === 128 && (d = (s & 31) << 6 | c & 63, d > 127 && (o = d));\n                        break;\n                    case 3:\n                        c = r[i + 1], h = r[i + 2], (c & 192) === 128 && (h & 192) === 128 && (d = (s & 15) << 12 | (c & 63) << 6 | h & 63, d > 2047 && (d < 55296 || d > 57343) && (o = d));\n                        break;\n                    case 4:\n                        c = r[i + 1], h = r[i + 2], l = r[i + 3], (c & 192) === 128 && (h & 192) === 128 && (l & 192) === 128 && (d = (s & 15) << 18 | (c & 63) << 12 | (h & 63) << 6 | l & 63, d > 65535 && d < 1114112 && (o = d));\n                }\n            }\n            o === null ? (o = 65533, u = 1) : o > 65535 && (o -= 65536, n.push(o >>> 10 & 1023 | 55296), o = 56320 | o & 1023), n.push(o), i += u;\n        }\n        return Io(n);\n    }\n    a(On, \"utf8Slice\");\n    var Rn = 4096;\n    function Io(r) {\n        let e = r.length;\n        if (e <= Rn) return String.fromCharCode.apply(String, r);\n        let t = \"\", n = 0;\n        for(; n < e;)t += String.fromCharCode.apply(String, r.slice(n, n += Rn));\n        return t;\n    }\n    a(Io, \"decodeCodePointsArray\");\n    function Po(r, e, t) {\n        let n = \"\";\n        t = Math.min(r.length, t);\n        for(let i = e; i < t; ++i)n += String.fromCharCode(r[i] & 127);\n        return n;\n    }\n    a(Po, \"asciiSlice\");\n    function Bo(r, e, t) {\n        let n = \"\";\n        t = Math.min(r.length, t);\n        for(let i = e; i < t; ++i)n += String.fromCharCode(r[i]);\n        return n;\n    }\n    a(Bo, \"latin1Slice\");\n    function Lo(r, e, t) {\n        let n = r.length;\n        (!e || e < 0) && (e = 0), (!t || t < 0 || t > n) && (t = n);\n        let i = \"\";\n        for(let s = e; s < t; ++s)i += Oo[r[s]];\n        return i;\n    }\n    a(Lo, \"hexSlice\");\n    function Ro(r, e, t) {\n        let n = r.slice(e, t), i = \"\";\n        for(let s = 0; s < n.length - 1; s += 2)i += String.fromCharCode(n[s] + n[s + 1] * 256);\n        return i;\n    }\n    a(Ro, \"utf16leSlice\");\n    f.prototype.slice = a(function(e, t) {\n        let n = this.length;\n        e = ~~e, t = t === void 0 ? n : ~~t, e < 0 ? (e += n, e < 0 && (e = 0)) : e > n && (e = n), t < 0 ? (t += n, t < 0 && (t = 0)) : t > n && (t = n), t < e && (t = e);\n        let i = this.subarray(e, t);\n        return Object.setPrototypeOf(i, f.prototype), i;\n    }, \"slice\");\n    function q(r, e, t) {\n        if (r % 1 !== 0 || r < 0) throw new RangeError(\"offset is not uint\");\n        if (r + e > t) throw new RangeError(\"Trying to access beyond buffer length\");\n    }\n    a(q, \"checkOffset\");\n    f.prototype.readUintLE = f.prototype.readUIntLE = a(function(e, t, n) {\n        e = e >>> 0, t = t >>> 0, n || q(e, t, this.length);\n        let i = this[e], s = 1, o = 0;\n        for(; ++o < t && (s *= 256);)i += this[e + o] * s;\n        return i;\n    }, \"readUIntLE\");\n    f.prototype.readUintBE = f.prototype.readUIntBE = a(function(e, t, n) {\n        e = e >>> 0, t = t >>> 0, n || q(e, t, this.length);\n        let i = this[e + --t], s = 1;\n        for(; t > 0 && (s *= 256);)i += this[e + --t] * s;\n        return i;\n    }, \"readUIntBE\");\n    f.prototype.readUint8 = f.prototype.readUInt8 = a(function(e, t) {\n        return e = e >>> 0, t || q(e, 1, this.length), this[e];\n    }, \"readUInt8\");\n    f.prototype.readUint16LE = f.prototype.readUInt16LE = a(function(e, t) {\n        return e = e >>> 0, t || q(e, 2, this.length), this[e] | this[e + 1] << 8;\n    }, \"readUInt16LE\");\n    f.prototype.readUint16BE = f.prototype.readUInt16BE = a(function(e, t) {\n        return e = e >>> 0, t || q(e, 2, this.length), this[e] << 8 | this[e + 1];\n    }, \"readUInt16BE\");\n    f.prototype.readUint32LE = f.prototype.readUInt32LE = a(function(e, t) {\n        return e = e >>> 0, t || q(e, 4, this.length), (this[e] | this[e + 1] << 8 | this[e + 2] << 16) + this[e + 3] * 16777216;\n    }, \"readUInt32LE\");\n    f.prototype.readUint32BE = f.prototype.readUInt32BE = a(function(e, t) {\n        return e = e >>> 0, t || q(e, 4, this.length), this[e] * 16777216 + (this[e + 1] << 16 | this[e + 2] << 8 | this[e + 3]);\n    }, \"readUInt32BE\");\n    f.prototype.readBigUInt64LE = ge(a(function(e) {\n        e = e >>> 0, Be(e, \"offset\");\n        let t = this[e], n = this[e + 7];\n        (t === void 0 || n === void 0) && We(e, this.length - 8);\n        let i = t + this[++e] * 2 ** 8 + this[++e] * 2 ** 16 + this[++e] * 2 ** 24, s = this[++e] + this[++e] * 2 ** 8 + this[++e] * 2 ** 16 + n * 2 ** 24;\n        return BigInt(i) + (BigInt(s) << BigInt(32));\n    }, \"readBigUInt64LE\"));\n    f.prototype.readBigUInt64BE = ge(a(function(e) {\n        e = e >>> 0, Be(e, \"offset\");\n        let t = this[e], n = this[e + 7];\n        (t === void 0 || n === void 0) && We(e, this.length - 8);\n        let i = t * 2 ** 24 + this[++e] * 2 ** 16 + this[++e] * 2 ** 8 + this[++e], s = this[++e] * 2 ** 24 + this[++e] * 2 ** 16 + this[++e] * 2 ** 8 + n;\n        return (BigInt(i) << BigInt(32)) + BigInt(s);\n    }, \"readBigUInt64BE\"));\n    f.prototype.readIntLE = a(function(e, t, n) {\n        e = e >>> 0, t = t >>> 0, n || q(e, t, this.length);\n        let i = this[e], s = 1, o = 0;\n        for(; ++o < t && (s *= 256);)i += this[e + o] * s;\n        return s *= 128, i >= s && (i -= Math.pow(2, 8 * t)), i;\n    }, \"readIntLE\");\n    f.prototype.readIntBE = a(function(e, t, n) {\n        e = e >>> 0, t = t >>> 0, n || q(e, t, this.length);\n        let i = t, s = 1, o = this[e + --i];\n        for(; i > 0 && (s *= 256);)o += this[e + --i] * s;\n        return s *= 128, o >= s && (o -= Math.pow(2, 8 * t)), o;\n    }, \"readIntBE\");\n    f.prototype.readInt8 = a(function(e, t) {\n        return e = e >>> 0, t || q(e, 1, this.length), this[e] & 128 ? (255 - this[e] + 1) * -1 : this[e];\n    }, \"readInt8\");\n    f.prototype.readInt16LE = a(function(e, t) {\n        e = e >>> 0, t || q(e, 2, this.length);\n        let n = this[e] | this[e + 1] << 8;\n        return n & 32768 ? n | 4294901760 : n;\n    }, \"readInt16LE\");\n    f.prototype.readInt16BE = a(function(e, t) {\n        e = e >>> 0, t || q(e, 2, this.length);\n        let n = this[e + 1] | this[e] << 8;\n        return n & 32768 ? n | 4294901760 : n;\n    }, \"readInt16BE\");\n    f.prototype.readInt32LE = a(function(e, t) {\n        return e = e >>> 0, t || q(e, 4, this.length), this[e] | this[e + 1] << 8 | this[e + 2] << 16 | this[e + 3] << 24;\n    }, \"readInt32LE\");\n    f.prototype.readInt32BE = a(function(e, t) {\n        return e = e >>> 0, t || q(e, 4, this.length), this[e] << 24 | this[e + 1] << 16 | this[e + 2] << 8 | this[e + 3];\n    }, \"readInt32BE\");\n    f.prototype.readBigInt64LE = ge(a(function(e) {\n        e = e >>> 0, Be(e, \"offset\");\n        let t = this[e], n = this[e + 7];\n        (t === void 0 || n === void 0) && We(e, this.length - 8);\n        let i = this[e + 4] + this[e + 5] * 2 ** 8 + this[e + 6] * 2 ** 16 + (n << 24);\n        return (BigInt(i) << BigInt(32)) + BigInt(t + this[++e] * 2 ** 8 + this[++e] * 2 ** 16 + this[++e] * 2 ** 24);\n    }, \"readBigInt64LE\"));\n    f.prototype.readBigInt64BE = ge(a(function(e) {\n        e = e >>> 0, Be(e, \"offset\");\n        let t = this[e], n = this[e + 7];\n        (t === void 0 || n === void 0) && We(e, this.length - 8);\n        let i = (t << 24) + this[++e] * 2 ** 16 + this[++e] * 2 ** 8 + this[++e];\n        return (BigInt(i) << BigInt(32)) + BigInt(this[++e] * 2 ** 24 + this[++e] * 2 ** 16 + this[++e] * 2 ** 8 + n);\n    }, \"readBigInt64BE\"));\n    f.prototype.readFloatLE = a(function(e, t) {\n        return e = e >>> 0, t || q(e, 4, this.length), Pe.read(this, e, !0, 23, 4);\n    }, \"readFloatLE\");\n    f.prototype.readFloatBE = a(function(e, t) {\n        return e = e >>> 0, t || q(e, 4, this.length), Pe.read(this, e, !1, 23, 4);\n    }, \"readFloatBE\");\n    f.prototype.readDoubleLE = a(function(e, t) {\n        return e = e >>> 0, t || q(e, 8, this.length), Pe.read(this, e, !0, 52, 8);\n    }, \"readDoubleLE\");\n    f.prototype.readDoubleBE = a(function(e, t) {\n        return e = e >>> 0, t || q(e, 8, this.length), Pe.read(this, e, !1, 52, 8);\n    }, \"readDoubleBE\");\n    function Y(r, e, t, n, i, s) {\n        if (!f.isBuffer(r)) throw new TypeError('\"buffer\" argument must be a Buffer instance');\n        if (e > i || e < s) throw new RangeError('\"value\" argument is out of bounds');\n        if (t + n > r.length) throw new RangeError(\"Index out of range\");\n    }\n    a(Y, \"checkInt\");\n    f.prototype.writeUintLE = f.prototype.writeUIntLE = a(function(e, t, n, i) {\n        if (e = +e, t = t >>> 0, n = n >>> 0, !i) {\n            let u = Math.pow(2, 8 * n) - 1;\n            Y(this, e, t, n, u, 0);\n        }\n        let s = 1, o = 0;\n        for(this[t] = e & 255; ++o < n && (s *= 256);)this[t + o] = e / s & 255;\n        return t + n;\n    }, \"writeUIntLE\");\n    f.prototype.writeUintBE = f.prototype.writeUIntBE = a(function(e, t, n, i) {\n        if (e = +e, t = t >>> 0, n = n >>> 0, !i) {\n            let u = Math.pow(2, 8 * n) - 1;\n            Y(this, e, t, n, u, 0);\n        }\n        let s = n - 1, o = 1;\n        for(this[t + s] = e & 255; --s >= 0 && (o *= 256);)this[t + s] = e / o & 255;\n        return t + n;\n    }, \"writeUIntBE\");\n    f.prototype.writeUint8 = f.prototype.writeUInt8 = a(function(e, t, n) {\n        return e = +e, t = t >>> 0, n || Y(this, e, t, 1, 255, 0), this[t] = e & 255, t + 1;\n    }, \"writeUInt8\");\n    f.prototype.writeUint16LE = f.prototype.writeUInt16LE = a(function(e, t, n) {\n        return e = +e, t = t >>> 0, n || Y(this, e, t, 2, 65535, 0), this[t] = e & 255, this[t + 1] = e >>> 8, t + 2;\n    }, \"writeUInt16LE\");\n    f.prototype.writeUint16BE = f.prototype.writeUInt16BE = a(function(e, t, n) {\n        return e = +e, t = t >>> 0, n || Y(this, e, t, 2, 65535, 0), this[t] = e >>> 8, this[t + 1] = e & 255, t + 2;\n    }, \"writeUInt16BE\");\n    f.prototype.writeUint32LE = f.prototype.writeUInt32LE = a(function(e, t, n) {\n        return e = +e, t = t >>> 0, n || Y(this, e, t, 4, 4294967295, 0), this[t + 3] = e >>> 24, this[t + 2] = e >>> 16, this[t + 1] = e >>> 8, this[t] = e & 255, t + 4;\n    }, \"writeUInt32LE\");\n    f.prototype.writeUint32BE = f.prototype.writeUInt32BE = a(function(e, t, n) {\n        return e = +e, t = t >>> 0, n || Y(this, e, t, 4, 4294967295, 0), this[t] = e >>> 24, this[t + 1] = e >>> 16, this[t + 2] = e >>> 8, this[t + 3] = e & 255, t + 4;\n    }, \"writeUInt32BE\");\n    function Nn(r, e, t, n, i) {\n        Hn(e, n, i, r, t, 7);\n        let s = Number(e & BigInt(4294967295));\n        r[t++] = s, s = s >> 8, r[t++] = s, s = s >> 8, r[t++] = s, s = s >> 8, r[t++] = s;\n        let o = Number(e >> BigInt(32) & BigInt(4294967295));\n        return r[t++] = o, o = o >> 8, r[t++] = o, o = o >> 8, r[t++] = o, o = o >> 8, r[t++] = o, t;\n    }\n    a(Nn, \"wrtBigUInt64LE\");\n    function qn(r, e, t, n, i) {\n        Hn(e, n, i, r, t, 7);\n        let s = Number(e & BigInt(4294967295));\n        r[t + 7] = s, s = s >> 8, r[t + 6] = s, s = s >> 8, r[t + 5] = s, s = s >> 8, r[t + 4] = s;\n        let o = Number(e >> BigInt(32) & BigInt(4294967295));\n        return r[t + 3] = o, o = o >> 8, r[t + 2] = o, o = o >> 8, r[t + 1] = o, o = o >> 8, r[t] = o, t + 8;\n    }\n    a(qn, \"wrtBigUInt64BE\");\n    f.prototype.writeBigUInt64LE = ge(a(function(e, t = 0) {\n        return Nn(this, e, t, BigInt(0), BigInt(\"0xffffffffffffffff\"));\n    }, \"writeBigUInt64LE\"));\n    f.prototype.writeBigUInt64BE = ge(a(function(e, t = 0) {\n        return qn(this, e, t, BigInt(0), BigInt(\"0xffffffffffffffff\"));\n    }, \"writeBigUInt64BE\"));\n    f.prototype.writeIntLE = a(function(e, t, n, i) {\n        if (e = +e, t = t >>> 0, !i) {\n            let c = Math.pow(2, 8 * n - 1);\n            Y(this, e, t, n, c - 1, -c);\n        }\n        let s = 0, o = 1, u = 0;\n        for(this[t] = e & 255; ++s < n && (o *= 256);)e < 0 && u === 0 && this[t + s - 1] !== 0 && (u = 1), this[t + s] = (e / o >> 0) - u & 255;\n        return t + n;\n    }, \"writeIntLE\");\n    f.prototype.writeIntBE = a(function(e, t, n, i) {\n        if (e = +e, t = t >>> 0, !i) {\n            let c = Math.pow(2, 8 * n - 1);\n            Y(this, e, t, n, c - 1, -c);\n        }\n        let s = n - 1, o = 1, u = 0;\n        for(this[t + s] = e & 255; --s >= 0 && (o *= 256);)e < 0 && u === 0 && this[t + s + 1] !== 0 && (u = 1), this[t + s] = (e / o >> 0) - u & 255;\n        return t + n;\n    }, \"writeIntBE\");\n    f.prototype.writeInt8 = a(function(e, t, n) {\n        return e = +e, t = t >>> 0, n || Y(this, e, t, 1, 127, -128), e < 0 && (e = 255 + e + 1), this[t] = e & 255, t + 1;\n    }, \"writeInt8\");\n    f.prototype.writeInt16LE = a(function(e, t, n) {\n        return e = +e, t = t >>> 0, n || Y(this, e, t, 2, 32767, -32768), this[t] = e & 255, this[t + 1] = e >>> 8, t + 2;\n    }, \"writeInt16LE\");\n    f.prototype.writeInt16BE = a(function(e, t, n) {\n        return e = +e, t = t >>> 0, n || Y(this, e, t, 2, 32767, -32768), this[t] = e >>> 8, this[t + 1] = e & 255, t + 2;\n    }, \"writeInt16BE\");\n    f.prototype.writeInt32LE = a(function(e, t, n) {\n        return e = +e, t = t >>> 0, n || Y(this, e, t, 4, 2147483647, -2147483648), this[t] = e & 255, this[t + 1] = e >>> 8, this[t + 2] = e >>> 16, this[t + 3] = e >>> 24, t + 4;\n    }, \"writeInt32LE\");\n    f.prototype.writeInt32BE = a(function(e, t, n) {\n        return e = +e, t = t >>> 0, n || Y(this, e, t, 4, 2147483647, -2147483648), e < 0 && (e = 4294967295 + e + 1), this[t] = e >>> 24, this[t + 1] = e >>> 16, this[t + 2] = e >>> 8, this[t + 3] = e & 255, t + 4;\n    }, \"writeInt32BE\");\n    f.prototype.writeBigInt64LE = ge(a(function(e, t = 0) {\n        return Nn(this, e, t, -BigInt(\"0x8000000000000000\"), BigInt(\"0x7fffffffffffffff\"));\n    }, \"writeBigInt64LE\"));\n    f.prototype.writeBigInt64BE = ge(a(function(e, t = 0) {\n        return qn(this, e, t, -BigInt(\"0x8000000000000000\"), BigInt(\"0x7fffffffffffffff\"));\n    }, \"writeBigInt64BE\"));\n    function Qn(r, e, t, n, i, s) {\n        if (t + n > r.length) throw new RangeError(\"Index out of range\");\n        if (t < 0) throw new RangeError(\"Index out of range\");\n    }\n    a(Qn, \"checkIEEE754\");\n    function Wn(r, e, t, n, i) {\n        return e = +e, t = t >>> 0, i || Qn(r, e, t, 4, 34028234663852886e22, -34028234663852886e22), Pe.write(r, e, t, n, 23, 4), t + 4;\n    }\n    a(Wn, \"writeFloat\");\n    f.prototype.writeFloatLE = a(function(e, t, n) {\n        return Wn(this, e, t, !0, n);\n    }, \"writeFloatLE\");\n    f.prototype.writeFloatBE = a(function(e, t, n) {\n        return Wn(this, e, t, !1, n);\n    }, \"writeFloatBE\");\n    function jn(r, e, t, n, i) {\n        return e = +e, t = t >>> 0, i || Qn(r, e, t, 8, 17976931348623157e292, -17976931348623157e292), Pe.write(r, e, t, n, 52, 8), t + 8;\n    }\n    a(jn, \"writeDouble\");\n    f.prototype.writeDoubleLE = a(function(e, t, n) {\n        return jn(this, e, t, !0, n);\n    }, \"writeDoubleLE\");\n    f.prototype.writeDoubleBE = a(function(e, t, n) {\n        return jn(this, e, t, !1, n);\n    }, \"writeDoubleBE\");\n    f.prototype.copy = a(function(e, t, n, i) {\n        if (!f.isBuffer(e)) throw new TypeError(\"argument should be a Buffer\");\n        if (n || (n = 0), !i && i !== 0 && (i = this.length), t >= e.length && (t = e.length), t || (t = 0), i > 0 && i < n && (i = n), i === n || e.length === 0 || this.length === 0) return 0;\n        if (t < 0) throw new RangeError(\"targetStart out of bounds\");\n        if (n < 0 || n >= this.length) throw new RangeError(\"Index out of range\");\n        if (i < 0) throw new RangeError(\"sourceEnd out of bounds\");\n        i > this.length && (i = this.length), e.length - t < i - n && (i = e.length - t + n);\n        let s = i - n;\n        return this === e && typeof Uint8Array.prototype.copyWithin == \"function\" ? this.copyWithin(t, n, i) : Uint8Array.prototype.set.call(e, this.subarray(n, i), t), s;\n    }, \"copy\");\n    f.prototype.fill = a(function(e, t, n, i) {\n        if (typeof e == \"string\") {\n            if (typeof t == \"string\" ? (i = t, t = 0, n = this.length) : typeof n == \"string\" && (i = n, n = this.length), i !== void 0 && typeof i != \"string\") throw new TypeError(\"encoding must be a string\");\n            if (typeof i == \"string\" && !f.isEncoding(i)) throw new TypeError(\"Unknown encoding: \" + i);\n            if (e.length === 1) {\n                let o = e.charCodeAt(0);\n                (i === \"utf8\" && o < 128 || i === \"latin1\") && (e = o);\n            }\n        } else typeof e == \"number\" ? e = e & 255 : typeof e == \"boolean\" && (e = Number(e));\n        if (t < 0 || this.length < t || this.length < n) throw new RangeError(\"Out of range index\");\n        if (n <= t) return this;\n        t = t >>> 0, n = n === void 0 ? this.length : n >>> 0, e || (e = 0);\n        let s;\n        if (typeof e == \"number\") for(s = t; s < n; ++s)this[s] = e;\n        else {\n            let o = f.isBuffer(e) ? e : f.from(e, i), u = o.length;\n            if (u === 0) throw new TypeError('The value \"' + e + '\" is invalid for argument \"value\"');\n            for(s = 0; s < n - t; ++s)this[s + t] = o[s % u];\n        }\n        return this;\n    }, \"fill\");\n    var Ie = {};\n    function Ut(r, e, t) {\n        var n;\n        Ie[r] = (n = class extends t {\n            constructor(){\n                super(), Object.defineProperty(this, \"message\", {\n                    value: e.apply(this, arguments),\n                    writable: !0,\n                    configurable: !0\n                }), this.name = `${this.name} [${r}]`, this.stack, delete this.name;\n            }\n            get code() {\n                return r;\n            }\n            set code(s) {\n                Object.defineProperty(this, \"code\", {\n                    configurable: !0,\n                    enumerable: !0,\n                    value: s,\n                    writable: !0\n                });\n            }\n            toString() {\n                return `${this.name} [${r}]: ${this.message}`;\n            }\n        }, a(n, \"NodeError\"), n);\n    }\n    a(Ut, \"E\");\n    Ut(\"ERR_BUFFER_OUT_OF_BOUNDS\", function(r) {\n        return r ? `${r} is outside of buffer bounds` : \"Attempt to access memory outside buffer bounds\";\n    }, RangeError);\n    Ut(\"ERR_INVALID_ARG_TYPE\", function(r, e) {\n        return `The \"${r}\" argum\\\nent must be of type number. Received type ${typeof e}`;\n    }, TypeError);\n    Ut(\"ERR_OUT_OF_RANGE\", function(r, e, t) {\n        let n = `The value of \"${r}\" is out of range.`, i = t;\n        return Number.isInteger(t) && Math.abs(t) > 2 ** 32 ? i = Fn(String(t)) : typeof t == \"bigint\" && (i = String(t), (t > BigInt(2) ** BigInt(32) || t < -(BigInt(2) ** BigInt(32))) && (i = Fn(i)), i += \"n\"), n += ` It\\\n must be ${e}. Received ${i}`, n;\n    }, RangeError);\n    function Fn(r) {\n        let e = \"\", t = r.length, n = r[0] === \"-\" ? 1 : 0;\n        for(; t >= n + 4; t -= 3)e = `_${r.slice(t - 3, t)}${e}`;\n        return `${r.slice(0, t)}${e}`;\n    }\n    a(Fn, \"addNumericalSeparator\");\n    function Fo(r, e, t) {\n        Be(e, \"offset\"), (r[e] === void 0 || r[e + t] === void 0) && We(e, r.length - (t + 1));\n    }\n    a(Fo, \"checkBounds\");\n    function Hn(r, e, t, n, i, s) {\n        if (r > t || r < e) {\n            let o = typeof e == \"bigint\" ? \"n\" : \"\", u;\n            throw s > 3 ? e === 0 || e === BigInt(0) ? u = `>= 0${o} and < 2${o} ** ${(s + 1) * 8}${o}` : u = `>= -(2${o} ** ${(s + 1) * 8 - 1}${o}) and \\\n< 2 ** ${(s + 1) * 8 - 1}${o}` : u = `>= ${e}${o} and <= ${t}${o}`, new Ie.ERR_OUT_OF_RANGE(\"value\", u, r);\n        }\n        Fo(n, i, s);\n    }\n    a(Hn, \"checkIntBI\");\n    function Be(r, e) {\n        if (typeof r != \"number\") throw new Ie.ERR_INVALID_ARG_TYPE(e, \"number\", r);\n    }\n    a(Be, \"validateNumber\");\n    function We(r, e, t) {\n        throw Math.floor(r) !== r ? (Be(r, t), new Ie.ERR_OUT_OF_RANGE(t || \"offset\", \"an integer\", r)) : e < 0 ? new Ie.ERR_BUFFER_OUT_OF_BOUNDS : new Ie.ERR_OUT_OF_RANGE(t || \"offset\", `>= ${t ? 1 : 0} and <= ${e}`, r);\n    }\n    a(We, \"boundsError\");\n    var Mo = /[^+/0-9A-Za-z-_]/g;\n    function Do(r) {\n        if (r = r.split(\"=\")[0], r = r.trim().replace(Mo, \"\"), r.length < 2) return \"\";\n        for(; r.length % 4 !== 0;)r = r + \"=\";\n        return r;\n    }\n    a(Do, \"base64clean\");\n    function Mt(r, e) {\n        e = e || 1 / 0;\n        let t, n = r.length, i = null, s = [];\n        for(let o = 0; o < n; ++o){\n            if (t = r.charCodeAt(o), t > 55295 && t < 57344) {\n                if (!i) {\n                    if (t > 56319) {\n                        (e -= 3) > -1 && s.push(239, 191, 189);\n                        continue;\n                    } else if (o + 1 === n) {\n                        (e -= 3) > -1 && s.push(239, 191, 189);\n                        continue;\n                    }\n                    i = t;\n                    continue;\n                }\n                if (t < 56320) {\n                    (e -= 3) > -1 && s.push(239, 191, 189), i = t;\n                    continue;\n                }\n                t = (i - 55296 << 10 | t - 56320) + 65536;\n            } else i && (e -= 3) > -1 && s.push(239, 191, 189);\n            if (i = null, t < 128) {\n                if ((e -= 1) < 0) break;\n                s.push(t);\n            } else if (t < 2048) {\n                if ((e -= 2) < 0) break;\n                s.push(t >> 6 | 192, t & 63 | 128);\n            } else if (t < 65536) {\n                if ((e -= 3) < 0) break;\n                s.push(t >> 12 | 224, t >> 6 & 63 | 128, t & 63 | 128);\n            } else if (t < 1114112) {\n                if ((e -= 4) < 0) break;\n                s.push(t >> 18 | 240, t >> 12 & 63 | 128, t >> 6 & 63 | 128, t & 63 | 128);\n            } else throw new Error(\"Invalid code point\");\n        }\n        return s;\n    }\n    a(Mt, \"utf8ToBytes\");\n    function ko(r) {\n        let e = [];\n        for(let t = 0; t < r.length; ++t)e.push(r.charCodeAt(t) & 255);\n        return e;\n    }\n    a(ko, \"asciiToBytes\");\n    function Uo(r, e) {\n        let t, n, i, s = [];\n        for(let o = 0; o < r.length && !((e -= 2) < 0); ++o)t = r.charCodeAt(o), n = t >> 8, i = t % 256, s.push(i), s.push(n);\n        return s;\n    }\n    a(Uo, \"utf16leToBytes\");\n    function Gn(r) {\n        return Lt.toByteArray(Do(r));\n    }\n    a(Gn, \"base64ToBytes\");\n    function st(r, e, t, n) {\n        let i;\n        for(i = 0; i < n && !(i + t >= e.length || i >= r.length); ++i)e[i + t] = r[i];\n        return i;\n    }\n    a(st, \"blitBuffer\");\n    function ue(r, e) {\n        return r instanceof e || r != null && r.constructor != null && r.constructor.name != null && r.constructor.name === e.name;\n    }\n    a(ue, \"isInstance\");\n    function Ot(r) {\n        return r !== r;\n    }\n    a(Ot, \"numberIsNaN\");\n    var Oo = function() {\n        let r = \"0123456789abcdef\", e = new Array(256);\n        for(let t = 0; t < 16; ++t){\n            let n = t * 16;\n            for(let i = 0; i < 16; ++i)e[n + i] = r[t] + r[i];\n        }\n        return e;\n    }();\n    function ge(r) {\n        return typeof BigInt > \"u\" ? No : r;\n    }\n    a(ge, \"defineBigIntMethod\");\n    function No() {\n        throw new Error(\"BigInt not supported\");\n    }\n    a(No, \"BufferBigIntNotDefined\");\n});\nvar S, x, v, g, y, m, p = z(()=>{\n    \"use strict\";\n    S = globalThis, x = globalThis.setImmediate ?? ((r)=>setTimeout(r, 0)), v = globalThis.clearImmediate ?? ((r)=>clearTimeout(r)), g = globalThis.crypto ?? {};\n    g.subtle ?? (g.subtle = {});\n    y = typeof globalThis.Buffer == \"function\" && typeof globalThis.Buffer.allocUnsafe == \"function\" ? globalThis.Buffer : $n().Buffer, m = globalThis.process ?? {};\n    m.env ?? (m.env = {});\n    try {\n        m.nextTick(()=>{});\n    } catch  {\n        let e = Promise.resolve();\n        m.nextTick = e.then.bind(e);\n    }\n});\nvar we = I((Xc, Nt)=>{\n    \"use strict\";\n    p();\n    var Re = typeof Reflect == \"object\" ? Reflect : null, Vn = Re && typeof Re.apply == \"function\" ? Re.apply : a(function(e, t, n) {\n        return Function.prototype.apply.call(e, t, n);\n    }, \"ReflectApply\"), ot;\n    Re && typeof Re.ownKeys == \"function\" ? ot = Re.ownKeys : Object.getOwnPropertySymbols ? ot = a(function(e) {\n        return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e));\n    }, \"ReflectOwnKeys\") : ot = a(function(e) {\n        return Object.getOwnPropertyNames(e);\n    }, \"ReflectOwnKeys\");\n    function qo(r) {\n        console && console.warn && console.warn(r);\n    }\n    a(qo, \"ProcessEmitWarning\");\n    var zn = Number.isNaN || a(function(e) {\n        return e !== e;\n    }, \"NumberIsNaN\");\n    function L() {\n        L.init.call(this);\n    }\n    a(L, \"EventEmitter\");\n    Nt.exports = L;\n    Nt.exports.once = Ho;\n    L.EventEmitter = L;\n    L.prototype._events = void 0;\n    L.prototype._eventsCount = 0;\n    L.prototype._maxListeners = void 0;\n    var Kn = 10;\n    function at(r) {\n        if (typeof r != \"function\") throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof r);\n    }\n    a(at, \"checkListener\");\n    Object.defineProperty(L, \"defaultMaxListeners\", {\n        enumerable: !0,\n        get: a(function() {\n            return Kn;\n        }, \"get\"),\n        set: a(function(r) {\n            if (typeof r != \"number\" || r < 0 || zn(r)) throw new RangeError('The value of \"defaultMaxListeners\" is out of range. It must be a non-negative number. Received ' + r + \".\");\n            Kn = r;\n        }, \"set\")\n    });\n    L.init = function() {\n        (this._events === void 0 || this._events === Object.getPrototypeOf(this)._events) && (this._events = Object.create(null), this._eventsCount = 0), this._maxListeners = this._maxListeners || void 0;\n    };\n    L.prototype.setMaxListeners = a(function(e) {\n        if (typeof e != \"number\" || e < 0 || zn(e)) throw new RangeError('The value of \"n\" is out of range. It must be a non-negative number. Received ' + e + \".\");\n        return this._maxListeners = e, this;\n    }, \"setMaxListeners\");\n    function Yn(r) {\n        return r._maxListeners === void 0 ? L.defaultMaxListeners : r._maxListeners;\n    }\n    a(Yn, \"_getMaxListeners\");\n    L.prototype.getMaxListeners = a(function() {\n        return Yn(this);\n    }, \"getMaxListeners\");\n    L.prototype.emit = a(function(e) {\n        for(var t = [], n = 1; n < arguments.length; n++)t.push(arguments[n]);\n        var i = e === \"error\", s = this._events;\n        if (s !== void 0) i = i && s.error === void 0;\n        else if (!i) return !1;\n        if (i) {\n            var o;\n            if (t.length > 0 && (o = t[0]), o instanceof Error) throw o;\n            var u = new Error(\"Unhandled error.\" + (o ? \" (\" + o.message + \")\" : \"\"));\n            throw u.context = o, u;\n        }\n        var c = s[e];\n        if (c === void 0) return !1;\n        if (typeof c == \"function\") Vn(c, this, t);\n        else for(var h = c.length, l = ti(c, h), n = 0; n < h; ++n)Vn(l[n], this, t);\n        return !0;\n    }, \"emit\");\n    function Zn(r, e, t, n) {\n        var i, s, o;\n        if (at(t), s = r._events, s === void 0 ? (s = r._events = Object.create(null), r._eventsCount = 0) : (s.newListener !== void 0 && (r.emit(\"newListener\", e, t.listener ? t.listener : t), s = r._events), o = s[e]), o === void 0) o = s[e] = t, ++r._eventsCount;\n        else if (typeof o == \"function\" ? o = s[e] = n ? [\n            t,\n            o\n        ] : [\n            o,\n            t\n        ] : n ? o.unshift(t) : o.push(t), i = Yn(r), i > 0 && o.length > i && !o.warned) {\n            o.warned = !0;\n            var u = new Error(\"Possible EventEmitter memory leak detected. \" + o.length + \" \" + String(e) + \" listeners added. Use emitter.setMaxListeners() to increase limit\");\n            u.name = \"MaxListenersExceededWarning\", u.emitter = r, u.type = e, u.count = o.length, qo(u);\n        }\n        return r;\n    }\n    a(Zn, \"_addListener\");\n    L.prototype.addListener = a(function(e, t) {\n        return Zn(this, e, t, !1);\n    }, \"addListener\");\n    L.prototype.on = L.prototype.addListener;\n    L.prototype.prependListener = a(function(e, t) {\n        return Zn(this, e, t, !0);\n    }, \"prependListener\");\n    function Qo() {\n        if (!this.fired) return this.target.removeListener(this.type, this.wrapFn), this.fired = !0, arguments.length === 0 ? this.listener.call(this.target) : this.listener.apply(this.target, arguments);\n    }\n    a(Qo, \"onceWrapper\");\n    function Jn(r, e, t) {\n        var n = {\n            fired: !1,\n            wrapFn: void 0,\n            target: r,\n            type: e,\n            listener: t\n        }, i = Qo.bind(n);\n        return i.listener = t, n.wrapFn = i, i;\n    }\n    a(Jn, \"_onceWrap\");\n    L.prototype.once = a(function(e, t) {\n        return at(t), this.on(e, Jn(this, e, t)), this;\n    }, \"once\");\n    L.prototype.prependOnceListener = a(function(e, t) {\n        return at(t), this.prependListener(e, Jn(this, e, t)), this;\n    }, \"prependOnceListener\");\n    L.prototype.removeListener = a(function(e, t) {\n        var n, i, s, o, u;\n        if (at(t), i = this._events, i === void 0) return this;\n        if (n = i[e], n === void 0) return this;\n        if (n === t || n.listener === t) --this._eventsCount === 0 ? this._events = Object.create(null) : (delete i[e], i.removeListener && this.emit(\"removeListener\", e, n.listener || t));\n        else if (typeof n != \"function\") {\n            for(s = -1, o = n.length - 1; o >= 0; o--)if (n[o] === t || n[o].listener === t) {\n                u = n[o].listener, s = o;\n                break;\n            }\n            if (s < 0) return this;\n            s === 0 ? n.shift() : Wo(n, s), n.length === 1 && (i[e] = n[0]), i.removeListener !== void 0 && this.emit(\"removeListener\", e, u || t);\n        }\n        return this;\n    }, \"removeListener\");\n    L.prototype.off = L.prototype.removeListener;\n    L.prototype.removeAllListeners = a(function(e) {\n        var t, n, i;\n        if (n = this._events, n === void 0) return this;\n        if (n.removeListener === void 0) return arguments.length === 0 ? (this._events = Object.create(null), this._eventsCount = 0) : n[e] !== void 0 && (--this._eventsCount === 0 ? this._events = Object.create(null) : delete n[e]), this;\n        if (arguments.length === 0) {\n            var s = Object.keys(n), o;\n            for(i = 0; i < s.length; ++i)o = s[i], o !== \"removeListener\" && this.removeAllListeners(o);\n            return this.removeAllListeners(\"removeListener\"), this._events = Object.create(null), this._eventsCount = 0, this;\n        }\n        if (t = n[e], typeof t == \"function\") this.removeListener(e, t);\n        else if (t !== void 0) for(i = t.length - 1; i >= 0; i--)this.removeListener(e, t[i]);\n        return this;\n    }, \"removeAllListeners\");\n    function Xn(r, e, t) {\n        var n = r._events;\n        if (n === void 0) return [];\n        var i = n[e];\n        return i === void 0 ? [] : typeof i == \"function\" ? t ? [\n            i.listener || i\n        ] : [\n            i\n        ] : t ? jo(i) : ti(i, i.length);\n    }\n    a(Xn, \"_listeners\");\n    L.prototype.listeners = a(function(e) {\n        return Xn(this, e, !0);\n    }, \"listeners\");\n    L.prototype.rawListeners = a(function(e) {\n        return Xn(this, e, !1);\n    }, \"rawListeners\");\n    L.listenerCount = function(r, e) {\n        return typeof r.listenerCount == \"function\" ? r.listenerCount(e) : ei.call(r, e);\n    };\n    L.prototype.listenerCount = ei;\n    function ei(r) {\n        var e = this._events;\n        if (e !== void 0) {\n            var t = e[r];\n            if (typeof t == \"function\") return 1;\n            if (t !== void 0) return t.length;\n        }\n        return 0;\n    }\n    a(ei, \"listenerCount\");\n    L.prototype.eventNames = a(function() {\n        return this._eventsCount > 0 ? ot(this._events) : [];\n    }, \"eventNames\");\n    function ti(r, e) {\n        for(var t = new Array(e), n = 0; n < e; ++n)t[n] = r[n];\n        return t;\n    }\n    a(ti, \"arrayClone\");\n    function Wo(r, e) {\n        for(; e + 1 < r.length; e++)r[e] = r[e + 1];\n        r.pop();\n    }\n    a(Wo, \"spliceOne\");\n    function jo(r) {\n        for(var e = new Array(r.length), t = 0; t < e.length; ++t)e[t] = r[t].listener || r[t];\n        return e;\n    }\n    a(jo, \"unwrapListeners\");\n    function Ho(r, e) {\n        return new Promise(function(t, n) {\n            function i(o) {\n                r.removeListener(e, s), n(o);\n            }\n            a(i, \"errorListener\");\n            function s() {\n                typeof r.removeListener == \"function\" && r.removeListener(\"error\", i), t([].slice.call(arguments));\n            }\n            a(s, \"resolver\"), ri(r, e, s, {\n                once: !0\n            }), e !== \"error\" && Go(r, i, {\n                once: !0\n            });\n        });\n    }\n    a(Ho, \"once\");\n    function Go(r, e, t) {\n        typeof r.on == \"function\" && ri(r, \"error\", e, t);\n    }\n    a(Go, \"addErrorHandlerIfEventEmitter\");\n    function ri(r, e, t, n) {\n        if (typeof r.on == \"function\") n.once ? r.once(e, t) : r.on(e, t);\n        else if (typeof r.addEventListener == \"function\") r.addEventListener(e, a(function i(s) {\n            n.once && r.removeEventListener(e, i), t(s);\n        }, \"wrapListener\"));\n        else throw new TypeError('The \"emitter\" argument must be of type EventEmitter. Received type ' + typeof r);\n    }\n    a(ri, \"eventTargetAgnosticAddListener\");\n});\nvar je = {};\nie(je, {\n    default: ()=>$o\n});\nvar $o, He = z(()=>{\n    \"use strict\";\n    p();\n    $o = {};\n});\nfunction Ge(r) {\n    let e = 1779033703, t = 3144134277, n = 1013904242, i = 2773480762, s = 1359893119, o = 2600822924, u = 528734635, c = 1541459225, h = 0, l = 0, d = [\n        1116352408,\n        1899447441,\n        3049323471,\n        3921009573,\n        961987163,\n        1508970993,\n        2453635748,\n        2870763221,\n        3624381080,\n        310598401,\n        607225278,\n        1426881987,\n        1925078388,\n        2162078206,\n        2614888103,\n        3248222580,\n        3835390401,\n        4022224774,\n        264347078,\n        604807628,\n        770255983,\n        1249150122,\n        1555081692,\n        1996064986,\n        2554220882,\n        2821834349,\n        2952996808,\n        3210313671,\n        3336571891,\n        3584528711,\n        113926993,\n        338241895,\n        666307205,\n        773529912,\n        1294757372,\n        1396182291,\n        1695183700,\n        1986661051,\n        2177026350,\n        2456956037,\n        2730485921,\n        2820302411,\n        3259730800,\n        3345764771,\n        3516065817,\n        3600352804,\n        4094571909,\n        275423344,\n        430227734,\n        506948616,\n        659060556,\n        883997877,\n        958139571,\n        1322822218,\n        1537002063,\n        1747873779,\n        1955562222,\n        2024104815,\n        2227730452,\n        2361852424,\n        2428436474,\n        2756734187,\n        3204031479,\n        3329325298\n    ], b = a((A, w)=>A >>> w | A << 32 - w, \"rrot\"), C = new Uint32Array(64), B = new Uint8Array(64), W = a(()=>{\n        for(let R = 0, G = 0; R < 16; R++, G += 4)C[R] = B[G] << 24 | B[G + 1] << 16 | B[G + 2] << 8 | B[G + 3];\n        for(let R = 16; R < 64; R++){\n            let G = b(C[R - 15], 7) ^ b(C[R - 15], 18) ^ C[R - 15] >>> 3, he = b(C[R - 2], 17) ^ b(C[R - 2], 19) ^ C[R - 2] >>> 10;\n            C[R] = C[R - 16] + G + C[R - 7] + he | 0;\n        }\n        let A = e, w = t, P = n, V = i, k = s, j = o, ce = u, ee = c;\n        for(let R = 0; R < 64; R++){\n            let G = b(k, 6) ^ b(k, 11) ^ b(k, 25), he = k & j ^ ~k & ce, ye = ee + G + he + d[R] + C[R] | 0, xe = b(A, 2) ^ b(A, 13) ^ b(A, 22), me = A & w ^ A & P ^ w & P, se = xe + me | 0;\n            ee = ce, ce = j, j = k, k = V + ye | 0, V = P, P = w, w = A, A = ye + se | 0;\n        }\n        e = e + A | 0, t = t + w | 0, n = n + P | 0, i = i + V | 0, s = s + k | 0, o = o + j | 0, u = u + ce | 0, c = c + ee | 0, l = 0;\n    }, \"process\"), X = a((A)=>{\n        typeof A == \"string\" && (A = new TextEncoder().encode(A));\n        for(let w = 0; w < A.length; w++)B[l++] = A[w], l === 64 && W();\n        h += A.length;\n    }, \"add\"), de = a(()=>{\n        if (B[l++] = 128, l == 64 && W(), l + 8 > 64) {\n            for(; l < 64;)B[l++] = 0;\n            W();\n        }\n        for(; l < 58;)B[l++] = 0;\n        let A = h * 8;\n        B[l++] = A / 1099511627776 & 255, B[l++] = A / 4294967296 & 255, B[l++] = A >>> 24, B[l++] = A >>> 16 & 255, B[l++] = A >>> 8 & 255, B[l++] = A & 255, W();\n        let w = new Uint8Array(32);\n        return w[0] = e >>> 24, w[1] = e >>> 16 & 255, w[2] = e >>> 8 & 255, w[3] = e & 255, w[4] = t >>> 24, w[5] = t >>> 16 & 255, w[6] = t >>> 8 & 255, w[7] = t & 255, w[8] = n >>> 24, w[9] = n >>> 16 & 255, w[10] = n >>> 8 & 255, w[11] = n & 255, w[12] = i >>> 24, w[13] = i >>> 16 & 255, w[14] = i >>> 8 & 255, w[15] = i & 255, w[16] = s >>> 24, w[17] = s >>> 16 & 255, w[18] = s >>> 8 & 255, w[19] = s & 255, w[20] = o >>> 24, w[21] = o >>> 16 & 255, w[22] = o >>> 8 & 255, w[23] = o & 255, w[24] = u >>> 24, w[25] = u >>> 16 & 255, w[26] = u >>> 8 & 255, w[27] = u & 255, w[28] = c >>> 24, w[29] = c >>> 16 & 255, w[30] = c >>> 8 & 255, w[31] = c & 255, w;\n    }, \"digest\");\n    return r === void 0 ? {\n        add: X,\n        digest: de\n    } : (X(r), de());\n}\nvar ni = z(()=>{\n    \"use strict\";\n    p();\n    a(Ge, \"sha256\");\n});\nvar O, $e, ii = z(()=>{\n    \"use strict\";\n    p();\n    O = class O {\n        constructor(){\n            _(this, \"_dataLength\", 0);\n            _(this, \"_bufferLength\", 0);\n            _(this, \"_state\", new Int32Array(4));\n            _(this, \"_buffer\", new ArrayBuffer(68));\n            _(this, \"_buffer8\");\n            _(this, \"_buffer32\");\n            this._buffer8 = new Uint8Array(this._buffer, 0, 68), this._buffer32 = new Uint32Array(this._buffer, 0, 17), this.start();\n        }\n        static hashByteArray(e, t = !1) {\n            return this.onePassHasher.start().appendByteArray(e).end(t);\n        }\n        static hashStr(e, t = !1) {\n            return this.onePassHasher.start().appendStr(e).end(t);\n        }\n        static hashAsciiStr(e, t = !1) {\n            return this.onePassHasher.start().appendAsciiStr(e).end(t);\n        }\n        static _hex(e) {\n            let t = O.hexChars, n = O.hexOut, i, s, o, u;\n            for(u = 0; u < 4; u += 1)for(s = u * 8, i = e[u], o = 0; o < 8; o += 2)n[s + 1 + o] = t.charAt(i & 15), i >>>= 4, n[s + 0 + o] = t.charAt(i & 15), i >>>= 4;\n            return n.join(\"\");\n        }\n        static _md5cycle(e, t) {\n            let n = e[0], i = e[1], s = e[2], o = e[3];\n            n += (i & s | ~i & o) + t[0] - 680876936 | 0, n = (n << 7 | n >>> 25) + i | 0, o += (n & i | ~n & s) + t[1] - 389564586 | 0, o = (o << 12 | o >>> 20) + n | 0, s += (o & n | ~o & i) + t[2] + 606105819 | 0, s = (s << 17 | s >>> 15) + o | 0, i += (s & o | ~s & n) + t[3] - 1044525330 | 0, i = (i << 22 | i >>> 10) + s | 0, n += (i & s | ~i & o) + t[4] - 176418897 | 0, n = (n << 7 | n >>> 25) + i | 0, o += (n & i | ~n & s) + t[5] + 1200080426 | 0, o = (o << 12 | o >>> 20) + n | 0, s += (o & n | ~o & i) + t[6] - 1473231341 | 0, s = (s << 17 | s >>> 15) + o | 0, i += (s & o | ~s & n) + t[7] - 45705983 | 0, i = (i << 22 | i >>> 10) + s | 0, n += (i & s | ~i & o) + t[8] + 1770035416 | 0, n = (n << 7 | n >>> 25) + i | 0, o += (n & i | ~n & s) + t[9] - 1958414417 | 0, o = (o << 12 | o >>> 20) + n | 0, s += (o & n | ~o & i) + t[10] - 42063 | 0, s = (s << 17 | s >>> 15) + o | 0, i += (s & o | ~s & n) + t[11] - 1990404162 | 0, i = (i << 22 | i >>> 10) + s | 0, n += (i & s | ~i & o) + t[12] + 1804603682 | 0, n = (n << 7 | n >>> 25) + i | 0, o += (n & i | ~n & s) + t[13] - 40341101 | 0, o = (o << 12 | o >>> 20) + n | 0, s += (o & n | ~o & i) + t[14] - 1502002290 | 0, s = (s << 17 | s >>> 15) + o | 0, i += (s & o | ~s & n) + t[15] + 1236535329 | 0, i = (i << 22 | i >>> 10) + s | 0, n += (i & o | s & ~o) + t[1] - 165796510 | 0, n = (n << 5 | n >>> 27) + i | 0, o += (n & s | i & ~s) + t[6] - 1069501632 | 0, o = (o << 9 | o >>> 23) + n | 0, s += (o & i | n & ~i) + t[11] + 643717713 | 0, s = (s << 14 | s >>> 18) + o | 0, i += (s & n | o & ~n) + t[0] - 373897302 | 0, i = (i << 20 | i >>> 12) + s | 0, n += (i & o | s & ~o) + t[5] - 701558691 | 0, n = (n << 5 | n >>> 27) + i | 0, o += (n & s | i & ~s) + t[10] + 38016083 | 0, o = (o << 9 | o >>> 23) + n | 0, s += (o & i | n & ~i) + t[15] - 660478335 | 0, s = (s << 14 | s >>> 18) + o | 0, i += (s & n | o & ~n) + t[4] - 405537848 | 0, i = (i << 20 | i >>> 12) + s | 0, n += (i & o | s & ~o) + t[9] + 568446438 | 0, n = (n << 5 | n >>> 27) + i | 0, o += (n & s | i & ~s) + t[14] - 1019803690 | 0, o = (o << 9 | o >>> 23) + n | 0, s += (o & i | n & ~i) + t[3] - 187363961 | 0, s = (s << 14 | s >>> 18) + o | 0, i += (s & n | o & ~n) + t[8] + 1163531501 | 0, i = (i << 20 | i >>> 12) + s | 0, n += (i & o | s & ~o) + t[13] - 1444681467 | 0, n = (n << 5 | n >>> 27) + i | 0, o += (n & s | i & ~s) + t[2] - 51403784 | 0, o = (o << 9 | o >>> 23) + n | 0, s += (o & i | n & ~i) + t[7] + 1735328473 | 0, s = (s << 14 | s >>> 18) + o | 0, i += (s & n | o & ~n) + t[12] - 1926607734 | 0, i = (i << 20 | i >>> 12) + s | 0, n += (i ^ s ^ o) + t[5] - 378558 | 0, n = (n << 4 | n >>> 28) + i | 0, o += (n ^ i ^ s) + t[8] - 2022574463 | 0, o = (o << 11 | o >>> 21) + n | 0, s += (o ^ n ^ i) + t[11] + 1839030562 | 0, s = (s << 16 | s >>> 16) + o | 0, i += (s ^ o ^ n) + t[14] - 35309556 | 0, i = (i << 23 | i >>> 9) + s | 0, n += (i ^ s ^ o) + t[1] - 1530992060 | 0, n = (n << 4 | n >>> 28) + i | 0, o += (n ^ i ^ s) + t[4] + 1272893353 | 0, o = (o << 11 | o >>> 21) + n | 0, s += (o ^ n ^ i) + t[7] - 155497632 | 0, s = (s << 16 | s >>> 16) + o | 0, i += (s ^ o ^ n) + t[10] - 1094730640 | 0, i = (i << 23 | i >>> 9) + s | 0, n += (i ^ s ^ o) + t[13] + 681279174 | 0, n = (n << 4 | n >>> 28) + i | 0, o += (n ^ i ^ s) + t[0] - 358537222 | 0, o = (o << 11 | o >>> 21) + n | 0, s += (o ^ n ^ i) + t[3] - 722521979 | 0, s = (s << 16 | s >>> 16) + o | 0, i += (s ^ o ^ n) + t[6] + 76029189 | 0, i = (i << 23 | i >>> 9) + s | 0, n += (i ^ s ^ o) + t[9] - 640364487 | 0, n = (n << 4 | n >>> 28) + i | 0, o += (n ^ i ^ s) + t[12] - 421815835 | 0, o = (o << 11 | o >>> 21) + n | 0, s += (o ^ n ^ i) + t[15] + 530742520 | 0, s = (s << 16 | s >>> 16) + o | 0, i += (s ^ o ^ n) + t[2] - 995338651 | 0, i = (i << 23 | i >>> 9) + s | 0, n += (s ^ (i | ~o)) + t[0] - 198630844 | 0, n = (n << 6 | n >>> 26) + i | 0, o += (i ^ (n | ~s)) + t[7] + 1126891415 | 0, o = (o << 10 | o >>> 22) + n | 0, s += (n ^ (o | ~i)) + t[14] - 1416354905 | 0, s = (s << 15 | s >>> 17) + o | 0, i += (o ^ (s | ~n)) + t[5] - 57434055 | 0, i = (i << 21 | i >>> 11) + s | 0, n += (s ^ (i | ~o)) + t[12] + 1700485571 | 0, n = (n << 6 | n >>> 26) + i | 0, o += (i ^ (n | ~s)) + t[3] - 1894986606 | 0, o = (o << 10 | o >>> 22) + n | 0, s += (n ^ (o | ~i)) + t[10] - 1051523 | 0, s = (s << 15 | s >>> 17) + o | 0, i += (o ^ (s | ~n)) + t[1] - 2054922799 | 0, i = (i << 21 | i >>> 11) + s | 0, n += (s ^ (i | ~o)) + t[8] + 1873313359 | 0, n = (n << 6 | n >>> 26) + i | 0, o += (i ^ (n | ~s)) + t[15] - 30611744 | 0, o = (o << 10 | o >>> 22) + n | 0, s += (n ^ (o | ~i)) + t[6] - 1560198380 | 0, s = (s << 15 | s >>> 17) + o | 0, i += (o ^ (s | ~n)) + t[13] + 1309151649 | 0, i = (i << 21 | i >>> 11) + s | 0, n += (s ^ (i | ~o)) + t[4] - 145523070 | 0, n = (n << 6 | n >>> 26) + i | 0, o += (i ^ (n | ~s)) + t[11] - 1120210379 | 0, o = (o << 10 | o >>> 22) + n | 0, s += (n ^ (o | ~i)) + t[2] + 718787259 | 0, s = (s << 15 | s >>> 17) + o | 0, i += (o ^ (s | ~n)) + t[9] - 343485551 | 0, i = (i << 21 | i >>> 11) + s | 0, e[0] = n + e[0] | 0, e[1] = i + e[1] | 0, e[2] = s + e[2] | 0, e[3] = o + e[3] | 0;\n        }\n        start() {\n            return this._dataLength = 0, this._bufferLength = 0, this._state.set(O.stateIdentity), this;\n        }\n        appendStr(e) {\n            let t = this._buffer8, n = this._buffer32, i = this._bufferLength, s, o;\n            for(o = 0; o < e.length; o += 1){\n                if (s = e.charCodeAt(o), s < 128) t[i++] = s;\n                else if (s < 2048) t[i++] = (s >>> 6) + 192, t[i++] = s & 63 | 128;\n                else if (s < 55296 || s > 56319) t[i++] = (s >>> 12) + 224, t[i++] = s >>> 6 & 63 | 128, t[i++] = s & 63 | 128;\n                else {\n                    if (s = (s - 55296) * 1024 + (e.charCodeAt(++o) - 56320) + 65536, s > 1114111) throw new Error(\"Unicode standard supports code points up to U+10FFFF\");\n                    t[i++] = (s >>> 18) + 240, t[i++] = s >>> 12 & 63 | 128, t[i++] = s >>> 6 & 63 | 128, t[i++] = s & 63 | 128;\n                }\n                i >= 64 && (this._dataLength += 64, O._md5cycle(this._state, n), i -= 64, n[0] = n[16]);\n            }\n            return this._bufferLength = i, this;\n        }\n        appendAsciiStr(e) {\n            let t = this._buffer8, n = this._buffer32, i = this._bufferLength, s, o = 0;\n            for(;;){\n                for(s = Math.min(e.length - o, 64 - i); s--;)t[i++] = e.charCodeAt(o++);\n                if (i < 64) break;\n                this._dataLength += 64, O._md5cycle(this._state, n), i = 0;\n            }\n            return this._bufferLength = i, this;\n        }\n        appendByteArray(e) {\n            let t = this._buffer8, n = this._buffer32, i = this._bufferLength, s, o = 0;\n            for(;;){\n                for(s = Math.min(e.length - o, 64 - i); s--;)t[i++] = e[o++];\n                if (i < 64) break;\n                this._dataLength += 64, O._md5cycle(this._state, n), i = 0;\n            }\n            return this._bufferLength = i, this;\n        }\n        getState() {\n            let e = this._state;\n            return {\n                buffer: String.fromCharCode.apply(null, Array.from(this._buffer8)),\n                buflen: this._bufferLength,\n                length: this._dataLength,\n                state: [\n                    e[0],\n                    e[1],\n                    e[2],\n                    e[3]\n                ]\n            };\n        }\n        setState(e) {\n            let t = e.buffer, n = e.state, i = this._state, s;\n            for(this._dataLength = e.length, this._bufferLength = e.buflen, i[0] = n[0], i[1] = n[1], i[2] = n[2], i[3] = n[3], s = 0; s < t.length; s += 1)this._buffer8[s] = t.charCodeAt(s);\n        }\n        end(e = !1) {\n            let t = this._bufferLength, n = this._buffer8, i = this._buffer32, s = (t >> 2) + 1;\n            this._dataLength += t;\n            let o = this._dataLength * 8;\n            if (n[t] = 128, n[t + 1] = n[t + 2] = n[t + 3] = 0, i.set(O.buffer32Identity.subarray(s), s), t > 55 && (O._md5cycle(this._state, i), i.set(O.buffer32Identity)), o <= 4294967295) i[14] = o;\n            else {\n                let u = o.toString(16).match(/(.*?)(.{0,8})$/);\n                if (u === null) return;\n                let c = parseInt(u[2], 16), h = parseInt(u[1], 16) || 0;\n                i[14] = c, i[15] = h;\n            }\n            return O._md5cycle(this._state, i), e ? this._state : O._hex(this._state);\n        }\n    };\n    a(O, \"Md5\"), _(O, \"stateIdentity\", new Int32Array([\n        1732584193,\n        -271733879,\n        -1732584194,\n        271733878\n    ])), _(O, \"buffer32Identity\", new Int32Array([\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0\n    ])), _(O, \"hexChars\", \"0123456789abcdef\"), _(O, \"hexOut\", []), _(O, \"onePassHasher\", new O);\n    $e = O;\n});\nvar qt = {};\nie(qt, {\n    createHash: ()=>Ko,\n    createHmac: ()=>zo,\n    randomBytes: ()=>Vo\n});\nfunction Vo(r) {\n    return g.getRandomValues(y.alloc(r));\n}\nfunction Ko(r) {\n    if (r === \"sha256\") return {\n        update: a(function(e) {\n            return {\n                digest: a(function() {\n                    return y.from(Ge(e));\n                }, \"digest\")\n            };\n        }, \"update\")\n    };\n    if (r === \"md5\") return {\n        update: a(function(e) {\n            return {\n                digest: a(function() {\n                    return typeof e == \"string\" ? $e.hashStr(e) : $e.hashByteArray(e);\n                }, \"digest\")\n            };\n        }, \"update\")\n    };\n    throw new Error(`Hash type '${r}' not supported`);\n}\nfunction zo(r, e) {\n    if (r !== \"sha256\") throw new Error(`Only sha256 is supported (requested: '${r}')`);\n    return {\n        update: a(function(t) {\n            return {\n                digest: a(function() {\n                    typeof e == \"string\" && (e = new TextEncoder().encode(e)), typeof t == \"string\" && (t = new TextEncoder().encode(t));\n                    let n = e.length;\n                    if (n > 64) e = Ge(e);\n                    else if (n < 64) {\n                        let c = new Uint8Array(64);\n                        c.set(e), e = c;\n                    }\n                    let i = new Uint8Array(64), s = new Uint8Array(64);\n                    for(let c = 0; c < 64; c++)i[c] = 54 ^ e[c], s[c] = 92 ^ e[c];\n                    let o = new Uint8Array(t.length + 64);\n                    o.set(i, 0), o.set(t, 64);\n                    let u = new Uint8Array(96);\n                    return u.set(s, 0), u.set(Ge(o), 64), y.from(Ge(u));\n                }, \"digest\")\n            };\n        }, \"update\")\n    };\n}\nvar Qt = z(()=>{\n    \"use strict\";\n    p();\n    ni();\n    ii();\n    a(Vo, \"randomBytes\");\n    a(Ko, \"createHash\");\n    a(zo, \"createHmac\");\n});\nvar jt = I((si)=>{\n    \"use strict\";\n    p();\n    si.parse = function(r, e) {\n        return new Wt(r, e).parse();\n    };\n    var ut = class ut {\n        constructor(e, t){\n            this.source = e, this.transform = t || Yo, this.position = 0, this.entries = [], this.recorded = [], this.dimension = 0;\n        }\n        isEof() {\n            return this.position >= this.source.length;\n        }\n        nextCharacter() {\n            var e = this.source[this.position++];\n            return e === \"\\\\\" ? {\n                value: this.source[this.position++],\n                escaped: !0\n            } : {\n                value: e,\n                escaped: !1\n            };\n        }\n        record(e) {\n            this.recorded.push(e);\n        }\n        newEntry(e) {\n            var t;\n            (this.recorded.length > 0 || e) && (t = this.recorded.join(\"\"), t === \"NULL\" && !e && (t = null), t !== null && (t = this.transform(t)), this.entries.push(t), this.recorded = []);\n        }\n        consumeDimensions() {\n            if (this.source[0] === \"[\") for(; !this.isEof();){\n                var e = this.nextCharacter();\n                if (e.value === \"=\") break;\n            }\n        }\n        parse(e) {\n            var t, n, i;\n            for(this.consumeDimensions(); !this.isEof();)if (t = this.nextCharacter(), t.value === \"{\" && !i) this.dimension++, this.dimension > 1 && (n = new ut(this.source.substr(this.position - 1), this.transform), this.entries.push(n.parse(!0)), this.position += n.position - 2);\n            else if (t.value === \"}\" && !i) {\n                if (this.dimension--, !this.dimension && (this.newEntry(), e)) return this.entries;\n            } else t.value === '\"' && !t.escaped ? (i && this.newEntry(!0), i = !i) : t.value === \",\" && !i ? this.newEntry() : this.record(t.value);\n            if (this.dimension !== 0) throw new Error(\"array dimension not balanced\");\n            return this.entries;\n        }\n    };\n    a(ut, \"ArrayParser\");\n    var Wt = ut;\n    function Yo(r) {\n        return r;\n    }\n    a(Yo, \"identity\");\n});\nvar Ht = I((mh, oi)=>{\n    p();\n    var Zo = jt();\n    oi.exports = {\n        create: a(function(r, e) {\n            return {\n                parse: a(function() {\n                    return Zo.parse(r, e);\n                }, \"parse\")\n            };\n        }, \"create\")\n    };\n});\nvar ci = I((bh, ui)=>{\n    \"use strict\";\n    p();\n    var Jo = /(\\d{1,})-(\\d{2})-(\\d{2}) (\\d{2}):(\\d{2}):(\\d{2})(\\.\\d{1,})?.*?( BC)?$/, Xo = /^(\\d{1,})-(\\d{2})-(\\d{2})( BC)?$/, ea = /([Z+-])(\\d{2})?:?(\\d{2})?:?(\\d{2})?/, ta = /^-?infinity$/;\n    ui.exports = a(function(e) {\n        if (ta.test(e)) return Number(e.replace(\"i\", \"I\"));\n        var t = Jo.exec(e);\n        if (!t) return ra(e) || null;\n        var n = !!t[8], i = parseInt(t[1], 10);\n        n && (i = ai(i));\n        var s = parseInt(t[2], 10) - 1, o = t[3], u = parseInt(t[4], 10), c = parseInt(t[5], 10), h = parseInt(t[6], 10), l = t[7];\n        l = l ? 1e3 * parseFloat(l) : 0;\n        var d, b = na(e);\n        return b != null ? (d = new Date(Date.UTC(i, s, o, u, c, h, l)), Gt(i) && d.setUTCFullYear(i), b !== 0 && d.setTime(d.getTime() - b)) : (d = new Date(i, s, o, u, c, h, l), Gt(i) && d.setFullYear(i)), d;\n    }, \"parseDate\");\n    function ra(r) {\n        var e = Xo.exec(r);\n        if (e) {\n            var t = parseInt(e[1], 10), n = !!e[4];\n            n && (t = ai(t));\n            var i = parseInt(e[2], 10) - 1, s = e[3], o = new Date(t, i, s);\n            return Gt(t) && o.setFullYear(t), o;\n        }\n    }\n    a(ra, \"getDate\");\n    function na(r) {\n        if (r.endsWith(\"+00\")) return 0;\n        var e = ea.exec(r.split(\" \")[1]);\n        if (e) {\n            var t = e[1];\n            if (t === \"Z\") return 0;\n            var n = t === \"-\" ? -1 : 1, i = parseInt(e[2], 10) * 3600 + parseInt(e[3] || 0, 10) * 60 + parseInt(e[4] || 0, 10);\n            return i * n * 1e3;\n        }\n    }\n    a(na, \"timeZoneOffset\");\n    function ai(r) {\n        return -(r - 1);\n    }\n    a(ai, \"bcYearToNegativeYear\");\n    function Gt(r) {\n        return r >= 0 && r < 100;\n    }\n    a(Gt, \"is0To99\");\n});\nvar li = I((vh, hi)=>{\n    p();\n    hi.exports = sa;\n    var ia = Object.prototype.hasOwnProperty;\n    function sa(r) {\n        for(var e = 1; e < arguments.length; e++){\n            var t = arguments[e];\n            for(var n in t)ia.call(t, n) && (r[n] = t[n]);\n        }\n        return r;\n    }\n    a(sa, \"extend\");\n});\nvar di = I((Ah, pi)=>{\n    \"use strict\";\n    p();\n    var oa = li();\n    pi.exports = Fe;\n    function Fe(r) {\n        if (!(this instanceof Fe)) return new Fe(r);\n        oa(this, wa(r));\n    }\n    a(Fe, \"PostgresInterval\");\n    var aa = [\n        \"seconds\",\n        \"minutes\",\n        \"hours\",\n        \"days\",\n        \"months\",\n        \"years\"\n    ];\n    Fe.prototype.toPostgres = function() {\n        var r = aa.filter(this.hasOwnProperty, this);\n        return this.milliseconds && r.indexOf(\"seconds\") < 0 && r.push(\"seconds\"), r.length === 0 ? \"0\" : r.map(function(e) {\n            var t = this[e] || 0;\n            return e === \"seconds\" && this.milliseconds && (t = (t + this.milliseconds / 1e3).toFixed(6).replace(/\\.?0+$/, \"\")), t + \" \" + e;\n        }, this).join(\" \");\n    };\n    var ua = {\n        years: \"Y\",\n        months: \"M\",\n        days: \"D\",\n        hours: \"H\",\n        minutes: \"M\",\n        seconds: \"S\"\n    }, ca = [\n        \"years\",\n        \"months\",\n        \"days\"\n    ], ha = [\n        \"hours\",\n        \"minutes\",\n        \"seconds\"\n    ];\n    Fe.prototype.toISOString = Fe.prototype.toISO = function() {\n        var r = ca.map(t, this).join(\"\"), e = ha.map(t, this).join(\"\");\n        return \"P\" + r + \"T\" + e;\n        function t(n) {\n            var i = this[n] || 0;\n            return n === \"seconds\" && this.milliseconds && (i = (i + this.milliseconds / 1e3).toFixed(6).replace(/0+$/, \"\")), i + ua[n];\n        }\n    };\n    var $t = \"([+-]?\\\\d+)\", la = $t + \"\\\\s+years?\", fa = $t + \"\\\\s+mons?\", pa = $t + \"\\\\s+days?\", da = \"([+-])?([\\\\d]*):(\\\\d\\\\d):(\\\\d\\\\d)\\\\.?(\\\\d{1,6})?\", ya = new RegExp([\n        la,\n        fa,\n        pa,\n        da\n    ].map(function(r) {\n        return \"(\" + r + \")?\";\n    }).join(\"\\\\s*\")), fi = {\n        years: 2,\n        months: 4,\n        days: 6,\n        hours: 9,\n        minutes: 10,\n        seconds: 11,\n        milliseconds: 12\n    }, ma = [\n        \"hours\",\n        \"minutes\",\n        \"seconds\",\n        \"milliseconds\"\n    ];\n    function ga(r) {\n        var e = r + \"000000\".slice(r.length);\n        return parseInt(e, 10) / 1e3;\n    }\n    a(ga, \"parseMilliseconds\");\n    function wa(r) {\n        if (!r) return {};\n        var e = ya.exec(r), t = e[8] === \"-\";\n        return Object.keys(fi).reduce(function(n, i) {\n            var s = fi[i], o = e[s];\n            return !o || (o = i === \"milliseconds\" ? ga(o) : parseInt(o, 10), !o) || (t && ~ma.indexOf(i) && (o *= -1), n[i] = o), n;\n        }, {});\n    }\n    a(wa, \"parse\");\n});\nvar mi = I((Ih, yi)=>{\n    \"use strict\";\n    p();\n    yi.exports = a(function(e) {\n        if (/^\\\\x/.test(e)) return new y(e.substr(2), \"hex\");\n        for(var t = \"\", n = 0; n < e.length;)if (e[n] !== \"\\\\\") t += e[n], ++n;\n        else if (/[0-7]{3}/.test(e.substr(n + 1, 3))) t += String.fromCharCode(parseInt(e.substr(n + 1, 3), 8)), n += 4;\n        else {\n            for(var i = 1; n + i < e.length && e[n + i] === \"\\\\\";)i++;\n            for(var s = 0; s < Math.floor(i / 2); ++s)t += \"\\\\\";\n            n += Math.floor(i / 2) * 2;\n        }\n        return new y(t, \"binary\");\n    }, \"parseBytea\");\n});\nvar Ei = I((Lh, vi)=>{\n    p();\n    var Ve = jt(), Ke = Ht(), ct = ci(), wi = di(), bi = mi();\n    function ht(r) {\n        return a(function(t) {\n            return t === null ? t : r(t);\n        }, \"nullAllowed\");\n    }\n    a(ht, \"allowNull\");\n    function Si(r) {\n        return r === null ? r : r === \"TRUE\" || r === \"t\" || r === \"true\" || r === \"y\" || r === \"yes\" || r === \"on\" || r === \"1\";\n    }\n    a(Si, \"parseBool\");\n    function ba(r) {\n        return r ? Ve.parse(r, Si) : null;\n    }\n    a(ba, \"parseBoolArray\");\n    function Sa(r) {\n        return parseInt(r, 10);\n    }\n    a(Sa, \"parseBaseTenInt\");\n    function Vt(r) {\n        return r ? Ve.parse(r, ht(Sa)) : null;\n    }\n    a(Vt, \"parseIntegerArray\");\n    function xa(r) {\n        return r ? Ve.parse(r, ht(function(e) {\n            return xi(e).trim();\n        })) : null;\n    }\n    a(xa, \"parseBigIntegerArray\");\n    var va = a(function(r) {\n        if (!r) return null;\n        var e = Ke.create(r, function(t) {\n            return t !== null && (t = Zt(t)), t;\n        });\n        return e.parse();\n    }, \"parsePointArray\"), Kt = a(function(r) {\n        if (!r) return null;\n        var e = Ke.create(r, function(t) {\n            return t !== null && (t = parseFloat(t)), t;\n        });\n        return e.parse();\n    }, \"parseFloatArray\"), re = a(function(r) {\n        if (!r) return null;\n        var e = Ke.create(r);\n        return e.parse();\n    }, \"parseStringArray\"), zt = a(function(r) {\n        if (!r) return null;\n        var e = Ke.create(r, function(t) {\n            return t !== null && (t = ct(t)), t;\n        });\n        return e.parse();\n    }, \"parseDateArray\"), Ea = a(function(r) {\n        if (!r) return null;\n        var e = Ke.create(r, function(t) {\n            return t !== null && (t = wi(t)), t;\n        });\n        return e.parse();\n    }, \"parseIntervalArray\"), _a = a(function(r) {\n        return r ? Ve.parse(r, ht(bi)) : null;\n    }, \"parseByteAArray\"), Yt = a(function(r) {\n        return parseInt(r, 10);\n    }, \"parseInteger\"), xi = a(function(r) {\n        var e = String(r);\n        return /^\\d+$/.test(e) ? e : r;\n    }, \"parseBigInteger\"), gi = a(function(r) {\n        return r ? Ve.parse(r, ht(JSON.parse)) : null;\n    }, \"parseJsonArray\"), Zt = a(function(r) {\n        return r[0] !== \"(\" ? null : (r = r.substring(1, r.length - 1).split(\",\"), {\n            x: parseFloat(r[0]),\n            y: parseFloat(r[1])\n        });\n    }, \"parsePoint\"), Aa = a(function(r) {\n        if (r[0] !== \"<\" && r[1] !== \"(\") return null;\n        for(var e = \"(\", t = \"\", n = !1, i = 2; i < r.length - 1; i++){\n            if (n || (e += r[i]), r[i] === \")\") {\n                n = !0;\n                continue;\n            } else if (!n) continue;\n            r[i] !== \",\" && (t += r[i]);\n        }\n        var s = Zt(e);\n        return s.radius = parseFloat(t), s;\n    }, \"parseCircle\"), Ca = a(function(r) {\n        r(20, xi), r(21, Yt), r(23, Yt), r(26, Yt), r(700, parseFloat), r(701, parseFloat), r(16, Si), r(1082, ct), r(1114, ct), r(1184, ct), r(600, Zt), r(651, re), r(718, Aa), r(1e3, ba), r(1001, _a), r(1005, Vt), r(1007, Vt), r(1028, Vt), r(1016, xa), r(1017, va), r(1021, Kt), r(1022, Kt), r(1231, Kt), r(1014, re), r(1015, re), r(1008, re), r(1009, re), r(1040, re), r(1041, re), r(1115, zt), r(1182, zt), r(1185, zt), r(1186, wi), r(1187, Ea), r(17, bi), r(114, JSON.parse.bind(JSON)), r(3802, JSON.parse.bind(JSON)), r(199, gi), r(3807, gi), r(3907, re), r(2951, re), r(791, re), r(1183, re), r(1270, re);\n    }, \"init\");\n    vi.exports = {\n        init: Ca\n    };\n});\nvar Ai = I((Mh, _i)=>{\n    \"use strict\";\n    p();\n    var Z = 1e6;\n    function Ta(r) {\n        var e = r.readInt32BE(0), t = r.readUInt32BE(4), n = \"\";\n        e < 0 && (e = ~e + (t === 0), t = ~t + 1 >>> 0, n = \"-\");\n        var i = \"\", s, o, u, c, h, l;\n        {\n            if (s = e % Z, e = e / Z >>> 0, o = 4294967296 * s + t, t = o / Z >>> 0, u = \"\" + (o - Z * t), t === 0 && e === 0) return n + u + i;\n            for(c = \"\", h = 6 - u.length, l = 0; l < h; l++)c += \"0\";\n            i = c + u + i;\n        }\n        {\n            if (s = e % Z, e = e / Z >>> 0, o = 4294967296 * s + t, t = o / Z >>> 0, u = \"\" + (o - Z * t), t === 0 && e === 0) return n + u + i;\n            for(c = \"\", h = 6 - u.length, l = 0; l < h; l++)c += \"0\";\n            i = c + u + i;\n        }\n        {\n            if (s = e % Z, e = e / Z >>> 0, o = 4294967296 * s + t, t = o / Z >>> 0, u = \"\" + (o - Z * t), t === 0 && e === 0) return n + u + i;\n            for(c = \"\", h = 6 - u.length, l = 0; l < h; l++)c += \"0\";\n            i = c + u + i;\n        }\n        return s = e % Z, o = 4294967296 * s + t, u = \"\" + o % Z, n + u + i;\n    }\n    a(Ta, \"readInt8\");\n    _i.exports = Ta;\n});\nvar Bi = I((Uh, Pi)=>{\n    p();\n    var Ia = Ai(), F = a(function(r, e, t, n, i) {\n        t = t || 0, n = n || !1, i = i || function(C, B, W) {\n            return C * Math.pow(2, W) + B;\n        };\n        var s = t >> 3, o = a(function(C) {\n            return n ? ~C & 255 : C;\n        }, \"inv\"), u = 255, c = 8 - t % 8;\n        e < c && (u = 255 << 8 - e & 255, c = e), t && (u = u >> t % 8);\n        var h = 0;\n        t % 8 + e >= 8 && (h = i(0, o(r[s]) & u, c));\n        for(var l = e + t >> 3, d = s + 1; d < l; d++)h = i(h, o(r[d]), 8);\n        var b = (e + t) % 8;\n        return b > 0 && (h = i(h, o(r[l]) >> 8 - b, b)), h;\n    }, \"parseBits\"), Ii = a(function(r, e, t) {\n        var n = Math.pow(2, t - 1) - 1, i = F(r, 1), s = F(r, t, 1);\n        if (s === 0) return 0;\n        var o = 1, u = a(function(h, l, d) {\n            h === 0 && (h = 1);\n            for(var b = 1; b <= d; b++)o /= 2, (l & 1 << d - b) > 0 && (h += o);\n            return h;\n        }, \"parsePrecisionBits\"), c = F(r, e, t + 1, !1, u);\n        return s == Math.pow(2, t + 1) - 1 ? c === 0 ? i === 0 ? 1 / 0 : -1 / 0 : NaN : (i === 0 ? 1 : -1) * Math.pow(2, s - n) * c;\n    }, \"parseFloatFromBits\"), Pa = a(function(r) {\n        return F(r, 1) == 1 ? -1 * (F(r, 15, 1, !0) + 1) : F(r, 15, 1);\n    }, \"parseInt16\"), Ci = a(function(r) {\n        return F(r, 1) == 1 ? -1 * (F(r, 31, 1, !0) + 1) : F(r, 31, 1);\n    }, \"parseInt32\"), Ba = a(function(r) {\n        return Ii(r, 23, 8);\n    }, \"parseFloat32\"), La = a(function(r) {\n        return Ii(r, 52, 11);\n    }, \"parseFloat64\"), Ra = a(function(r) {\n        var e = F(r, 16, 32);\n        if (e == 49152) return NaN;\n        for(var t = Math.pow(1e4, F(r, 16, 16)), n = 0, i = [], s = F(r, 16), o = 0; o < s; o++)n += F(r, 16, 64 + 16 * o) * t, t /= 1e4;\n        var u = Math.pow(10, F(r, 16, 48));\n        return (e === 0 ? 1 : -1) * Math.round(n * u) / u;\n    }, \"parseNumeric\"), Ti = a(function(r, e) {\n        var t = F(e, 1), n = F(e, 63, 1), i = new Date((t === 0 ? 1 : -1) * n / 1e3 + 9466848e5);\n        return r || i.setTime(i.getTime() + i.getTimezoneOffset() * 6e4), i.usec = n % 1e3, i.getMicroSeconds = function() {\n            return this.usec;\n        }, i.setMicroSeconds = function(s) {\n            this.usec = s;\n        }, i.getUTCMicroSeconds = function() {\n            return this.usec;\n        }, i;\n    }, \"parseDate\"), ze = a(function(r) {\n        for(var e = F(r, 32), t = F(r, 32, 32), n = F(r, 32, 64), i = 96, s = [], o = 0; o < e; o++)s[o] = F(r, 32, i), i += 32, i += 32;\n        var u = a(function(h) {\n            var l = F(r, 32, i);\n            if (i += 32, l == 4294967295) return null;\n            var d;\n            if (h == 23 || h == 20) return d = F(r, l * 8, i), i += l * 8, d;\n            if (h == 25) return d = r.toString(this.encoding, i >> 3, (i += l << 3) >> 3), d;\n            console.log(\"ERROR: ElementType not implemented: \" + h);\n        }, \"parseElement\"), c = a(function(h, l) {\n            var d = [], b;\n            if (h.length > 1) {\n                var C = h.shift();\n                for(b = 0; b < C; b++)d[b] = c(h, l);\n                h.unshift(C);\n            } else for(b = 0; b < h[0]; b++)d[b] = u(l);\n            return d;\n        }, \"parse\");\n        return c(s, n);\n    }, \"parseArray\"), Fa = a(function(r) {\n        return r.toString(\"utf8\");\n    }, \"parseText\"), Ma = a(function(r) {\n        return r === null ? null : F(r, 8) > 0;\n    }, \"parseBool\"), Da = a(function(r) {\n        r(20, Ia), r(21, Pa), r(23, Ci), r(26, Ci), r(1700, Ra), r(700, Ba), r(701, La), r(16, Ma), r(1114, Ti.bind(null, !1)), r(1184, Ti.bind(null, !0)), r(1e3, ze), r(1007, ze), r(1016, ze), r(1008, ze), r(1009, ze), r(25, Fa);\n    }, \"init\");\n    Pi.exports = {\n        init: Da\n    };\n});\nvar Ri = I((qh, Li)=>{\n    p();\n    Li.exports = {\n        BOOL: 16,\n        BYTEA: 17,\n        CHAR: 18,\n        INT8: 20,\n        INT2: 21,\n        INT4: 23,\n        REGPROC: 24,\n        TEXT: 25,\n        OID: 26,\n        TID: 27,\n        XID: 28,\n        CID: 29,\n        JSON: 114,\n        XML: 142,\n        PG_NODE_TREE: 194,\n        SMGR: 210,\n        PATH: 602,\n        POLYGON: 604,\n        CIDR: 650,\n        FLOAT4: 700,\n        FLOAT8: 701,\n        ABSTIME: 702,\n        RELTIME: 703,\n        TINTERVAL: 704,\n        CIRCLE: 718,\n        MACADDR8: 774,\n        MONEY: 790,\n        MACADDR: 829,\n        INET: 869,\n        ACLITEM: 1033,\n        BPCHAR: 1042,\n        VARCHAR: 1043,\n        DATE: 1082,\n        TIME: 1083,\n        TIMESTAMP: 1114,\n        TIMESTAMPTZ: 1184,\n        INTERVAL: 1186,\n        TIMETZ: 1266,\n        BIT: 1560,\n        VARBIT: 1562,\n        NUMERIC: 1700,\n        REFCURSOR: 1790,\n        REGPROCEDURE: 2202,\n        REGOPER: 2203,\n        REGOPERATOR: 2204,\n        REGCLASS: 2205,\n        REGTYPE: 2206,\n        UUID: 2950,\n        TXID_SNAPSHOT: 2970,\n        PG_LSN: 3220,\n        PG_NDISTINCT: 3361,\n        PG_DEPENDENCIES: 3402,\n        TSVECTOR: 3614,\n        TSQUERY: 3615,\n        GTSVECTOR: 3642,\n        REGCONFIG: 3734,\n        REGDICTIONARY: 3769,\n        JSONB: 3802,\n        REGNAMESPACE: 4089,\n        REGROLE: 4096\n    };\n});\nvar Je = I((Ze)=>{\n    p();\n    var ka = Ei(), Ua = Bi(), Oa = Ht(), Na = Ri();\n    Ze.getTypeParser = qa;\n    Ze.setTypeParser = Qa;\n    Ze.arrayParser = Oa;\n    Ze.builtins = Na;\n    var Ye = {\n        text: {},\n        binary: {}\n    };\n    function Fi(r) {\n        return String(r);\n    }\n    a(Fi, \"noParse\");\n    function qa(r, e) {\n        return e = e || \"text\", Ye[e] && Ye[e][r] || Fi;\n    }\n    a(qa, \"getTypeParser\");\n    function Qa(r, e, t) {\n        typeof e == \"function\" && (t = e, e = \"text\"), Ye[e][r] = t;\n    }\n    a(Qa, \"setTypeParser\");\n    ka.init(function(r, e) {\n        Ye.text[r] = e;\n    });\n    Ua.init(function(r, e) {\n        Ye.binary[r] = e;\n    });\n});\nvar Xe = I((Gh, Jt)=>{\n    \"use strict\";\n    p();\n    Jt.exports = {\n        host: \"localhost\",\n        user: m.platform === \"win32\" ? m.env.USERNAME : m.env.USER,\n        database: void 0,\n        password: null,\n        connectionString: void 0,\n        port: 5432,\n        rows: 0,\n        binary: !1,\n        max: 10,\n        idleTimeoutMillis: 3e4,\n        client_encoding: \"\",\n        ssl: !1,\n        application_name: void 0,\n        fallback_application_name: void 0,\n        options: void 0,\n        parseInputDatesAsUTC: !1,\n        statement_timeout: !1,\n        lock_timeout: !1,\n        idle_in_transaction_session_timeout: !1,\n        query_timeout: !1,\n        connect_timeout: 0,\n        keepalives: 1,\n        keepalives_idle: 0\n    };\n    var Me = Je(), Wa = Me.getTypeParser(20, \"text\"), ja = Me.getTypeParser(1016, \"text\");\n    Jt.exports.__defineSetter__(\"parseInt8\", function(r) {\n        Me.setTypeParser(20, \"text\", r ? Me.getTypeParser(23, \"text\") : Wa), Me.setTypeParser(1016, \"text\", r ? Me.getTypeParser(1007, \"text\") : ja);\n    });\n});\nvar et = I((Vh, Di)=>{\n    \"use strict\";\n    p();\n    var Ha = (Qt(), N(qt)), Ga = Xe();\n    function $a(r) {\n        var e = r.replace(/\\\\/g, \"\\\\\\\\\").replace(/\"/g, '\\\\\"');\n        return '\"' + e + '\"';\n    }\n    a($a, \"escapeElement\");\n    function Mi(r) {\n        for(var e = \"{\", t = 0; t < r.length; t++)t > 0 && (e = e + \",\"), r[t] === null || typeof r[t] > \"u\" ? e = e + \"NULL\" : Array.isArray(r[t]) ? e = e + Mi(r[t]) : r[t] instanceof y ? e += \"\\\\\\\\x\" + r[t].toString(\"hex\") : e += $a(lt(r[t]));\n        return e = e + \"}\", e;\n    }\n    a(Mi, \"arrayString\");\n    var lt = a(function(r, e) {\n        if (r == null) return null;\n        if (r instanceof y) return r;\n        if (ArrayBuffer.isView(r)) {\n            var t = y.from(r.buffer, r.byteOffset, r.byteLength);\n            return t.length === r.byteLength ? t : t.slice(r.byteOffset, r.byteOffset + r.byteLength);\n        }\n        return r instanceof Date ? Ga.parseInputDatesAsUTC ? za(r) : Ka(r) : Array.isArray(r) ? Mi(r) : typeof r == \"object\" ? Va(r, e) : r.toString();\n    }, \"prepareValue\");\n    function Va(r, e) {\n        if (r && typeof r.toPostgres == \"function\") {\n            if (e = e || [], e.indexOf(r) !== -1) throw new Error('circular reference detected while preparing \"' + r + '\" for query');\n            return e.push(r), lt(r.toPostgres(lt), e);\n        }\n        return JSON.stringify(r);\n    }\n    a(Va, \"prepareObject\");\n    function H(r, e) {\n        for(r = \"\" + r; r.length < e;)r = \"0\" + r;\n        return r;\n    }\n    a(H, \"pad\");\n    function Ka(r) {\n        var e = -r.getTimezoneOffset(), t = r.getFullYear(), n = t < 1;\n        n && (t = Math.abs(t) + 1);\n        var i = H(t, 4) + \"-\" + H(r.getMonth() + 1, 2) + \"-\" + H(r.getDate(), 2) + \"T\" + H(r.getHours(), 2) + \":\" + H(r.getMinutes(), 2) + \":\" + H(r.getSeconds(), 2) + \".\" + H(r.getMilliseconds(), 3);\n        return e < 0 ? (i += \"-\", e *= -1) : i += \"+\", i += H(Math.floor(e / 60), 2) + \":\" + H(e % 60, 2), n && (i += \" BC\"), i;\n    }\n    a(Ka, \"dateToString\");\n    function za(r) {\n        var e = r.getUTCFullYear(), t = e < 1;\n        t && (e = Math.abs(e) + 1);\n        var n = H(e, 4) + \"-\" + H(r.getUTCMonth() + 1, 2) + \"-\" + H(r.getUTCDate(), 2) + \"T\" + H(r.getUTCHours(), 2) + \":\" + H(r.getUTCMinutes(), 2) + \":\" + H(r.getUTCSeconds(), 2) + \".\" + H(r.getUTCMilliseconds(), 3);\n        return n += \"+00:00\", t && (n += \" BC\"), n;\n    }\n    a(za, \"dateToStringUTC\");\n    function Ya(r, e, t) {\n        return r = typeof r == \"string\" ? {\n            text: r\n        } : r, e && (typeof e == \"function\" ? r.callback = e : r.values = e), t && (r.callback = t), r;\n    }\n    a(Ya, \"normalizeQueryConfig\");\n    var Xt = a(function(r) {\n        return Ha.createHash(\"md5\").update(r, \"utf-8\").digest(\"hex\");\n    }, \"md5\"), Za = a(function(r, e, t) {\n        var n = Xt(e + r), i = Xt(y.concat([\n            y.from(n),\n            t\n        ]));\n        return \"md5\" + i;\n    }, \"postgresMd5PasswordHash\");\n    Di.exports = {\n        prepareValue: a(function(e) {\n            return lt(e);\n        }, \"prepareValueWrapper\"),\n        normalizeQueryConfig: Ya,\n        postgresMd5PasswordHash: Za,\n        md5: Xt\n    };\n});\nvar qi = I((Yh, Ni)=>{\n    \"use strict\";\n    p();\n    var er = (Qt(), N(qt));\n    function Ja(r) {\n        if (r.indexOf(\"SCRAM-SHA-256\") === -1) throw new Error(\"SASL: Only mechanism SCRAM-SHA-256 is currently supported\");\n        let e = er.randomBytes(18).toString(\"base64\");\n        return {\n            mechanism: \"SCRAM-SHA-256\",\n            clientNonce: e,\n            response: \"n,,n=*,r=\" + e,\n            message: \"SASLInitialResponse\"\n        };\n    }\n    a(Ja, \"startSession\");\n    function Xa(r, e, t) {\n        if (r.message !== \"SASLInitialResponse\") throw new Error(\"SASL: Last message was not SASLInitialResponse\");\n        if (typeof e != \"string\") throw new Error(\"SASL: SCRAM-SERVER-FIRST-MESSAGE: client password must be a string\");\n        if (typeof t != \"string\") throw new Error(\"SASL: SCRAM-SERVER-FIRST-MESSAGE: serverData must be a string\");\n        let n = ru(t);\n        if (n.nonce.startsWith(r.clientNonce)) {\n            if (n.nonce.length === r.clientNonce.length) throw new Error(\"SASL: SCRAM-SERVER-FIRST-MESSAGE: server nonce is too short\");\n        } else throw new Error(\"SASL: SCRAM-SERVER-FIRST-MESSAGE: server nonce does not start with client nonce\");\n        var i = y.from(n.salt, \"base64\"), s = su(e, i, n.iteration), o = De(s, \"Client Key\"), u = iu(o), c = \"n=*,r=\" + r.clientNonce, h = \"r=\" + n.nonce + \",s=\" + n.salt + \",i=\" + n.iteration, l = \"c=biws,r=\" + n.nonce, d = c + \",\" + h + \",\" + l, b = De(u, d), C = Oi(o, b), B = C.toString(\"base64\"), W = De(s, \"Server Key\"), X = De(W, d);\n        r.message = \"SASLResponse\", r.serverSignature = X.toString(\"base64\"), r.response = l + \",p=\" + B;\n    }\n    a(Xa, \"continueSession\");\n    function eu(r, e) {\n        if (r.message !== \"SASLResponse\") throw new Error(\"SASL: Last message was not SASLResponse\");\n        if (typeof e != \"string\") throw new Error(\"SASL: SCRAM-SERVER-FINAL-MESSAGE: serverData must be a string\");\n        let { serverSignature: t } = nu(e);\n        if (t !== r.serverSignature) throw new Error(\"SASL: SCRAM-SERVER-FINAL-MESSAGE: server signature does not match\");\n    }\n    a(eu, \"finalizeSession\");\n    function tu(r) {\n        if (typeof r != \"string\") throw new TypeError(\"SASL: text must be a string\");\n        return r.split(\"\").map((e, t)=>r.charCodeAt(t)).every((e)=>e >= 33 && e <= 43 || e >= 45 && e <= 126);\n    }\n    a(tu, \"isPrintableChars\");\n    function ki(r) {\n        return /^(?:[a-zA-Z0-9+/]{4})*(?:[a-zA-Z0-9+/]{2}==|[a-zA-Z0-9+/]{3}=)?$/.test(r);\n    }\n    a(ki, \"isBase64\");\n    function Ui(r) {\n        if (typeof r != \"string\") throw new TypeError(\"SASL: attribute pairs text must be a string\");\n        return new Map(r.split(\",\").map((e)=>{\n            if (!/^.=/.test(e)) throw new Error(\"SASL: Invalid attribute pair entry\");\n            let t = e[0], n = e.substring(2);\n            return [\n                t,\n                n\n            ];\n        }));\n    }\n    a(Ui, \"parseAttributePairs\");\n    function ru(r) {\n        let e = Ui(r), t = e.get(\"r\");\n        if (t) {\n            if (!tu(t)) throw new Error(\"SASL: SCRAM-SERVER-FIRST-MESSAGE: nonce must only contain printable characters\");\n        } else throw new Error(\"SASL: SCRAM-SERVER-FIRST-MESSAGE: nonce missing\");\n        let n = e.get(\"s\");\n        if (n) {\n            if (!ki(n)) throw new Error(\"SASL: SCRAM-SERVER-FIRST-MESSAGE: salt must be base64\");\n        } else throw new Error(\"SASL: SCRAM-SERVER-FIRST-MESSAGE: salt missing\");\n        let i = e.get(\"i\");\n        if (i) {\n            if (!/^[1-9][0-9]*$/.test(i)) throw new Error(\"SASL: SCRAM-SERVER-FIRST-MESSAGE: invalid iteration count\");\n        } else throw new Error(\"SASL: SCRAM-SERVER-FIRST-MESSAGE: iteration missing\");\n        let s = parseInt(i, 10);\n        return {\n            nonce: t,\n            salt: n,\n            iteration: s\n        };\n    }\n    a(ru, \"parseServerFirstMessage\");\n    function nu(r) {\n        let t = Ui(r).get(\"v\");\n        if (t) {\n            if (!ki(t)) throw new Error(\"SASL: SCRAM-SERVER-FINAL-MESSAGE: server signature must be base64\");\n        } else throw new Error(\"SASL: SCRAM-SERVER-FINAL-MESSAGE: server signature is missing\");\n        return {\n            serverSignature: t\n        };\n    }\n    a(nu, \"parseServerFinalMessage\");\n    function Oi(r, e) {\n        if (!y.isBuffer(r)) throw new TypeError(\"first argument must be a Buffer\");\n        if (!y.isBuffer(e)) throw new TypeError(\"second argument must be a Buffer\");\n        if (r.length !== e.length) throw new Error(\"Buffer lengths must match\");\n        if (r.length === 0) throw new Error(\"Buffers cannot be empty\");\n        return y.from(r.map((t, n)=>r[n] ^ e[n]));\n    }\n    a(Oi, \"xorBuffers\");\n    function iu(r) {\n        return er.createHash(\"sha256\").update(r).digest();\n    }\n    a(iu, \"sha256\");\n    function De(r, e) {\n        return er.createHmac(\"sha256\", r).update(e).digest();\n    }\n    a(De, \"hmacSha256\");\n    function su(r, e, t) {\n        for(var n = De(r, y.concat([\n            e,\n            y.from([\n                0,\n                0,\n                0,\n                1\n            ])\n        ])), i = n, s = 0; s < t - 1; s++)n = De(r, n), i = Oi(i, n);\n        return i;\n    }\n    a(su, \"Hi\");\n    Ni.exports = {\n        startSession: Ja,\n        continueSession: Xa,\n        finalizeSession: eu\n    };\n});\nvar tr = {};\nie(tr, {\n    join: ()=>ou\n});\nfunction ou(...r) {\n    return r.join(\"/\");\n}\nvar rr = z(()=>{\n    \"use strict\";\n    p();\n    a(ou, \"join\");\n});\nvar nr = {};\nie(nr, {\n    stat: ()=>au\n});\nfunction au(r, e) {\n    e(new Error(\"No filesystem\"));\n}\nvar ir = z(()=>{\n    \"use strict\";\n    p();\n    a(au, \"stat\");\n});\nvar sr = {};\nie(sr, {\n    default: ()=>uu\n});\nvar uu, or = z(()=>{\n    \"use strict\";\n    p();\n    uu = {};\n});\nvar Qi = {};\nie(Qi, {\n    StringDecoder: ()=>ar\n});\nvar ur, ar, Wi = z(()=>{\n    \"use strict\";\n    p();\n    ur = class ur {\n        constructor(e){\n            _(this, \"td\");\n            this.td = new TextDecoder(e);\n        }\n        write(e) {\n            return this.td.decode(e, {\n                stream: !0\n            });\n        }\n        end(e) {\n            return this.td.decode(e);\n        }\n    };\n    a(ur, \"StringDecoder\");\n    ar = ur;\n});\nvar $i = I((ol, Gi)=>{\n    \"use strict\";\n    p();\n    var { Transform: cu } = (or(), N(sr)), { StringDecoder: hu } = (Wi(), N(Qi)), be = Symbol(\"last\"), ft = Symbol(\"decoder\");\n    function lu(r, e, t) {\n        let n;\n        if (this.overflow) {\n            if (n = this[ft].write(r).split(this.matcher), n.length === 1) return t();\n            n.shift(), this.overflow = !1;\n        } else this[be] += this[ft].write(r), n = this[be].split(this.matcher);\n        this[be] = n.pop();\n        for(let i = 0; i < n.length; i++)try {\n            Hi(this, this.mapper(n[i]));\n        } catch (s) {\n            return t(s);\n        }\n        if (this.overflow = this[be].length > this.maxLength, this.overflow && !this.skipOverflow) {\n            t(new Error(\"maximum buffer reached\"));\n            return;\n        }\n        t();\n    }\n    a(lu, \"transform\");\n    function fu(r) {\n        if (this[be] += this[ft].end(), this[be]) try {\n            Hi(this, this.mapper(this[be]));\n        } catch (e) {\n            return r(e);\n        }\n        r();\n    }\n    a(fu, \"flush\");\n    function Hi(r, e) {\n        e !== void 0 && r.push(e);\n    }\n    a(Hi, \"push\");\n    function ji(r) {\n        return r;\n    }\n    a(ji, \"noop\");\n    function pu(r, e, t) {\n        switch(r = r || /\\r?\\n/, e = e || ji, t = t || {}, arguments.length){\n            case 1:\n                typeof r == \"function\" ? (e = r, r = /\\r?\\n/) : typeof r == \"object\" && !(r instanceof RegExp) && !r[Symbol.split] && (t = r, r = /\\r?\\n/);\n                break;\n            case 2:\n                typeof r == \"function\" ? (t = e, e = r, r = /\\r?\\n/) : typeof e == \"object\" && (t = e, e = ji);\n        }\n        t = Object.assign({}, t), t.autoDestroy = !0, t.transform = lu, t.flush = fu, t.readableObjectMode = !0;\n        let n = new cu(t);\n        return n[be] = \"\", n[ft] = new hu(\"utf8\"), n.matcher = r, n.mapper = e, n.maxLength = t.maxLength, n.skipOverflow = t.skipOverflow || !1, n.overflow = !1, n._destroy = function(i, s) {\n            this._writableState.errorEmitted = !1, s(i);\n        }, n;\n    }\n    a(pu, \"split\");\n    Gi.exports = pu;\n});\nvar zi = I((cl, pe)=>{\n    \"use strict\";\n    p();\n    var Vi = (rr(), N(tr)), du = (or(), N(sr)).Stream, yu = $i(), Ki = (He(), N(je)), mu = 5432, pt = m.platform === \"win32\", tt = m.stderr, gu = 56, wu = 7, bu = 61440, Su = 32768;\n    function xu(r) {\n        return (r & bu) == Su;\n    }\n    a(xu, \"isRegFile\");\n    var ke = [\n        \"host\",\n        \"port\",\n        \"database\",\n        \"user\",\n        \"password\"\n    ], cr = ke.length, vu = ke[cr - 1];\n    function hr() {\n        var r = tt instanceof du && tt.writable === !0;\n        if (r) {\n            var e = Array.prototype.slice.call(arguments).concat(`\n`);\n            tt.write(Ki.format.apply(Ki, e));\n        }\n    }\n    a(hr, \"warn\");\n    Object.defineProperty(pe.exports, \"isWin\", {\n        get: a(function() {\n            return pt;\n        }, \"get\"),\n        set: a(function(r) {\n            pt = r;\n        }, \"set\")\n    });\n    pe.exports.warnTo = function(r) {\n        var e = tt;\n        return tt = r, e;\n    };\n    pe.exports.getFileName = function(r) {\n        var e = r || m.env, t = e.PGPASSFILE || (pt ? Vi.join(e.APPDATA || \"./\", \"postgresql\", \"pgpass.conf\") : Vi.join(e.HOME || \"./\", \".pgpass\"));\n        return t;\n    };\n    pe.exports.usePgPass = function(r, e) {\n        return Object.prototype.hasOwnProperty.call(m.env, \"PGPASSWORD\") ? !1 : pt ? !0 : (e = e || \"<unkn>\", xu(r.mode) ? r.mode & (gu | wu) ? (hr('WARNING: password file \"%s\" has group or world access; permissions should be u=rw (0600) or less', e), !1) : !0 : (hr('WARNING: password file \"%s\" is not a plain file', e), !1));\n    };\n    var Eu = pe.exports.match = function(r, e) {\n        return ke.slice(0, -1).reduce(function(t, n, i) {\n            return i == 1 && Number(r[n] || mu) === Number(e[n]) ? t && !0 : t && (e[n] === \"*\" || e[n] === r[n]);\n        }, !0);\n    };\n    pe.exports.getPassword = function(r, e, t) {\n        var n, i = e.pipe(yu());\n        function s(c) {\n            var h = _u(c);\n            h && Au(h) && Eu(r, h) && (n = h[vu], i.end());\n        }\n        a(s, \"onLine\");\n        var o = a(function() {\n            e.destroy(), t(n);\n        }, \"onEnd\"), u = a(function(c) {\n            e.destroy(), hr(\"WARNING: error on reading file: %s\", c), t(void 0);\n        }, \"onErr\");\n        e.on(\"error\", u), i.on(\"data\", s).on(\"end\", o).on(\"error\", u);\n    };\n    var _u = pe.exports.parseLine = function(r) {\n        if (r.length < 11 || r.match(/^\\s+#/)) return null;\n        for(var e = \"\", t = \"\", n = 0, i = 0, s = 0, o = {}, u = !1, c = a(function(l, d, b) {\n            var C = r.substring(d, b);\n            Object.hasOwnProperty.call(m.env, \"PGPASS_NO_DEESCAPE\") || (C = C.replace(/\\\\([:\\\\])/g, \"$1\")), o[ke[l]] = C;\n        }, \"addToObj\"), h = 0; h < r.length - 1; h += 1){\n            if (e = r.charAt(h + 1), t = r.charAt(h), u = n == cr - 1, u) {\n                c(n, i);\n                break;\n            }\n            h >= 0 && e == \":\" && t !== \"\\\\\" && (c(n, i, h + 1), i = h + 2, n += 1);\n        }\n        return o = Object.keys(o).length === cr ? o : null, o;\n    }, Au = pe.exports.isValidEntry = function(r) {\n        for(var e = {\n            0: function(o) {\n                return o.length > 0;\n            },\n            1: function(o) {\n                return o === \"*\" ? !0 : (o = Number(o), isFinite(o) && o > 0 && o < 9007199254740992 && Math.floor(o) === o);\n            },\n            2: function(o) {\n                return o.length > 0;\n            },\n            3: function(o) {\n                return o.length > 0;\n            },\n            4: function(o) {\n                return o.length > 0;\n            }\n        }, t = 0; t < ke.length; t += 1){\n            var n = e[t], i = r[ke[t]] || \"\", s = n(i);\n            if (!s) return !1;\n        }\n        return !0;\n    };\n});\nvar Zi = I((pl, lr)=>{\n    \"use strict\";\n    p();\n    var fl = (rr(), N(tr)), Yi = (ir(), N(nr)), dt = zi();\n    lr.exports = function(r, e) {\n        var t = dt.getFileName();\n        Yi.stat(t, function(n, i) {\n            if (n || !dt.usePgPass(i, t)) return e(void 0);\n            var s = Yi.createReadStream(t);\n            dt.getPassword(r, s, e);\n        });\n    };\n    lr.exports.warnTo = dt.warnTo;\n});\nvar mt = I((yl, Ji)=>{\n    \"use strict\";\n    p();\n    var Cu = Je();\n    function yt(r) {\n        this._types = r || Cu, this.text = {}, this.binary = {};\n    }\n    a(yt, \"TypeOverrides\");\n    yt.prototype.getOverrides = function(r) {\n        switch(r){\n            case \"text\":\n                return this.text;\n            case \"binary\":\n                return this.binary;\n            default:\n                return {};\n        }\n    };\n    yt.prototype.setTypeParser = function(r, e, t) {\n        typeof e == \"function\" && (t = e, e = \"text\"), this.getOverrides(e)[r] = t;\n    };\n    yt.prototype.getTypeParser = function(r, e) {\n        return e = e || \"text\", this.getOverrides(e)[r] || this._types.getTypeParser(r, e);\n    };\n    Ji.exports = yt;\n});\nvar Xi = {};\nie(Xi, {\n    default: ()=>Tu\n});\nvar Tu, es = z(()=>{\n    \"use strict\";\n    p();\n    Tu = {};\n});\nvar ts = {};\nie(ts, {\n    parse: ()=>fr\n});\nfunction fr(r, e = !1) {\n    let { protocol: t } = new URL(r), n = \"http:\" + r.substring(t.length), { username: i, password: s, host: o, hostname: u, port: c, pathname: h, search: l, searchParams: d, hash: b } = new URL(n);\n    s = decodeURIComponent(s), i = decodeURIComponent(i), h = decodeURIComponent(h);\n    let C = i + \":\" + s, B = e ? Object.fromEntries(d.entries()) : l;\n    return {\n        href: r,\n        protocol: t,\n        auth: C,\n        username: i,\n        password: s,\n        host: o,\n        hostname: u,\n        port: c,\n        pathname: h,\n        search: l,\n        query: B,\n        hash: b\n    };\n}\nvar pr = z(()=>{\n    \"use strict\";\n    p();\n    a(fr, \"parse\");\n});\nvar ns = I((xl, rs)=>{\n    \"use strict\";\n    p();\n    var Iu = (pr(), N(ts)), dr = (ir(), N(nr));\n    function yr(r) {\n        if (r.charAt(0) === \"/\") {\n            var t = r.split(\" \");\n            return {\n                host: t[0],\n                database: t[1]\n            };\n        }\n        var e = Iu.parse(/ |%[^a-f0-9]|%[a-f0-9][^a-f0-9]/i.test(r) ? encodeURI(r).replace(/\\%25(\\d\\d)/g, \"%$1\") : r, !0), t = e.query;\n        for(var n in t)Array.isArray(t[n]) && (t[n] = t[n][t[n].length - 1]);\n        var i = (e.auth || \":\").split(\":\");\n        if (t.user = i[0], t.password = i.splice(1).join(\":\"), t.port = e.port, e.protocol == \"socket:\") return t.host = decodeURI(e.pathname), t.database = e.query.db, t.client_encoding = e.query.encoding, t;\n        t.host || (t.host = e.hostname);\n        var s = e.pathname;\n        if (!t.host && s && /^%2f/i.test(s)) {\n            var o = s.split(\"/\");\n            t.host = decodeURIComponent(o[0]), s = o.splice(1).join(\"/\");\n        }\n        switch(s && s.charAt(0) === \"/\" && (s = s.slice(1) || null), t.database = s && decodeURI(s), (t.ssl === \"true\" || t.ssl === \"1\") && (t.ssl = !0), t.ssl === \"0\" && (t.ssl = !1), (t.sslcert || t.sslkey || t.sslrootcert || t.sslmode) && (t.ssl = {}), t.sslcert && (t.ssl.cert = dr.readFileSync(t.sslcert).toString()), t.sslkey && (t.ssl.key = dr.readFileSync(t.sslkey).toString()), t.sslrootcert && (t.ssl.ca = dr.readFileSync(t.sslrootcert).toString()), t.sslmode){\n            case \"disable\":\n                {\n                    t.ssl = !1;\n                    break;\n                }\n            case \"prefer\":\n            case \"require\":\n            case \"verify-ca\":\n            case \"verify-full\":\n                break;\n            case \"no-verify\":\n                {\n                    t.ssl.rejectUnauthorized = !1;\n                    break;\n                }\n        }\n        return t;\n    }\n    a(yr, \"parse\");\n    rs.exports = yr;\n    yr.parse = yr;\n});\nvar gt = I((_l, os)=>{\n    \"use strict\";\n    p();\n    var Pu = (es(), N(Xi)), ss = Xe(), is = ns().parse, $ = a(function(r, e, t) {\n        return t === void 0 ? t = m.env[\"PG\" + r.toUpperCase()] : t === !1 || (t = m.env[t]), e[r] || t || ss[r];\n    }, \"val\"), Bu = a(function() {\n        switch(m.env.PGSSLMODE){\n            case \"disable\":\n                return !1;\n            case \"prefer\":\n            case \"require\":\n            case \"verify-ca\":\n            case \"verify-full\":\n                return !0;\n            case \"no-verify\":\n                return {\n                    rejectUnauthorized: !1\n                };\n        }\n        return ss.ssl;\n    }, \"readSSLConfigFromEnvironment\"), Ue = a(function(r) {\n        return \"'\" + (\"\" + r).replace(/\\\\/g, \"\\\\\\\\\").replace(/'/g, \"\\\\'\") + \"'\";\n    }, \"quoteParamValue\"), ne = a(function(r, e, t) {\n        var n = e[t];\n        n != null && r.push(t + \"=\" + Ue(n));\n    }, \"add\"), gr = class gr {\n        constructor(e){\n            e = typeof e == \"string\" ? is(e) : e || {}, e.connectionString && (e = Object.assign({}, e, is(e.connectionString))), this.user = $(\"user\", e), this.database = $(\"database\", e), this.database === void 0 && (this.database = this.user), this.port = parseInt($(\"port\", e), 10), this.host = $(\"host\", e), Object.defineProperty(this, \"password\", {\n                configurable: !0,\n                enumerable: !1,\n                writable: !0,\n                value: $(\"password\", e)\n            }), this.binary = $(\"binary\", e), this.options = $(\"options\", e), this.ssl = typeof e.ssl > \"u\" ? Bu() : e.ssl, typeof this.ssl == \"string\" && this.ssl === \"true\" && (this.ssl = !0), this.ssl === \"no-verify\" && (this.ssl = {\n                rejectUnauthorized: !1\n            }), this.ssl && this.ssl.key && Object.defineProperty(this.ssl, \"key\", {\n                enumerable: !1\n            }), this.client_encoding = $(\"client_encoding\", e), this.replication = $(\"replication\", e), this.isDomainSocket = !(this.host || \"\").indexOf(\"/\"), this.application_name = $(\"application_name\", e, \"PGAPPNAME\"), this.fallback_application_name = $(\"fallback_application_name\", e, !1), this.statement_timeout = $(\"statement_timeout\", e, !1), this.lock_timeout = $(\"lock_timeout\", e, !1), this.idle_in_transaction_session_timeout = $(\"idle_in_transaction_session_timeout\", e, !1), this.query_timeout = $(\"query_timeout\", e, !1), e.connectionTimeoutMillis === void 0 ? this.connect_timeout = m.env.PGCONNECT_TIMEOUT || 0 : this.connect_timeout = Math.floor(e.connectionTimeoutMillis / 1e3), e.keepAlive === !1 ? this.keepalives = 0 : e.keepAlive === !0 && (this.keepalives = 1), typeof e.keepAliveInitialDelayMillis == \"number\" && (this.keepalives_idle = Math.floor(e.keepAliveInitialDelayMillis / 1e3));\n        }\n        getLibpqConnectionString(e) {\n            var t = [];\n            ne(t, this, \"user\"), ne(t, this, \"password\"), ne(t, this, \"port\"), ne(t, this, \"application_name\"), ne(t, this, \"fallback_application_name\"), ne(t, this, \"connect_timeout\"), ne(t, this, \"options\");\n            var n = typeof this.ssl == \"object\" ? this.ssl : this.ssl ? {\n                sslmode: this.ssl\n            } : {};\n            if (ne(t, n, \"sslmode\"), ne(t, n, \"sslca\"), ne(t, n, \"sslkey\"), ne(t, n, \"sslcert\"), ne(t, n, \"sslrootcert\"), this.database && t.push(\"dbname=\" + Ue(this.database)), this.replication && t.push(\"replication=\" + Ue(this.replication)), this.host && t.push(\"host=\" + Ue(this.host)), this.isDomainSocket) return e(null, t.join(\" \"));\n            this.client_encoding && t.push(\"client_encoding=\" + Ue(this.client_encoding)), Pu.lookup(this.host, function(i, s) {\n                return i ? e(i, null) : (t.push(\"hostaddr=\" + Ue(s)), e(null, t.join(\" \")));\n            });\n        }\n    };\n    a(gr, \"ConnectionParameters\");\n    var mr = gr;\n    os.exports = mr;\n});\nvar cs = I((Tl, us)=>{\n    \"use strict\";\n    p();\n    var Lu = Je(), as = /^([A-Za-z]+)(?: (\\d+))?(?: (\\d+))?/, br = class br {\n        constructor(e, t){\n            this.command = null, this.rowCount = null, this.oid = null, this.rows = [], this.fields = [], this._parsers = void 0, this._types = t, this.RowCtor = null, this.rowAsArray = e === \"array\", this.rowAsArray && (this.parseRow = this._parseRowAsArray);\n        }\n        addCommandComplete(e) {\n            var t;\n            e.text ? t = as.exec(e.text) : t = as.exec(e.command), t && (this.command = t[1], t[3] ? (this.oid = parseInt(t[2], 10), this.rowCount = parseInt(t[3], 10)) : t[2] && (this.rowCount = parseInt(t[2], 10)));\n        }\n        _parseRowAsArray(e) {\n            for(var t = new Array(e.length), n = 0, i = e.length; n < i; n++){\n                var s = e[n];\n                s !== null ? t[n] = this._parsers[n](s) : t[n] = null;\n            }\n            return t;\n        }\n        parseRow(e) {\n            for(var t = {}, n = 0, i = e.length; n < i; n++){\n                var s = e[n], o = this.fields[n].name;\n                s !== null ? t[o] = this._parsers[n](s) : t[o] = null;\n            }\n            return t;\n        }\n        addRow(e) {\n            this.rows.push(e);\n        }\n        addFields(e) {\n            this.fields = e, this.fields.length && (this._parsers = new Array(e.length));\n            for(var t = 0; t < e.length; t++){\n                var n = e[t];\n                this._types ? this._parsers[t] = this._types.getTypeParser(n.dataTypeID, n.format || \"text\") : this._parsers[t] = Lu.getTypeParser(n.dataTypeID, n.format || \"text\");\n            }\n        }\n    };\n    a(br, \"Result\");\n    var wr = br;\n    us.exports = wr;\n});\nvar ps = I((Bl, fs)=>{\n    \"use strict\";\n    p();\n    var { EventEmitter: Ru } = we(), hs = cs(), ls = et(), xr = class xr extends Ru {\n        constructor(e, t, n){\n            super(), e = ls.normalizeQueryConfig(e, t, n), this.text = e.text, this.values = e.values, this.rows = e.rows, this.types = e.types, this.name = e.name, this.binary = e.binary, this.portal = e.portal || \"\", this.callback = e.callback, this._rowMode = e.rowMode, m.domain && e.callback && (this.callback = m.domain.bind(e.callback)), this._result = new hs(this._rowMode, this.types), this._results = this._result, this.isPreparedStatement = !1, this._canceledDueToError = !1, this._promise = null;\n        }\n        requiresPreparation() {\n            return this.name || this.rows ? !0 : !this.text || !this.values ? !1 : this.values.length > 0;\n        }\n        _checkForMultirow() {\n            this._result.command && (Array.isArray(this._results) || (this._results = [\n                this._result\n            ]), this._result = new hs(this._rowMode, this.types), this._results.push(this._result));\n        }\n        handleRowDescription(e) {\n            this._checkForMultirow(), this._result.addFields(e.fields), this._accumulateRows = this.callback || !this.listeners(\"row\").length;\n        }\n        handleDataRow(e) {\n            let t;\n            if (!this._canceledDueToError) {\n                try {\n                    t = this._result.parseRow(e.fields);\n                } catch (n) {\n                    this._canceledDueToError = n;\n                    return;\n                }\n                this.emit(\"row\", t, this._result), this._accumulateRows && this._result.addRow(t);\n            }\n        }\n        handleCommandComplete(e, t) {\n            this._checkForMultirow(), this._result.addCommandComplete(e), this.rows && t.sync();\n        }\n        handleEmptyQuery(e) {\n            this.rows && e.sync();\n        }\n        handleError(e, t) {\n            if (this._canceledDueToError && (e = this._canceledDueToError, this._canceledDueToError = !1), this.callback) return this.callback(e);\n            this.emit(\"error\", e);\n        }\n        handleReadyForQuery(e) {\n            if (this._canceledDueToError) return this.handleError(this._canceledDueToError, e);\n            if (this.callback) try {\n                this.callback(null, this._results);\n            } catch (t) {\n                m.nextTick(()=>{\n                    throw t;\n                });\n            }\n            this.emit(\"end\", this._results);\n        }\n        submit(e) {\n            if (typeof this.text != \"string\" && typeof this.name != \"string\") return new Error(\"A query must have either text or a name. Supplying neither is unsupported.\");\n            let t = e.parsedStatements[this.name];\n            return this.text && t && this.text !== t ? new Error(`Prepared statements must be \\\nunique - '${this.name}' was used for a different statement`) : this.values && !Array.isArray(this.values) ? new Error(\"Query values must be an array\") : (this.requiresPreparation() ? this.prepare(e) : e.query(this.text), null);\n        }\n        hasBeenParsed(e) {\n            return this.name && e.parsedStatements[this.name];\n        }\n        handlePortalSuspended(e) {\n            this._getRows(e, this.rows);\n        }\n        _getRows(e, t) {\n            e.execute({\n                portal: this.portal,\n                rows: t\n            }), t ? e.flush() : e.sync();\n        }\n        prepare(e) {\n            this.isPreparedStatement = !0, this.hasBeenParsed(e) || e.parse({\n                text: this.text,\n                name: this.name,\n                types: this.types\n            });\n            try {\n                e.bind({\n                    portal: this.portal,\n                    statement: this.name,\n                    values: this.values,\n                    binary: this.binary,\n                    valueMapper: ls.prepareValue\n                });\n            } catch (t) {\n                this.handleError(t, e);\n                return;\n            }\n            e.describe({\n                type: \"P\",\n                name: this.portal || \"\"\n            }), this._getRows(e, this.rows);\n        }\n        handleCopyInResponse(e) {\n            e.sendCopyFail(\"No source stream defined\");\n        }\n        handleCopyData(e, t) {}\n    };\n    a(xr, \"Query\");\n    var Sr = xr;\n    fs.exports = Sr;\n});\nvar ys = {};\nie(ys, {\n    Socket: ()=>_e,\n    isIP: ()=>Fu\n});\nfunction Fu(r) {\n    return 0;\n}\nvar ds, Mu, E, _e, wt = z(()=>{\n    \"use strict\";\n    p();\n    ds = Te(we(), 1);\n    a(Fu, \"isIP\");\n    Mu = a((r)=>r.replace(/^[^.]+\\./, \"api.\"), \"transformHost\"), E = class E extends ds.EventEmitter {\n        constructor(){\n            super(...arguments);\n            _(this, \"opts\", {});\n            _(this, \"connecting\", !1);\n            _(this, \"pending\", !0);\n            _(this, \"writable\", !0);\n            _(this, \"encrypted\", !1);\n            _(this, \"authorized\", !1);\n            _(this, \"destroyed\", !1);\n            _(this, \"ws\", null);\n            _(this, \"writeBuffer\");\n            _(this, \"tlsState\", 0);\n            _(this, \"tlsRead\");\n            _(this, \"tlsWrite\");\n        }\n        static get poolQueryViaFetch() {\n            return E.opts.poolQueryViaFetch ?? E.defaults.poolQueryViaFetch;\n        }\n        static set poolQueryViaFetch(t) {\n            E.opts.poolQueryViaFetch = t;\n        }\n        static get fetchEndpoint() {\n            return E.opts.fetchEndpoint ?? E.defaults.fetchEndpoint;\n        }\n        static set fetchEndpoint(t) {\n            E.opts.fetchEndpoint = t;\n        }\n        static get fetchConnectionCache() {\n            return !0;\n        }\n        static set fetchConnectionCache(t) {\n            console.warn(\"The `fetchConnectionCache` option is deprecated (now always `true`)\");\n        }\n        static get fetchFunction() {\n            return E.opts.fetchFunction ?? E.defaults.fetchFunction;\n        }\n        static set fetchFunction(t) {\n            E.opts.fetchFunction = t;\n        }\n        static get webSocketConstructor() {\n            return E.opts.webSocketConstructor ?? E.defaults.webSocketConstructor;\n        }\n        static set webSocketConstructor(t) {\n            E.opts.webSocketConstructor = t;\n        }\n        get webSocketConstructor() {\n            return this.opts.webSocketConstructor ?? E.webSocketConstructor;\n        }\n        set webSocketConstructor(t) {\n            this.opts.webSocketConstructor = t;\n        }\n        static get wsProxy() {\n            return E.opts.wsProxy ?? E.defaults.wsProxy;\n        }\n        static set wsProxy(t) {\n            E.opts.wsProxy = t;\n        }\n        get wsProxy() {\n            return this.opts.wsProxy ?? E.wsProxy;\n        }\n        set wsProxy(t) {\n            this.opts.wsProxy = t;\n        }\n        static get coalesceWrites() {\n            return E.opts.coalesceWrites ?? E.defaults.coalesceWrites;\n        }\n        static set coalesceWrites(t) {\n            E.opts.coalesceWrites = t;\n        }\n        get coalesceWrites() {\n            return this.opts.coalesceWrites ?? E.coalesceWrites;\n        }\n        set coalesceWrites(t) {\n            this.opts.coalesceWrites = t;\n        }\n        static get useSecureWebSocket() {\n            return E.opts.useSecureWebSocket ?? E.defaults.useSecureWebSocket;\n        }\n        static set useSecureWebSocket(t) {\n            E.opts.useSecureWebSocket = t;\n        }\n        get useSecureWebSocket() {\n            return this.opts.useSecureWebSocket ?? E.useSecureWebSocket;\n        }\n        set useSecureWebSocket(t) {\n            this.opts.useSecureWebSocket = t;\n        }\n        static get forceDisablePgSSL() {\n            return E.opts.forceDisablePgSSL ?? E.defaults.forceDisablePgSSL;\n        }\n        static set forceDisablePgSSL(t) {\n            E.opts.forceDisablePgSSL = t;\n        }\n        get forceDisablePgSSL() {\n            return this.opts.forceDisablePgSSL ?? E.forceDisablePgSSL;\n        }\n        set forceDisablePgSSL(t) {\n            this.opts.forceDisablePgSSL = t;\n        }\n        static get disableSNI() {\n            return E.opts.disableSNI ?? E.defaults.disableSNI;\n        }\n        static set disableSNI(t) {\n            E.opts.disableSNI = t;\n        }\n        get disableSNI() {\n            return this.opts.disableSNI ?? E.disableSNI;\n        }\n        set disableSNI(t) {\n            this.opts.disableSNI = t;\n        }\n        static get pipelineConnect() {\n            return E.opts.pipelineConnect ?? E.defaults.pipelineConnect;\n        }\n        static set pipelineConnect(t) {\n            E.opts.pipelineConnect = t;\n        }\n        get pipelineConnect() {\n            return this.opts.pipelineConnect ?? E.pipelineConnect;\n        }\n        set pipelineConnect(t) {\n            this.opts.pipelineConnect = t;\n        }\n        static get subtls() {\n            return E.opts.subtls ?? E.defaults.subtls;\n        }\n        static set subtls(t) {\n            E.opts.subtls = t;\n        }\n        get subtls() {\n            return this.opts.subtls ?? E.subtls;\n        }\n        set subtls(t) {\n            this.opts.subtls = t;\n        }\n        static get pipelineTLS() {\n            return E.opts.pipelineTLS ?? E.defaults.pipelineTLS;\n        }\n        static set pipelineTLS(t) {\n            E.opts.pipelineTLS = t;\n        }\n        get pipelineTLS() {\n            return this.opts.pipelineTLS ?? E.pipelineTLS;\n        }\n        set pipelineTLS(t) {\n            this.opts.pipelineTLS = t;\n        }\n        static get rootCerts() {\n            return E.opts.rootCerts ?? E.defaults.rootCerts;\n        }\n        static set rootCerts(t) {\n            E.opts.rootCerts = t;\n        }\n        get rootCerts() {\n            return this.opts.rootCerts ?? E.rootCerts;\n        }\n        set rootCerts(t) {\n            this.opts.rootCerts = t;\n        }\n        wsProxyAddrForHost(t, n) {\n            let i = this.wsProxy;\n            if (i === void 0) throw new Error(\"No WebSocket proxy is configured. Please see https://github.com/neondatabase/serverless/blob/main/CONFIG.md#wsproxy-string--host-string-port-number--string--string\");\n            return typeof i == \"function\" ? i(t, n) : `${i}?address=${t}:${n}`;\n        }\n        setNoDelay() {\n            return this;\n        }\n        setKeepAlive() {\n            return this;\n        }\n        ref() {\n            return this;\n        }\n        unref() {\n            return this;\n        }\n        connect(t, n, i) {\n            this.connecting = !0, i && this.once(\"connect\", i);\n            let s = a(()=>{\n                this.connecting = !1, this.pending = !1, this.emit(\"connect\"), this.emit(\"ready\");\n            }, \"handleWebSocketOpen\"), o = a((c, h = !1)=>{\n                c.binaryType = \"arraybuffer\", c.addEventListener(\"error\", (l)=>{\n                    this.emit(\"error\", l), this.emit(\"close\");\n                }), c.addEventListener(\"message\", (l)=>{\n                    if (this.tlsState === 0) {\n                        let d = y.from(l.data);\n                        this.emit(\"data\", d);\n                    }\n                }), c.addEventListener(\"close\", ()=>{\n                    this.emit(\"close\");\n                }), h ? s() : c.addEventListener(\"open\", s);\n            }, \"configureWebSocket\"), u;\n            try {\n                u = this.wsProxyAddrForHost(n, typeof t == \"string\" ? parseInt(t, 10) : t);\n            } catch (c) {\n                this.emit(\"error\", c), this.emit(\"close\");\n                return;\n            }\n            try {\n                let h = (this.useSecureWebSocket ? \"wss:\" : \"ws:\") + \"//\" + u;\n                if (this.webSocketConstructor !== void 0) this.ws = new this.webSocketConstructor(h), o(this.ws);\n                else try {\n                    this.ws = new WebSocket(h), o(this.ws);\n                } catch  {\n                    this.ws = new __unstable_WebSocket(h), o(this.ws);\n                }\n            } catch (c) {\n                let l = (this.useSecureWebSocket ? \"https:\" : \"http:\") + \"//\" + u;\n                fetch(l, {\n                    headers: {\n                        Upgrade: \"websocket\"\n                    }\n                }).then((d)=>{\n                    if (this.ws = d.webSocket, this.ws == null) throw c;\n                    this.ws.accept(), o(this.ws, !0);\n                }).catch((d)=>{\n                    this.emit(\"error\", new Error(`All attempts to open a WebSocket to\\\n connect to the database failed. Please refer to https://github.com/neondatabase\\\n/serverless/blob/main/CONFIG.md#websocketconstructor-typeof-websocket--undefined\\\n. Details: ${d.message}`)), this.emit(\"close\");\n                });\n            }\n        }\n        async startTls(t) {\n            if (this.subtls === void 0) throw new Error(\"For Postgres SSL connections, you must set `neonConfig.subtls` to the subtls library. See https://github.com/neondatabase/serverless/blob/main/CONFIG.md for more information.\");\n            this.tlsState = 1;\n            let n = this.subtls.TrustedCert.fromPEM(this.rootCerts), i = new this.subtls.WebSocketReadQueue(this.ws), s = i.read.bind(i), o = this.rawWrite.bind(this), [u, c] = await this.subtls.startTls(t, n, s, o, {\n                useSNI: !this.disableSNI,\n                expectPreData: this.pipelineTLS ? new Uint8Array([\n                    83\n                ]) : void 0\n            });\n            this.tlsRead = u, this.tlsWrite = c, this.tlsState = 2, this.encrypted = !0, this.authorized = !0, this.emit(\"secureConnection\", this), this.tlsReadLoop();\n        }\n        async tlsReadLoop() {\n            for(;;){\n                let t = await this.tlsRead();\n                if (t === void 0) break;\n                {\n                    let n = y.from(t);\n                    this.emit(\"data\", n);\n                }\n            }\n        }\n        rawWrite(t) {\n            if (!this.coalesceWrites) {\n                this.ws.send(t);\n                return;\n            }\n            if (this.writeBuffer === void 0) this.writeBuffer = t, setTimeout(()=>{\n                this.ws.send(this.writeBuffer), this.writeBuffer = void 0;\n            }, 0);\n            else {\n                let n = new Uint8Array(this.writeBuffer.length + t.length);\n                n.set(this.writeBuffer), n.set(t, this.writeBuffer.length), this.writeBuffer = n;\n            }\n        }\n        write(t, n = \"utf8\", i = (s)=>{}) {\n            return t.length === 0 ? (i(), !0) : (typeof t == \"string\" && (t = y.from(t, n)), this.tlsState === 0 ? (this.rawWrite(t), i()) : this.tlsState === 1 ? this.once(\"secureConnection\", ()=>{\n                this.write(t, n, i);\n            }) : (this.tlsWrite(t), i()), !0);\n        }\n        end(t = y.alloc(0), n = \"utf8\", i = ()=>{}) {\n            return this.write(t, n, ()=>{\n                this.ws.close(), i();\n            }), this;\n        }\n        destroy() {\n            return this.destroyed = !0, this.end();\n        }\n    };\n    a(E, \"Socket\"), _(E, \"defaults\", {\n        poolQueryViaFetch: !1,\n        fetchEndpoint: a((t)=>\"https://\" + Mu(t) + \"/sql\", \"fetchEndpoint\"),\n        fetchConnectionCache: !0,\n        fetchFunction: void 0,\n        webSocketConstructor: void 0,\n        wsProxy: a((t)=>t + \"/v2\", \"wsProxy\"),\n        useSecureWebSocket: !0,\n        forceDisablePgSSL: !0,\n        coalesceWrites: !0,\n        pipelineConnect: \"password\",\n        subtls: void 0,\n        rootCerts: \"\",\n        pipelineTLS: !1,\n        disableSNI: !1\n    }), _(E, \"opts\", {});\n    _e = E;\n});\nvar Yr = I((T)=>{\n    \"use strict\";\n    p();\n    Object.defineProperty(T, \"__esModule\", {\n        value: !0\n    });\n    T.NoticeMessage = T.DataRowMessage = T.CommandCompleteMessage = T.ReadyForQueryMessage = T.NotificationResponseMessage = T.BackendKeyDataMessage = T.AuthenticationMD5Password = T.ParameterStatusMessage = T.ParameterDescriptionMessage = T.RowDescriptionMessage = T.Field = T.CopyResponse = T.CopyDataMessage = T.DatabaseError = T.copyDone = T.emptyQuery = T.replicationStart = T.portalSuspended = T.noData = T.closeComplete = T.bindComplete = T.parseComplete = void 0;\n    T.parseComplete = {\n        name: \"parseComplete\",\n        length: 5\n    };\n    T.bindComplete = {\n        name: \"bindComplete\",\n        length: 5\n    };\n    T.closeComplete = {\n        name: \"closeComplete\",\n        length: 5\n    };\n    T.noData = {\n        name: \"noData\",\n        length: 5\n    };\n    T.portalSuspended = {\n        name: \"portalSuspended\",\n        length: 5\n    };\n    T.replicationStart = {\n        name: \"replicationStart\",\n        length: 4\n    };\n    T.emptyQuery = {\n        name: \"emptyQuery\",\n        length: 4\n    };\n    T.copyDone = {\n        name: \"copyDone\",\n        length: 4\n    };\n    var kr = class kr extends Error {\n        constructor(e, t, n){\n            super(e), this.length = t, this.name = n;\n        }\n    };\n    a(kr, \"DatabaseError\");\n    var vr = kr;\n    T.DatabaseError = vr;\n    var Ur = class Ur {\n        constructor(e, t){\n            this.length = e, this.chunk = t, this.name = \"copyData\";\n        }\n    };\n    a(Ur, \"CopyDataMessage\");\n    var Er = Ur;\n    T.CopyDataMessage = Er;\n    var Or = class Or {\n        constructor(e, t, n, i){\n            this.length = e, this.name = t, this.binary = n, this.columnTypes = new Array(i);\n        }\n    };\n    a(Or, \"CopyResponse\");\n    var _r = Or;\n    T.CopyResponse = _r;\n    var Nr = class Nr {\n        constructor(e, t, n, i, s, o, u){\n            this.name = e, this.tableID = t, this.columnID = n, this.dataTypeID = i, this.dataTypeSize = s, this.dataTypeModifier = o, this.format = u;\n        }\n    };\n    a(Nr, \"Field\");\n    var Ar = Nr;\n    T.Field = Ar;\n    var qr = class qr {\n        constructor(e, t){\n            this.length = e, this.fieldCount = t, this.name = \"rowDescription\", this.fields = new Array(this.fieldCount);\n        }\n    };\n    a(qr, \"RowDescriptionMessage\");\n    var Cr = qr;\n    T.RowDescriptionMessage = Cr;\n    var Qr = class Qr {\n        constructor(e, t){\n            this.length = e, this.parameterCount = t, this.name = \"parameterDescription\", this.dataTypeIDs = new Array(this.parameterCount);\n        }\n    };\n    a(Qr, \"ParameterDescriptionMessage\");\n    var Tr = Qr;\n    T.ParameterDescriptionMessage = Tr;\n    var Wr = class Wr {\n        constructor(e, t, n){\n            this.length = e, this.parameterName = t, this.parameterValue = n, this.name = \"parameterStatus\";\n        }\n    };\n    a(Wr, \"ParameterStatusMessage\");\n    var Ir = Wr;\n    T.ParameterStatusMessage = Ir;\n    var jr = class jr {\n        constructor(e, t){\n            this.length = e, this.salt = t, this.name = \"authenticationMD5Password\";\n        }\n    };\n    a(jr, \"AuthenticationMD5Password\");\n    var Pr = jr;\n    T.AuthenticationMD5Password = Pr;\n    var Hr = class Hr {\n        constructor(e, t, n){\n            this.length = e, this.processID = t, this.secretKey = n, this.name = \"backendKeyData\";\n        }\n    };\n    a(Hr, \"BackendKeyDataMessage\");\n    var Br = Hr;\n    T.BackendKeyDataMessage = Br;\n    var Gr = class Gr {\n        constructor(e, t, n, i){\n            this.length = e, this.processId = t, this.channel = n, this.payload = i, this.name = \"notification\";\n        }\n    };\n    a(Gr, \"NotificationResponseMessage\");\n    var Lr = Gr;\n    T.NotificationResponseMessage = Lr;\n    var $r = class $r {\n        constructor(e, t){\n            this.length = e, this.status = t, this.name = \"readyForQuery\";\n        }\n    };\n    a($r, \"ReadyForQueryMessage\");\n    var Rr = $r;\n    T.ReadyForQueryMessage = Rr;\n    var Vr = class Vr {\n        constructor(e, t){\n            this.length = e, this.text = t, this.name = \"commandComplete\";\n        }\n    };\n    a(Vr, \"CommandCompleteMessage\");\n    var Fr = Vr;\n    T.CommandCompleteMessage = Fr;\n    var Kr = class Kr {\n        constructor(e, t){\n            this.length = e, this.fields = t, this.name = \"dataRow\", this.fieldCount = t.length;\n        }\n    };\n    a(Kr, \"DataRowMessage\");\n    var Mr = Kr;\n    T.DataRowMessage = Mr;\n    var zr = class zr {\n        constructor(e, t){\n            this.length = e, this.message = t, this.name = \"notice\";\n        }\n    };\n    a(zr, \"NoticeMessage\");\n    var Dr = zr;\n    T.NoticeMessage = Dr;\n});\nvar ms = I((bt)=>{\n    \"use strict\";\n    p();\n    Object.defineProperty(bt, \"__esModule\", {\n        value: !0\n    });\n    bt.Writer = void 0;\n    var Jr = class Jr {\n        constructor(e = 256){\n            this.size = e, this.offset = 5, this.headerPosition = 0, this.buffer = y.allocUnsafe(e);\n        }\n        ensure(e) {\n            var t = this.buffer.length - this.offset;\n            if (t < e) {\n                var n = this.buffer, i = n.length + (n.length >> 1) + e;\n                this.buffer = y.allocUnsafe(i), n.copy(this.buffer);\n            }\n        }\n        addInt32(e) {\n            return this.ensure(4), this.buffer[this.offset++] = e >>> 24 & 255, this.buffer[this.offset++] = e >>> 16 & 255, this.buffer[this.offset++] = e >>> 8 & 255, this.buffer[this.offset++] = e >>> 0 & 255, this;\n        }\n        addInt16(e) {\n            return this.ensure(2), this.buffer[this.offset++] = e >>> 8 & 255, this.buffer[this.offset++] = e >>> 0 & 255, this;\n        }\n        addCString(e) {\n            if (!e) this.ensure(1);\n            else {\n                var t = y.byteLength(e);\n                this.ensure(t + 1), this.buffer.write(e, this.offset, \"utf-8\"), this.offset += t;\n            }\n            return this.buffer[this.offset++] = 0, this;\n        }\n        addString(e = \"\") {\n            var t = y.byteLength(e);\n            return this.ensure(t), this.buffer.write(e, this.offset), this.offset += t, this;\n        }\n        add(e) {\n            return this.ensure(e.length), e.copy(this.buffer, this.offset), this.offset += e.length, this;\n        }\n        join(e) {\n            if (e) {\n                this.buffer[this.headerPosition] = e;\n                let t = this.offset - (this.headerPosition + 1);\n                this.buffer.writeInt32BE(t, this.headerPosition + 1);\n            }\n            return this.buffer.slice(e ? 0 : 5, this.offset);\n        }\n        flush(e) {\n            var t = this.join(e);\n            return this.offset = 5, this.headerPosition = 0, this.buffer = y.allocUnsafe(this.size), t;\n        }\n    };\n    a(Jr, \"Writer\");\n    var Zr = Jr;\n    bt.Writer = Zr;\n});\nvar ws = I((xt)=>{\n    \"use strict\";\n    p();\n    Object.defineProperty(xt, \"__esModule\", {\n        value: !0\n    });\n    xt.serialize = void 0;\n    var Xr = ms(), M = new Xr.Writer, Du = a((r)=>{\n        M.addInt16(3).addInt16(0);\n        for (let n of Object.keys(r))M.addCString(n).addCString(r[n]);\n        M.addCString(\"client_encoding\").addCString(\"UTF8\");\n        var e = M.addCString(\"\").flush(), t = e.length + 4;\n        return new Xr.Writer().addInt32(t).add(e).flush();\n    }, \"startup\"), ku = a(()=>{\n        let r = y.allocUnsafe(8);\n        return r.writeInt32BE(8, 0), r.writeInt32BE(80877103, 4), r;\n    }, \"requestSsl\"), Uu = a((r)=>M.addCString(r).flush(112), \"password\"), Ou = a(function(r, e) {\n        return M.addCString(r).addInt32(y.byteLength(e)).addString(e), M.flush(112);\n    }, \"sendSASLInitialResponseMessage\"), Nu = a(function(r) {\n        return M.addString(r).flush(112);\n    }, \"sendSCRAMClientFinalMessage\"), qu = a((r)=>M.addCString(r).flush(81), \"query\"), gs = [], Qu = a((r)=>{\n        let e = r.name || \"\";\n        e.length > 63 && (console.error(\"Warning! Postgres only supports 63 characters for query names.\"), console.error(\"You supplied %s (%s)\", e, e.length), console.error(\"This can cause conflicts and silent errors executing queries\"));\n        let t = r.types || gs;\n        for(var n = t.length, i = M.addCString(e).addCString(r.text).addInt16(n), s = 0; s < n; s++)i.addInt32(t[s]);\n        return M.flush(80);\n    }, \"parse\"), Oe = new Xr.Writer, Wu = a(function(r, e) {\n        for(let t = 0; t < r.length; t++){\n            let n = e ? e(r[t], t) : r[t];\n            n == null ? (M.addInt16(0), Oe.addInt32(-1)) : n instanceof y ? (M.addInt16(1), Oe.addInt32(n.length), Oe.add(n)) : (M.addInt16(0), Oe.addInt32(y.byteLength(n)), Oe.addString(n));\n        }\n    }, \"writeValues\"), ju = a((r = {})=>{\n        let e = r.portal || \"\", t = r.statement || \"\", n = r.binary || !1, i = r.values || gs, s = i.length;\n        return M.addCString(e).addCString(t), M.addInt16(s), Wu(i, r.valueMapper), M.addInt16(s), M.add(Oe.flush()), M.addInt16(n ? 1 : 0), M.flush(66);\n    }, \"bind\"), Hu = y.from([\n        69,\n        0,\n        0,\n        0,\n        9,\n        0,\n        0,\n        0,\n        0,\n        0\n    ]), Gu = a((r)=>{\n        if (!r || !r.portal && !r.rows) return Hu;\n        let e = r.portal || \"\", t = r.rows || 0, n = y.byteLength(e), i = 4 + n + 1 + 4, s = y.allocUnsafe(1 + i);\n        return s[0] = 69, s.writeInt32BE(i, 1), s.write(e, 5, \"utf-8\"), s[n + 5] = 0, s.writeUInt32BE(t, s.length - 4), s;\n    }, \"execute\"), $u = a((r, e)=>{\n        let t = y.allocUnsafe(16);\n        return t.writeInt32BE(16, 0), t.writeInt16BE(1234, 4), t.writeInt16BE(5678, 6), t.writeInt32BE(r, 8), t.writeInt32BE(e, 12), t;\n    }, \"cancel\"), en = a((r, e)=>{\n        let n = 4 + y.byteLength(e) + 1, i = y.allocUnsafe(1 + n);\n        return i[0] = r, i.writeInt32BE(n, 1), i.write(e, 5, \"utf-8\"), i[n] = 0, i;\n    }, \"cstringMessage\"), Vu = M.addCString(\"P\").flush(68), Ku = M.addCString(\"S\").flush(68), zu = a((r)=>r.name ? en(68, `${r.type}${r.name || \"\"}`) : r.type === \"P\" ? Vu : Ku, \"describe\"), Yu = a((r)=>{\n        let e = `${r.type}${r.name || \"\"}`;\n        return en(67, e);\n    }, \"close\"), Zu = a((r)=>M.add(r).flush(100), \"copyData\"), Ju = a((r)=>en(102, r), \"copyFail\"), St = a((r)=>y.from([\n            r,\n            0,\n            0,\n            0,\n            4\n        ]), \"codeOnlyBuffer\"), Xu = St(72), ec = St(83), tc = St(88), rc = St(99), nc = {\n        startup: Du,\n        password: Uu,\n        requestSsl: ku,\n        sendSASLInitialResponseMessage: Ou,\n        sendSCRAMClientFinalMessage: Nu,\n        query: qu,\n        parse: Qu,\n        bind: ju,\n        execute: Gu,\n        describe: zu,\n        close: Yu,\n        flush: a(()=>Xu, \"flush\"),\n        sync: a(()=>ec, \"sync\"),\n        end: a(()=>tc, \"end\"),\n        copyData: Zu,\n        copyDone: a(()=>rc, \"copyDone\"),\n        copyFail: Ju,\n        cancel: $u\n    };\n    xt.serialize = nc;\n});\nvar bs = I((vt)=>{\n    \"use strict\";\n    p();\n    Object.defineProperty(vt, \"__esModule\", {\n        value: !0\n    });\n    vt.BufferReader = void 0;\n    var ic = y.allocUnsafe(0), rn = class rn {\n        constructor(e = 0){\n            this.offset = e, this.buffer = ic, this.encoding = \"utf-8\";\n        }\n        setBuffer(e, t) {\n            this.offset = e, this.buffer = t;\n        }\n        int16() {\n            let e = this.buffer.readInt16BE(this.offset);\n            return this.offset += 2, e;\n        }\n        byte() {\n            let e = this.buffer[this.offset];\n            return this.offset++, e;\n        }\n        int32() {\n            let e = this.buffer.readInt32BE(this.offset);\n            return this.offset += 4, e;\n        }\n        string(e) {\n            let t = this.buffer.toString(this.encoding, this.offset, this.offset + e);\n            return this.offset += e, t;\n        }\n        cstring() {\n            let e = this.offset, t = e;\n            for(; this.buffer[t++] !== 0;);\n            return this.offset = t, this.buffer.toString(this.encoding, e, t - 1);\n        }\n        bytes(e) {\n            let t = this.buffer.slice(this.offset, this.offset + e);\n            return this.offset += e, t;\n        }\n    };\n    a(rn, \"BufferReader\");\n    var tn = rn;\n    vt.BufferReader = tn;\n});\nvar vs = I((Et)=>{\n    \"use strict\";\n    p();\n    Object.defineProperty(Et, \"__esModule\", {\n        value: !0\n    });\n    Et.Parser = void 0;\n    var D = Yr(), sc = bs(), nn = 1, oc = 4, Ss = nn + oc, xs = y.allocUnsafe(0), on = class on {\n        constructor(e){\n            if (this.buffer = xs, this.bufferLength = 0, this.bufferOffset = 0, this.reader = new sc.BufferReader, e?.mode === \"binary\") throw new Error(\"Binary mode not supported yet\");\n            this.mode = e?.mode || \"text\";\n        }\n        parse(e, t) {\n            this.mergeBuffer(e);\n            let n = this.bufferOffset + this.bufferLength, i = this.bufferOffset;\n            for(; i + Ss <= n;){\n                let s = this.buffer[i], o = this.buffer.readUInt32BE(i + nn), u = nn + o;\n                if (u + i <= n) {\n                    let c = this.handlePacket(i + Ss, s, o, this.buffer);\n                    t(c), i += u;\n                } else break;\n            }\n            i === n ? (this.buffer = xs, this.bufferLength = 0, this.bufferOffset = 0) : (this.bufferLength = n - i, this.bufferOffset = i);\n        }\n        mergeBuffer(e) {\n            if (this.bufferLength > 0) {\n                let t = this.bufferLength + e.byteLength;\n                if (t + this.bufferOffset > this.buffer.byteLength) {\n                    let i;\n                    if (t <= this.buffer.byteLength && this.bufferOffset >= this.bufferLength) i = this.buffer;\n                    else {\n                        let s = this.buffer.byteLength * 2;\n                        for(; t >= s;)s *= 2;\n                        i = y.allocUnsafe(s);\n                    }\n                    this.buffer.copy(i, 0, this.bufferOffset, this.bufferOffset + this.bufferLength), this.buffer = i, this.bufferOffset = 0;\n                }\n                e.copy(this.buffer, this.bufferOffset + this.bufferLength), this.bufferLength = t;\n            } else this.buffer = e, this.bufferOffset = 0, this.bufferLength = e.byteLength;\n        }\n        handlePacket(e, t, n, i) {\n            switch(t){\n                case 50:\n                    return D.bindComplete;\n                case 49:\n                    return D.parseComplete;\n                case 51:\n                    return D.closeComplete;\n                case 110:\n                    return D.noData;\n                case 115:\n                    return D.portalSuspended;\n                case 99:\n                    return D.copyDone;\n                case 87:\n                    return D.replicationStart;\n                case 73:\n                    return D.emptyQuery;\n                case 68:\n                    return this.parseDataRowMessage(e, n, i);\n                case 67:\n                    return this.parseCommandCompleteMessage(e, n, i);\n                case 90:\n                    return this.parseReadyForQueryMessage(e, n, i);\n                case 65:\n                    return this.parseNotificationMessage(e, n, i);\n                case 82:\n                    return this.parseAuthenticationResponse(e, n, i);\n                case 83:\n                    return this.parseParameterStatusMessage(e, n, i);\n                case 75:\n                    return this.parseBackendKeyData(e, n, i);\n                case 69:\n                    return this.parseErrorMessage(e, n, i, \"error\");\n                case 78:\n                    return this.parseErrorMessage(e, n, i, \"notice\");\n                case 84:\n                    return this.parseRowDescriptionMessage(e, n, i);\n                case 116:\n                    return this.parseParameterDescriptionMessage(e, n, i);\n                case 71:\n                    return this.parseCopyInMessage(e, n, i);\n                case 72:\n                    return this.parseCopyOutMessage(e, n, i);\n                case 100:\n                    return this.parseCopyData(e, n, i);\n                default:\n                    return new D.DatabaseError(\"received invalid response: \" + t.toString(16), n, \"error\");\n            }\n        }\n        parseReadyForQueryMessage(e, t, n) {\n            this.reader.setBuffer(e, n);\n            let i = this.reader.string(1);\n            return new D.ReadyForQueryMessage(t, i);\n        }\n        parseCommandCompleteMessage(e, t, n) {\n            this.reader.setBuffer(e, n);\n            let i = this.reader.cstring();\n            return new D.CommandCompleteMessage(t, i);\n        }\n        parseCopyData(e, t, n) {\n            let i = n.slice(e, e + (t - 4));\n            return new D.CopyDataMessage(t, i);\n        }\n        parseCopyInMessage(e, t, n) {\n            return this.parseCopyMessage(e, t, n, \"copyInResponse\");\n        }\n        parseCopyOutMessage(e, t, n) {\n            return this.parseCopyMessage(e, t, n, \"copyOutResponse\");\n        }\n        parseCopyMessage(e, t, n, i) {\n            this.reader.setBuffer(e, n);\n            let s = this.reader.byte() !== 0, o = this.reader.int16(), u = new D.CopyResponse(t, i, s, o);\n            for(let c = 0; c < o; c++)u.columnTypes[c] = this.reader.int16();\n            return u;\n        }\n        parseNotificationMessage(e, t, n) {\n            this.reader.setBuffer(e, n);\n            let i = this.reader.int32(), s = this.reader.cstring(), o = this.reader.cstring();\n            return new D.NotificationResponseMessage(t, i, s, o);\n        }\n        parseRowDescriptionMessage(e, t, n) {\n            this.reader.setBuffer(e, n);\n            let i = this.reader.int16(), s = new D.RowDescriptionMessage(t, i);\n            for(let o = 0; o < i; o++)s.fields[o] = this.parseField();\n            return s;\n        }\n        parseField() {\n            let e = this.reader.cstring(), t = this.reader.int32(), n = this.reader.int16(), i = this.reader.int32(), s = this.reader.int16(), o = this.reader.int32(), u = this.reader.int16() === 0 ? \"text\" : \"binary\";\n            return new D.Field(e, t, n, i, s, o, u);\n        }\n        parseParameterDescriptionMessage(e, t, n) {\n            this.reader.setBuffer(e, n);\n            let i = this.reader.int16(), s = new D.ParameterDescriptionMessage(t, i);\n            for(let o = 0; o < i; o++)s.dataTypeIDs[o] = this.reader.int32();\n            return s;\n        }\n        parseDataRowMessage(e, t, n) {\n            this.reader.setBuffer(e, n);\n            let i = this.reader.int16(), s = new Array(i);\n            for(let o = 0; o < i; o++){\n                let u = this.reader.int32();\n                s[o] = u === -1 ? null : this.reader.string(u);\n            }\n            return new D.DataRowMessage(t, s);\n        }\n        parseParameterStatusMessage(e, t, n) {\n            this.reader.setBuffer(e, n);\n            let i = this.reader.cstring(), s = this.reader.cstring();\n            return new D.ParameterStatusMessage(t, i, s);\n        }\n        parseBackendKeyData(e, t, n) {\n            this.reader.setBuffer(e, n);\n            let i = this.reader.int32(), s = this.reader.int32();\n            return new D.BackendKeyDataMessage(t, i, s);\n        }\n        parseAuthenticationResponse(e, t, n) {\n            this.reader.setBuffer(e, n);\n            let i = this.reader.int32(), s = {\n                name: \"authenticationOk\",\n                length: t\n            };\n            switch(i){\n                case 0:\n                    break;\n                case 3:\n                    s.length === 8 && (s.name = \"authenticationCleartextPassword\");\n                    break;\n                case 5:\n                    if (s.length === 12) {\n                        s.name = \"authenticationMD5Password\";\n                        let u = this.reader.bytes(4);\n                        return new D.AuthenticationMD5Password(t, u);\n                    }\n                    break;\n                case 10:\n                    s.name = \"authenticationSASL\", s.mechanisms = [];\n                    let o;\n                    do o = this.reader.cstring(), o && s.mechanisms.push(o);\n                    while (o);\n                    break;\n                case 11:\n                    s.name = \"authenticationSASLContinue\", s.data = this.reader.string(t - 8);\n                    break;\n                case 12:\n                    s.name = \"authenticationSASLFinal\", s.data = this.reader.string(t - 8);\n                    break;\n                default:\n                    throw new Error(\"Unknown authenticationOk message type \" + i);\n            }\n            return s;\n        }\n        parseErrorMessage(e, t, n, i) {\n            this.reader.setBuffer(e, n);\n            let s = {}, o = this.reader.string(1);\n            for(; o !== \"\\x00\";)s[o] = this.reader.cstring(), o = this.reader.string(1);\n            let u = s.M, c = i === \"notice\" ? new D.NoticeMessage(t, u) : new D.DatabaseError(u, t, i);\n            return c.severity = s.S, c.code = s.C, c.detail = s.D, c.hint = s.H, c.position = s.P, c.internalPosition = s.p, c.internalQuery = s.q, c.where = s.W, c.schema = s.s, c.table = s.t, c.column = s.c, c.dataType = s.d, c.constraint = s.n, c.file = s.F, c.line = s.L, c.routine = s.R, c;\n        }\n    };\n    a(on, \"Parser\");\n    var sn = on;\n    Et.Parser = sn;\n});\nvar an = I((Se)=>{\n    \"use strict\";\n    p();\n    Object.defineProperty(Se, \"__esModule\", {\n        value: !0\n    });\n    Se.DatabaseError = Se.serialize = Se.parse = void 0;\n    var ac = Yr();\n    Object.defineProperty(Se, \"DatabaseError\", {\n        enumerable: !0,\n        get: a(function() {\n            return ac.DatabaseError;\n        }, \"get\")\n    });\n    var uc = ws();\n    Object.defineProperty(Se, \"serialize\", {\n        enumerable: !0,\n        get: a(function() {\n            return uc.serialize;\n        }, \"get\")\n    });\n    var cc = vs();\n    function hc(r, e) {\n        let t = new cc.Parser;\n        return r.on(\"data\", (n)=>t.parse(n, e)), new Promise((n)=>r.on(\"end\", ()=>n()));\n    }\n    a(hc, \"parse\");\n    Se.parse = hc;\n});\nvar Es = {};\nie(Es, {\n    connect: ()=>lc\n});\nfunction lc({ socket: r, servername: e }) {\n    return r.startTls(e), r;\n}\nvar _s = z(()=>{\n    \"use strict\";\n    p();\n    a(lc, \"connect\");\n});\nvar hn = I((tf, Ts)=>{\n    \"use strict\";\n    p();\n    var As = (wt(), N(ys)), fc = we().EventEmitter, { parse: pc, serialize: Q } = an(), Cs = Q.flush(), dc = Q.sync(), yc = Q.end(), cn = class cn extends fc {\n        constructor(e){\n            super(), e = e || {}, this.stream = e.stream || new As.Socket, this._keepAlive = e.keepAlive, this._keepAliveInitialDelayMillis = e.keepAliveInitialDelayMillis, this.lastBuffer = !1, this.parsedStatements = {}, this.ssl = e.ssl || !1, this._ending = !1, this._emitMessage = !1;\n            var t = this;\n            this.on(\"newListener\", function(n) {\n                n === \"message\" && (t._emitMessage = !0);\n            });\n        }\n        connect(e, t) {\n            var n = this;\n            this._connecting = !0, this.stream.setNoDelay(!0), this.stream.connect(e, t), this.stream.once(\"connect\", function() {\n                n._keepAlive && n.stream.setKeepAlive(!0, n._keepAliveInitialDelayMillis), n.emit(\"connect\");\n            });\n            let i = a(function(s) {\n                n._ending && (s.code === \"ECONNRESET\" || s.code === \"EPIPE\") || n.emit(\"error\", s);\n            }, \"reportStreamError\");\n            if (this.stream.on(\"error\", i), this.stream.on(\"close\", function() {\n                n.emit(\"end\");\n            }), !this.ssl) return this.attachListeners(this.stream);\n            this.stream.once(\"data\", function(s) {\n                var o = s.toString(\"utf8\");\n                switch(o){\n                    case \"S\":\n                        break;\n                    case \"N\":\n                        return n.stream.end(), n.emit(\"error\", new Error(\"The server does not support SSL connections\"));\n                    default:\n                        return n.stream.end(), n.emit(\"error\", new Error(\"There was an error establishing an SSL connection\"));\n                }\n                var u = (_s(), N(Es));\n                let c = {\n                    socket: n.stream\n                };\n                n.ssl !== !0 && (Object.assign(c, n.ssl), \"key\" in n.ssl && (c.key = n.ssl.key)), As.isIP(t) === 0 && (c.servername = t);\n                try {\n                    n.stream = u.connect(c);\n                } catch (h) {\n                    return n.emit(\"error\", h);\n                }\n                n.attachListeners(n.stream), n.stream.on(\"error\", i), n.emit(\"sslconnect\");\n            });\n        }\n        attachListeners(e) {\n            e.on(\"end\", ()=>{\n                this.emit(\"end\");\n            }), pc(e, (t)=>{\n                var n = t.name === \"error\" ? \"errorMessage\" : t.name;\n                this._emitMessage && this.emit(\"message\", t), this.emit(n, t);\n            });\n        }\n        requestSsl() {\n            this.stream.write(Q.requestSsl());\n        }\n        startup(e) {\n            this.stream.write(Q.startup(e));\n        }\n        cancel(e, t) {\n            this._send(Q.cancel(e, t));\n        }\n        password(e) {\n            this._send(Q.password(e));\n        }\n        sendSASLInitialResponseMessage(e, t) {\n            this._send(Q.sendSASLInitialResponseMessage(e, t));\n        }\n        sendSCRAMClientFinalMessage(e) {\n            this._send(Q.sendSCRAMClientFinalMessage(e));\n        }\n        _send(e) {\n            return this.stream.writable ? this.stream.write(e) : !1;\n        }\n        query(e) {\n            this._send(Q.query(e));\n        }\n        parse(e) {\n            this._send(Q.parse(e));\n        }\n        bind(e) {\n            this._send(Q.bind(e));\n        }\n        execute(e) {\n            this._send(Q.execute(e));\n        }\n        flush() {\n            this.stream.writable && this.stream.write(Cs);\n        }\n        sync() {\n            this._ending = !0, this._send(Cs), this._send(dc);\n        }\n        ref() {\n            this.stream.ref();\n        }\n        unref() {\n            this.stream.unref();\n        }\n        end() {\n            if (this._ending = !0, !this._connecting || !this.stream.writable) {\n                this.stream.end();\n                return;\n            }\n            return this.stream.write(yc, ()=>{\n                this.stream.end();\n            });\n        }\n        close(e) {\n            this._send(Q.close(e));\n        }\n        describe(e) {\n            this._send(Q.describe(e));\n        }\n        sendCopyFromChunk(e) {\n            this._send(Q.copyData(e));\n        }\n        endCopyFrom() {\n            this._send(Q.copyDone());\n        }\n        sendCopyFail(e) {\n            this._send(Q.copyFail(e));\n        }\n    };\n    a(cn, \"Connection\");\n    var un = cn;\n    Ts.exports = un;\n});\nvar Bs = I((of, Ps)=>{\n    \"use strict\";\n    p();\n    var mc = we().EventEmitter, sf = (He(), N(je)), gc = et(), ln = qi(), wc = Zi(), bc = mt(), Sc = gt(), Is = ps(), xc = Xe(), vc = hn(), fn = class fn extends mc {\n        constructor(e){\n            super(), this.connectionParameters = new Sc(e), this.user = this.connectionParameters.user, this.database = this.connectionParameters.database, this.port = this.connectionParameters.port, this.host = this.connectionParameters.host, Object.defineProperty(this, \"password\", {\n                configurable: !0,\n                enumerable: !1,\n                writable: !0,\n                value: this.connectionParameters.password\n            }), this.replication = this.connectionParameters.replication;\n            var t = e || {};\n            this._Promise = t.Promise || S.Promise, this._types = new bc(t.types), this._ending = !1, this._connecting = !1, this._connected = !1, this._connectionError = !1, this._queryable = !0, this.connection = t.connection || new vc({\n                stream: t.stream,\n                ssl: this.connectionParameters.ssl,\n                keepAlive: t.keepAlive || !1,\n                keepAliveInitialDelayMillis: t.keepAliveInitialDelayMillis || 0,\n                encoding: this.connectionParameters.client_encoding || \"utf8\"\n            }), this.queryQueue = [], this.binary = t.binary || xc.binary, this.processID = null, this.secretKey = null, this.ssl = this.connectionParameters.ssl || !1, this.ssl && this.ssl.key && Object.defineProperty(this.ssl, \"key\", {\n                enumerable: !1\n            }), this._connectionTimeoutMillis = t.connectionTimeoutMillis || 0;\n        }\n        _errorAllQueries(e) {\n            let t = a((n)=>{\n                m.nextTick(()=>{\n                    n.handleError(e, this.connection);\n                });\n            }, \"enqueueError\");\n            this.activeQuery && (t(this.activeQuery), this.activeQuery = null), this.queryQueue.forEach(t), this.queryQueue.length = 0;\n        }\n        _connect(e) {\n            var t = this, n = this.connection;\n            if (this._connectionCallback = e, this._connecting || this._connected) {\n                let i = new Error(\"Client has already been connected. You cannot reuse a client.\");\n                m.nextTick(()=>{\n                    e(i);\n                });\n                return;\n            }\n            this._connecting = !0, this.connectionTimeoutHandle, this._connectionTimeoutMillis > 0 && (this.connectionTimeoutHandle = setTimeout(()=>{\n                n._ending = !0, n.stream.destroy(new Error(\"timeout expired\"));\n            }, this._connectionTimeoutMillis)), this.host && this.host.indexOf(\"/\") === 0 ? n.connect(this.host + \"/.s.PGSQL.\" + this.port) : n.connect(this.port, this.host), n.on(\"connect\", function() {\n                t.ssl ? n.requestSsl() : n.startup(t.getStartupConf());\n            }), n.on(\"sslconnect\", function() {\n                n.startup(t.getStartupConf());\n            }), this._attachListeners(n), n.once(\"end\", ()=>{\n                let i = this._ending ? new Error(\"Connection terminated\") : new Error(\"Connection terminated unexpectedly\");\n                clearTimeout(this.connectionTimeoutHandle), this._errorAllQueries(i), this._ending || (this._connecting && !this._connectionError ? this._connectionCallback ? this._connectionCallback(i) : this._handleErrorEvent(i) : this._connectionError || this._handleErrorEvent(i)), m.nextTick(()=>{\n                    this.emit(\"end\");\n                });\n            });\n        }\n        connect(e) {\n            if (e) {\n                this._connect(e);\n                return;\n            }\n            return new this._Promise((t, n)=>{\n                this._connect((i)=>{\n                    i ? n(i) : t();\n                });\n            });\n        }\n        _attachListeners(e) {\n            e.on(\"authenticationCleartextPassword\", this._handleAuthCleartextPassword.bind(this)), e.on(\"authenticationMD5Password\", this._handleAuthMD5Password.bind(this)), e.on(\"authenticationSASL\", this._handleAuthSASL.bind(this)), e.on(\"authenticationSASLContinue\", this._handleAuthSASLContinue.bind(this)), e.on(\"authenticationSASLFinal\", this._handleAuthSASLFinal.bind(this)), e.on(\"backendKeyData\", this._handleBackendKeyData.bind(this)), e.on(\"error\", this._handleErrorEvent.bind(this)), e.on(\"errorMessage\", this._handleErrorMessage.bind(this)), e.on(\"readyForQuery\", this._handleReadyForQuery.bind(this)), e.on(\"notice\", this._handleNotice.bind(this)), e.on(\"rowDescription\", this._handleRowDescription.bind(this)), e.on(\"dataRow\", this._handleDataRow.bind(this)), e.on(\"portalSuspended\", this._handlePortalSuspended.bind(this)), e.on(\"emptyQuery\", this._handleEmptyQuery.bind(this)), e.on(\"commandComplete\", this._handleCommandComplete.bind(this)), e.on(\"parseComplete\", this._handleParseComplete.bind(this)), e.on(\"copyInResponse\", this._handleCopyInResponse.bind(this)), e.on(\"copyData\", this._handleCopyData.bind(this)), e.on(\"notification\", this._handleNotification.bind(this));\n        }\n        _checkPgPass(e) {\n            let t = this.connection;\n            typeof this.password == \"function\" ? this._Promise.resolve().then(()=>this.password()).then((n)=>{\n                if (n !== void 0) {\n                    if (typeof n != \"string\") {\n                        t.emit(\"error\", new TypeError(\"Password must be a string\"));\n                        return;\n                    }\n                    this.connectionParameters.password = this.password = n;\n                } else this.connectionParameters.password = this.password = null;\n                e();\n            }).catch((n)=>{\n                t.emit(\"error\", n);\n            }) : this.password !== null ? e() : wc(this.connectionParameters, (n)=>{\n                n !== void 0 && (this.connectionParameters.password = this.password = n), e();\n            });\n        }\n        _handleAuthCleartextPassword(e) {\n            this._checkPgPass(()=>{\n                this.connection.password(this.password);\n            });\n        }\n        _handleAuthMD5Password(e) {\n            this._checkPgPass(()=>{\n                let t = gc.postgresMd5PasswordHash(this.user, this.password, e.salt);\n                this.connection.password(t);\n            });\n        }\n        _handleAuthSASL(e) {\n            this._checkPgPass(()=>{\n                this.saslSession = ln.startSession(e.mechanisms), this.connection.sendSASLInitialResponseMessage(this.saslSession.mechanism, this.saslSession.response);\n            });\n        }\n        _handleAuthSASLContinue(e) {\n            ln.continueSession(this.saslSession, this.password, e.data), this.connection.sendSCRAMClientFinalMessage(this.saslSession.response);\n        }\n        _handleAuthSASLFinal(e) {\n            ln.finalizeSession(this.saslSession, e.data), this.saslSession = null;\n        }\n        _handleBackendKeyData(e) {\n            this.processID = e.processID, this.secretKey = e.secretKey;\n        }\n        _handleReadyForQuery(e) {\n            this._connecting && (this._connecting = !1, this._connected = !0, clearTimeout(this.connectionTimeoutHandle), this._connectionCallback && (this._connectionCallback(null, this), this._connectionCallback = null), this.emit(\"connect\"));\n            let { activeQuery: t } = this;\n            this.activeQuery = null, this.readyForQuery = !0, t && t.handleReadyForQuery(this.connection), this._pulseQueryQueue();\n        }\n        _handleErrorWhileConnecting(e) {\n            if (!this._connectionError) {\n                if (this._connectionError = !0, clearTimeout(this.connectionTimeoutHandle), this._connectionCallback) return this._connectionCallback(e);\n                this.emit(\"error\", e);\n            }\n        }\n        _handleErrorEvent(e) {\n            if (this._connecting) return this._handleErrorWhileConnecting(e);\n            this._queryable = !1, this._errorAllQueries(e), this.emit(\"error\", e);\n        }\n        _handleErrorMessage(e) {\n            if (this._connecting) return this._handleErrorWhileConnecting(e);\n            let t = this.activeQuery;\n            if (!t) {\n                this._handleErrorEvent(e);\n                return;\n            }\n            this.activeQuery = null, t.handleError(e, this.connection);\n        }\n        _handleRowDescription(e) {\n            this.activeQuery.handleRowDescription(e);\n        }\n        _handleDataRow(e) {\n            this.activeQuery.handleDataRow(e);\n        }\n        _handlePortalSuspended(e) {\n            this.activeQuery.handlePortalSuspended(this.connection);\n        }\n        _handleEmptyQuery(e) {\n            this.activeQuery.handleEmptyQuery(this.connection);\n        }\n        _handleCommandComplete(e) {\n            this.activeQuery.handleCommandComplete(e, this.connection);\n        }\n        _handleParseComplete(e) {\n            this.activeQuery.name && (this.connection.parsedStatements[this.activeQuery.name] = this.activeQuery.text);\n        }\n        _handleCopyInResponse(e) {\n            this.activeQuery.handleCopyInResponse(this.connection);\n        }\n        _handleCopyData(e) {\n            this.activeQuery.handleCopyData(e, this.connection);\n        }\n        _handleNotification(e) {\n            this.emit(\"notification\", e);\n        }\n        _handleNotice(e) {\n            this.emit(\"notice\", e);\n        }\n        getStartupConf() {\n            var e = this.connectionParameters, t = {\n                user: e.user,\n                database: e.database\n            }, n = e.application_name || e.fallback_application_name;\n            return n && (t.application_name = n), e.replication && (t.replication = \"\" + e.replication), e.statement_timeout && (t.statement_timeout = String(parseInt(e.statement_timeout, 10))), e.lock_timeout && (t.lock_timeout = String(parseInt(e.lock_timeout, 10))), e.idle_in_transaction_session_timeout && (t.idle_in_transaction_session_timeout = String(parseInt(e.idle_in_transaction_session_timeout, 10))), e.options && (t.options = e.options), t;\n        }\n        cancel(e, t) {\n            if (e.activeQuery === t) {\n                var n = this.connection;\n                this.host && this.host.indexOf(\"/\") === 0 ? n.connect(this.host + \"/.s.PGSQL.\" + this.port) : n.connect(this.port, this.host), n.on(\"connect\", function() {\n                    n.cancel(e.processID, e.secretKey);\n                });\n            } else e.queryQueue.indexOf(t) !== -1 && e.queryQueue.splice(e.queryQueue.indexOf(t), 1);\n        }\n        setTypeParser(e, t, n) {\n            return this._types.setTypeParser(e, t, n);\n        }\n        getTypeParser(e, t) {\n            return this._types.getTypeParser(e, t);\n        }\n        escapeIdentifier(e) {\n            return '\"' + e.replace(/\"/g, '\"\"') + '\"';\n        }\n        escapeLiteral(e) {\n            for(var t = !1, n = \"'\", i = 0; i < e.length; i++){\n                var s = e[i];\n                s === \"'\" ? n += s + s : s === \"\\\\\" ? (n += s + s, t = !0) : n += s;\n            }\n            return n += \"'\", t === !0 && (n = \" E\" + n), n;\n        }\n        _pulseQueryQueue() {\n            if (this.readyForQuery === !0) if (this.activeQuery = this.queryQueue.shift(), this.activeQuery) {\n                this.readyForQuery = !1, this.hasExecuted = !0;\n                let e = this.activeQuery.submit(this.connection);\n                e && m.nextTick(()=>{\n                    this.activeQuery.handleError(e, this.connection), this.readyForQuery = !0, this._pulseQueryQueue();\n                });\n            } else this.hasExecuted && (this.activeQuery = null, this.emit(\"drain\"));\n        }\n        query(e, t, n) {\n            var i, s, o, u, c;\n            if (e == null) throw new TypeError(\"Client was passed a null or undefined query\");\n            return typeof e.submit == \"function\" ? (o = e.query_timeout || this.connectionParameters.query_timeout, s = i = e, typeof t == \"function\" && (i.callback = i.callback || t)) : (o = this.connectionParameters.query_timeout, i = new Is(e, t, n), i.callback || (s = new this._Promise((h, l)=>{\n                i.callback = (d, b)=>d ? l(d) : h(b);\n            }))), o && (c = i.callback, u = setTimeout(()=>{\n                var h = new Error(\"Query read timeout\");\n                m.nextTick(()=>{\n                    i.handleError(h, this.connection);\n                }), c(h), i.callback = ()=>{};\n                var l = this.queryQueue.indexOf(i);\n                l > -1 && this.queryQueue.splice(l, 1), this._pulseQueryQueue();\n            }, o), i.callback = (h, l)=>{\n                clearTimeout(u), c(h, l);\n            }), this.binary && !i.binary && (i.binary = !0), i._result && !i._result._types && (i._result._types = this._types), this._queryable ? this._ending ? (m.nextTick(()=>{\n                i.handleError(new Error(\"Client was closed and is not queryable\"), this.connection);\n            }), s) : (this.queryQueue.push(i), this._pulseQueryQueue(), s) : (m.nextTick(()=>{\n                i.handleError(new Error(\"Client has encountered a connection error and is not queryable\"), this.connection);\n            }), s);\n        }\n        ref() {\n            this.connection.ref();\n        }\n        unref() {\n            this.connection.unref();\n        }\n        end(e) {\n            if (this._ending = !0, !this.connection._connecting) if (e) e();\n            else return this._Promise.resolve();\n            if (this.activeQuery || !this._queryable ? this.connection.stream.destroy() : this.connection.end(), e) this.connection.once(\"end\", e);\n            else return new this._Promise((t)=>{\n                this.connection.once(\"end\", t);\n            });\n        }\n    };\n    a(fn, \"Client\");\n    var _t = fn;\n    _t.Query = Is;\n    Ps.exports = _t;\n});\nvar Ms = I((cf, Fs)=>{\n    \"use strict\";\n    p();\n    var Ec = we().EventEmitter, Ls = a(function() {}, \"NOOP\"), Rs = a((r, e)=>{\n        let t = r.findIndex(e);\n        return t === -1 ? void 0 : r.splice(t, 1)[0];\n    }, \"removeWhere\"), yn = class yn {\n        constructor(e, t, n){\n            this.client = e, this.idleListener = t, this.timeoutId = n;\n        }\n    };\n    a(yn, \"IdleItem\");\n    var pn = yn, mn = class mn {\n        constructor(e){\n            this.callback = e;\n        }\n    };\n    a(mn, \"PendingItem\");\n    var Ne = mn;\n    function _c() {\n        throw new Error(\"Release called on client which has already been released to the pool.\");\n    }\n    a(_c, \"throwOnDoubleRelease\");\n    function At(r, e) {\n        if (e) return {\n            callback: e,\n            result: void 0\n        };\n        let t, n, i = a(function(o, u) {\n            o ? t(o) : n(u);\n        }, \"cb\"), s = new r(function(o, u) {\n            n = o, t = u;\n        }).catch((o)=>{\n            throw Error.captureStackTrace(o), o;\n        });\n        return {\n            callback: i,\n            result: s\n        };\n    }\n    a(At, \"promisify\");\n    function Ac(r, e) {\n        return a(function t(n) {\n            n.client = e, e.removeListener(\"error\", t), e.on(\"error\", ()=>{\n                r.log(\"additional client error after disconnection due to error\", n);\n            }), r._remove(e), r.emit(\"error\", n, e);\n        }, \"idleListener\");\n    }\n    a(Ac, \"makeIdleListener\");\n    var gn = class gn extends Ec {\n        constructor(e, t){\n            super(), this.options = Object.assign({}, e), e != null && \"password\" in e && Object.defineProperty(this.options, \"password\", {\n                configurable: !0,\n                enumerable: !1,\n                writable: !0,\n                value: e.password\n            }), e != null && e.ssl && e.ssl.key && Object.defineProperty(this.options.ssl, \"key\", {\n                enumerable: !1\n            }), this.options.max = this.options.max || this.options.poolSize || 10, this.options.maxUses = this.options.maxUses || 1 / 0, this.options.allowExitOnIdle = this.options.allowExitOnIdle || !1, this.options.maxLifetimeSeconds = this.options.maxLifetimeSeconds || 0, this.log = this.options.log || function() {}, this.Client = this.options.Client || t || Ct().Client, this.Promise = this.options.Promise || S.Promise, typeof this.options.idleTimeoutMillis > \"u\" && (this.options.idleTimeoutMillis = 1e4), this._clients = [], this._idle = [], this._expired = new WeakSet, this._pendingQueue = [], this._endCallback = void 0, this.ending = !1, this.ended = !1;\n        }\n        _isFull() {\n            return this._clients.length >= this.options.max;\n        }\n        _pulseQueue() {\n            if (this.log(\"pulse queue\"), this.ended) {\n                this.log(\"pulse queue ended\");\n                return;\n            }\n            if (this.ending) {\n                this.log(\"pulse queue on ending\"), this._idle.length && this._idle.slice().map((t)=>{\n                    this._remove(t.client);\n                }), this._clients.length || (this.ended = !0, this._endCallback());\n                return;\n            }\n            if (!this._pendingQueue.length) {\n                this.log(\"no queued requests\");\n                return;\n            }\n            if (!this._idle.length && this._isFull()) return;\n            let e = this._pendingQueue.shift();\n            if (this._idle.length) {\n                let t = this._idle.pop();\n                clearTimeout(t.timeoutId);\n                let n = t.client;\n                n.ref && n.ref();\n                let i = t.idleListener;\n                return this._acquireClient(n, e, i, !1);\n            }\n            if (!this._isFull()) return this.newClient(e);\n            throw new Error(\"unexpected condition\");\n        }\n        _remove(e) {\n            let t = Rs(this._idle, (n)=>n.client === e);\n            t !== void 0 && clearTimeout(t.timeoutId), this._clients = this._clients.filter((n)=>n !== e), e.end(), this.emit(\"remove\", e);\n        }\n        connect(e) {\n            if (this.ending) {\n                let i = new Error(\"Cannot use a pool after calling end on the pool\");\n                return e ? e(i) : this.Promise.reject(i);\n            }\n            let t = At(this.Promise, e), n = t.result;\n            if (this._isFull() || this._idle.length) {\n                if (this._idle.length && m.nextTick(()=>this._pulseQueue()), !this.options.connectionTimeoutMillis) return this._pendingQueue.push(new Ne(t.callback)), n;\n                let i = a((u, c, h)=>{\n                    clearTimeout(o), t.callback(u, c, h);\n                }, \"queueCallback\"), s = new Ne(i), o = setTimeout(()=>{\n                    Rs(this._pendingQueue, (u)=>u.callback === i), s.timedOut = !0, t.callback(new Error(\"timeout exceeded when trying to connect\"));\n                }, this.options.connectionTimeoutMillis);\n                return this._pendingQueue.push(s), n;\n            }\n            return this.newClient(new Ne(t.callback)), n;\n        }\n        newClient(e) {\n            let t = new this.Client(this.options);\n            this._clients.push(t);\n            let n = Ac(this, t);\n            this.log(\"checking client timeout\");\n            let i, s = !1;\n            this.options.connectionTimeoutMillis && (i = setTimeout(()=>{\n                this.log(\"ending client due to timeout\"), s = !0, t.connection ? t.connection.stream.destroy() : t.end();\n            }, this.options.connectionTimeoutMillis)), this.log(\"connecting new client\"), t.connect((o)=>{\n                if (i && clearTimeout(i), t.on(\"error\", n), o) this.log(\"client failed to connect\", o), this._clients = this._clients.filter((u)=>u !== t), s && (o.message = \"Connection terminated due to connection timeout\"), this._pulseQueue(), e.timedOut || e.callback(o, void 0, Ls);\n                else {\n                    if (this.log(\"new client connected\"), this.options.maxLifetimeSeconds !== 0) {\n                        let u = setTimeout(()=>{\n                            this.log(\"ending client due to expired lifetime\"), this._expired.add(t), this._idle.findIndex((h)=>h.client === t) !== -1 && this._acquireClient(t, new Ne((h, l, d)=>d()), n, !1);\n                        }, this.options.maxLifetimeSeconds * 1e3);\n                        u.unref(), t.once(\"end\", ()=>clearTimeout(u));\n                    }\n                    return this._acquireClient(t, e, n, !0);\n                }\n            });\n        }\n        _acquireClient(e, t, n, i) {\n            i && this.emit(\"connect\", e), this.emit(\"acquire\", e), e.release = this._releaseOnce(e, n), e.removeListener(\"error\", n), t.timedOut ? i && this.options.verify ? this.options.verify(e, e.release) : e.release() : i && this.options.verify ? this.options.verify(e, (s)=>{\n                if (s) return e.release(s), t.callback(s, void 0, Ls);\n                t.callback(void 0, e, e.release);\n            }) : t.callback(void 0, e, e.release);\n        }\n        _releaseOnce(e, t) {\n            let n = !1;\n            return (i)=>{\n                n && _c(), n = !0, this._release(e, t, i);\n            };\n        }\n        _release(e, t, n) {\n            if (e.on(\"error\", t), e._poolUseCount = (e._poolUseCount || 0) + 1, this.emit(\"release\", n, e), n || this.ending || !e._queryable || e._ending || e._poolUseCount >= this.options.maxUses) {\n                e._poolUseCount >= this.options.maxUses && this.log(\"remove expended client\"), this._remove(e), this._pulseQueue();\n                return;\n            }\n            if (this._expired.has(e)) {\n                this.log(\"remove expired client\"), this._expired.delete(e), this._remove(e), this._pulseQueue();\n                return;\n            }\n            let s;\n            this.options.idleTimeoutMillis && (s = setTimeout(()=>{\n                this.log(\"remove idle client\"), this._remove(e);\n            }, this.options.idleTimeoutMillis), this.options.allowExitOnIdle && s.unref()), this.options.allowExitOnIdle && e.unref(), this._idle.push(new pn(e, t, s)), this._pulseQueue();\n        }\n        query(e, t, n) {\n            if (typeof e == \"function\") {\n                let s = At(this.Promise, e);\n                return x(function() {\n                    return s.callback(new Error(\"Passing a function as the first parameter to pool.query is not supported\"));\n                }), s.result;\n            }\n            typeof t == \"function\" && (n = t, t = void 0);\n            let i = At(this.Promise, n);\n            return n = i.callback, this.connect((s, o)=>{\n                if (s) return n(s);\n                let u = !1, c = a((h)=>{\n                    u || (u = !0, o.release(h), n(h));\n                }, \"onError\");\n                o.once(\"error\", c), this.log(\"dispatching query\");\n                try {\n                    o.query(e, t, (h, l)=>{\n                        if (this.log(\"query dispatched\"), o.removeListener(\"error\", c), !u) return u = !0, o.release(h), h ? n(h) : n(void 0, l);\n                    });\n                } catch (h) {\n                    return o.release(h), n(h);\n                }\n            }), i.result;\n        }\n        end(e) {\n            if (this.log(\"ending\"), this.ending) {\n                let n = new Error(\"Called end on pool more than once\");\n                return e ? e(n) : this.Promise.reject(n);\n            }\n            this.ending = !0;\n            let t = At(this.Promise, e);\n            return this._endCallback = t.callback, this._pulseQueue(), t.result;\n        }\n        get waitingCount() {\n            return this._pendingQueue.length;\n        }\n        get idleCount() {\n            return this._idle.length;\n        }\n        get expiredCount() {\n            return this._clients.reduce((e, t)=>e + (this._expired.has(t) ? 1 : 0), 0);\n        }\n        get totalCount() {\n            return this._clients.length;\n        }\n    };\n    a(gn, \"Pool\");\n    var dn = gn;\n    Fs.exports = dn;\n});\nvar Ds = {};\nie(Ds, {\n    default: ()=>Cc\n});\nvar Cc, ks = z(()=>{\n    \"use strict\";\n    p();\n    Cc = {};\n});\nvar Us = I((pf, Tc)=>{\n    Tc.exports = {\n        name: \"pg\",\n        version: \"8.8.0\",\n        description: \"PostgreSQL client - pure javascript & libpq with the same API\",\n        keywords: [\n            \"database\",\n            \"libpq\",\n            \"pg\",\n            \"postgre\",\n            \"postgres\",\n            \"postgresql\",\n            \"rdbms\"\n        ],\n        homepage: \"https://github.com/brianc/node-postgres\",\n        repository: {\n            type: \"git\",\n            url: \"git://github.com/brianc/node-postgres.git\",\n            directory: \"packages/pg\"\n        },\n        author: \"Brian Carlson <brian.m.carlson@gmail.com>\",\n        main: \"./lib\",\n        dependencies: {\n            \"buffer-writer\": \"2.0.0\",\n            \"packet-reader\": \"1.0.0\",\n            \"pg-connection-string\": \"^2.5.0\",\n            \"pg-pool\": \"^3.5.2\",\n            \"pg-protocol\": \"^1.5.0\",\n            \"pg-types\": \"^2.1.0\",\n            pgpass: \"1.x\"\n        },\n        devDependencies: {\n            async: \"2.6.4\",\n            bluebird: \"3.5.2\",\n            co: \"4.6.0\",\n            \"pg-copy-streams\": \"0.3.0\"\n        },\n        peerDependencies: {\n            \"pg-native\": \">=3.0.1\"\n        },\n        peerDependenciesMeta: {\n            \"pg-native\": {\n                optional: !0\n            }\n        },\n        scripts: {\n            test: \"make test-all\"\n        },\n        files: [\n            \"lib\",\n            \"SPONSORS.md\"\n        ],\n        license: \"MIT\",\n        engines: {\n            node: \">= 8.0.0\"\n        },\n        gitHead: \"c99fb2c127ddf8d712500db2c7b9a5491a178655\"\n    };\n});\nvar qs = I((df, Ns)=>{\n    \"use strict\";\n    p();\n    var Os = we().EventEmitter, Ic = (He(), N(je)), wn = et(), qe = Ns.exports = function(r, e, t) {\n        Os.call(this), r = wn.normalizeQueryConfig(r, e, t), this.text = r.text, this.values = r.values, this.name = r.name, this.callback = r.callback, this.state = \"new\", this._arrayMode = r.rowMode === \"array\", this._emitRowEvents = !1, this.on(\"newListener\", (function(n) {\n            n === \"row\" && (this._emitRowEvents = !0);\n        }).bind(this));\n    };\n    Ic.inherits(qe, Os);\n    var Pc = {\n        sqlState: \"code\",\n        statementPosition: \"position\",\n        messagePrimary: \"message\",\n        context: \"where\",\n        schemaName: \"schema\",\n        tableName: \"table\",\n        columnName: \"column\",\n        dataTypeName: \"dataType\",\n        constraintName: \"constraint\",\n        sourceFile: \"file\",\n        sourceLine: \"line\",\n        sourceFunction: \"routine\"\n    };\n    qe.prototype.handleError = function(r) {\n        var e = this.native.pq.resultErrorFields();\n        if (e) for(var t in e){\n            var n = Pc[t] || t;\n            r[n] = e[t];\n        }\n        this.callback ? this.callback(r) : this.emit(\"error\", r), this.state = \"error\";\n    };\n    qe.prototype.then = function(r, e) {\n        return this._getPromise().then(r, e);\n    };\n    qe.prototype.catch = function(r) {\n        return this._getPromise().catch(r);\n    };\n    qe.prototype._getPromise = function() {\n        return this._promise ? this._promise : (this._promise = new Promise((function(r, e) {\n            this._once(\"end\", r), this._once(\"error\", e);\n        }).bind(this)), this._promise);\n    };\n    qe.prototype.submit = function(r) {\n        this.state = \"running\";\n        var e = this;\n        this.native = r.native, r.native.arrayMode = this._arrayMode;\n        var t = a(function(s, o, u) {\n            if (r.native.arrayMode = !1, x(function() {\n                e.emit(\"_done\");\n            }), s) return e.handleError(s);\n            e._emitRowEvents && (u.length > 1 ? o.forEach((c, h)=>{\n                c.forEach((l)=>{\n                    e.emit(\"row\", l, u[h]);\n                });\n            }) : o.forEach(function(c) {\n                e.emit(\"row\", c, u);\n            })), e.state = \"end\", e.emit(\"end\", u), e.callback && e.callback(null, u);\n        }, \"after\");\n        if (m.domain && (t = m.domain.bind(t)), this.name) {\n            this.name.length > 63 && (console.error(\"Warning! Postgres only supports 63 characters for query names.\"), console.error(\"You supplied %s (%s)\", this.name, this.name.length), console.error(\"This can cause conflicts and silent errors executing queries\"));\n            var n = (this.values || []).map(wn.prepareValue);\n            if (r.namedQueries[this.name]) {\n                if (this.text && r.namedQueries[this.name] !== this.text) {\n                    let s = new Error(`Pre\\\npared statements must be unique - '${this.name}' was used for a different statem\\\nent`);\n                    return t(s);\n                }\n                return r.native.execute(this.name, n, t);\n            }\n            return r.native.prepare(this.name, this.text, n.length, function(s) {\n                return s ? t(s) : (r.namedQueries[e.name] = e.text, e.native.execute(e.name, n, t));\n            });\n        } else if (this.values) {\n            if (!Array.isArray(this.values)) {\n                let s = new Error(\"Query values must be an array\");\n                return t(s);\n            }\n            var i = this.values.map(wn.prepareValue);\n            r.native.query(this.text, i, t);\n        } else r.native.query(this.text, t);\n    };\n});\nvar Hs = I((wf, js)=>{\n    \"use strict\";\n    p();\n    var Bc = (ks(), N(Ds)), Lc = mt(), gf = Us(), Qs = we().EventEmitter, Rc = (He(), N(je)), Fc = gt(), Ws = qs(), J = js.exports = function(r) {\n        Qs.call(this), r = r || {}, this._Promise = r.Promise || S.Promise, this._types = new Lc(r.types), this.native = new Bc({\n            types: this._types\n        }), this._queryQueue = [], this._ending = !1, this._connecting = !1, this._connected = !1, this._queryable = !0;\n        var e = this.connectionParameters = new Fc(r);\n        this.user = e.user, Object.defineProperty(this, \"password\", {\n            configurable: !0,\n            enumerable: !1,\n            writable: !0,\n            value: e.password\n        }), this.database = e.database, this.host = e.host, this.port = e.port, this.namedQueries = {};\n    };\n    J.Query = Ws;\n    Rc.inherits(J, Qs);\n    J.prototype._errorAllQueries = function(r) {\n        let e = a((t)=>{\n            m.nextTick(()=>{\n                t.native = this.native, t.handleError(r);\n            });\n        }, \"enqueueError\");\n        this._hasActiveQuery() && (e(this._activeQuery), this._activeQuery = null), this._queryQueue.forEach(e), this._queryQueue.length = 0;\n    };\n    J.prototype._connect = function(r) {\n        var e = this;\n        if (this._connecting) {\n            m.nextTick(()=>r(new Error(\"Client has already been connected. You cannot reuse a client.\")));\n            return;\n        }\n        this._connecting = !0, this.connectionParameters.getLibpqConnectionString(function(t, n) {\n            if (t) return r(t);\n            e.native.connect(n, function(i) {\n                if (i) return e.native.end(), r(i);\n                e._connected = !0, e.native.on(\"error\", function(s) {\n                    e._queryable = !1, e._errorAllQueries(s), e.emit(\"error\", s);\n                }), e.native.on(\"notification\", function(s) {\n                    e.emit(\"notification\", {\n                        channel: s.relname,\n                        payload: s.extra\n                    });\n                }), e.emit(\"connect\"), e._pulseQueryQueue(!0), r();\n            });\n        });\n    };\n    J.prototype.connect = function(r) {\n        if (r) {\n            this._connect(r);\n            return;\n        }\n        return new this._Promise((e, t)=>{\n            this._connect((n)=>{\n                n ? t(n) : e();\n            });\n        });\n    };\n    J.prototype.query = function(r, e, t) {\n        var n, i, s, o, u;\n        if (r == null) throw new TypeError(\"Client was passed a null or undefined query\");\n        if (typeof r.submit == \"function\") s = r.query_timeout || this.connectionParameters.query_timeout, i = n = r, typeof e == \"function\" && (r.callback = e);\n        else if (s = this.connectionParameters.query_timeout, n = new Ws(r, e, t), !n.callback) {\n            let c, h;\n            i = new this._Promise((l, d)=>{\n                c = l, h = d;\n            }), n.callback = (l, d)=>l ? h(l) : c(d);\n        }\n        return s && (u = n.callback, o = setTimeout(()=>{\n            var c = new Error(\"Query read timeout\");\n            m.nextTick(()=>{\n                n.handleError(c, this.connection);\n            }), u(c), n.callback = ()=>{};\n            var h = this._queryQueue.indexOf(n);\n            h > -1 && this._queryQueue.splice(h, 1), this._pulseQueryQueue();\n        }, s), n.callback = (c, h)=>{\n            clearTimeout(o), u(c, h);\n        }), this._queryable ? this._ending ? (n.native = this.native, m.nextTick(()=>{\n            n.handleError(new Error(\"Client was closed and is not queryable\"));\n        }), i) : (this._queryQueue.push(n), this._pulseQueryQueue(), i) : (n.native = this.native, m.nextTick(()=>{\n            n.handleError(new Error(\"Client has encountered a connection error and is not queryable\"));\n        }), i);\n    };\n    J.prototype.end = function(r) {\n        var e = this;\n        this._ending = !0, this._connected || this.once(\"connect\", this.end.bind(this, r));\n        var t;\n        return r || (t = new this._Promise(function(n, i) {\n            r = a((s)=>s ? i(s) : n(), \"cb\");\n        })), this.native.end(function() {\n            e._errorAllQueries(new Error(\"Connection terminated\")), m.nextTick(()=>{\n                e.emit(\"end\"), r && r();\n            });\n        }), t;\n    };\n    J.prototype._hasActiveQuery = function() {\n        return this._activeQuery && this._activeQuery.state !== \"error\" && this._activeQuery.state !== \"end\";\n    };\n    J.prototype._pulseQueryQueue = function(r) {\n        if (this._connected && !this._hasActiveQuery()) {\n            var e = this._queryQueue.shift();\n            if (!e) {\n                r || this.emit(\"drain\");\n                return;\n            }\n            this._activeQuery = e, e.submit(this);\n            var t = this;\n            e.once(\"_done\", function() {\n                t._pulseQueryQueue();\n            });\n        }\n    };\n    J.prototype.cancel = function(r) {\n        this._activeQuery === r ? this.native.cancel(function() {}) : this._queryQueue.indexOf(r) !== -1 && this._queryQueue.splice(this._queryQueue.indexOf(r), 1);\n    };\n    J.prototype.ref = function() {};\n    J.prototype.unref = function() {};\n    J.prototype.setTypeParser = function(r, e, t) {\n        return this._types.setTypeParser(r, e, t);\n    };\n    J.prototype.getTypeParser = function(r, e) {\n        return this._types.getTypeParser(r, e);\n    };\n});\nvar bn = I((xf, Gs)=>{\n    \"use strict\";\n    p();\n    Gs.exports = Hs();\n});\nvar Ct = I((Ef, rt)=>{\n    \"use strict\";\n    p();\n    var Mc = Bs(), Dc = Xe(), kc = hn(), Uc = Ms(), { DatabaseError: Oc } = an(), Nc = a((r)=>{\n        var e;\n        return e = class extends Uc {\n            constructor(n){\n                super(n, r);\n            }\n        }, a(e, \"BoundPool\"), e;\n    }, \"poolFactory\"), Sn = a(function(r) {\n        this.defaults = Dc, this.Client = r, this.Query = this.Client.Query, this.Pool = Nc(this.Client), this._pools = [], this.Connection = kc, this.types = Je(), this.DatabaseError = Oc;\n    }, \"PG\");\n    typeof m.env.NODE_PG_FORCE_NATIVE < \"u\" ? rt.exports = new Sn(bn()) : (rt.exports = new Sn(Mc), Object.defineProperty(rt.exports, \"native\", {\n        configurable: !0,\n        enumerable: !1,\n        get () {\n            var r = null;\n            try {\n                r = new Sn(bn());\n            } catch (e) {\n                if (e.code !== \"MODULE_NOT_FOUND\") throw e;\n            }\n            return Object.defineProperty(rt.exports, \"native\", {\n                value: r\n            }), r;\n        }\n    }));\n});\np();\nvar Tt = Te(Ct());\nwt();\np();\npr();\nwt();\nvar Ks = Te(et()), zs = Te(mt());\nvar xn = class xn extends Error {\n    constructor(){\n        super(...arguments);\n        _(this, \"name\", \"NeonDbError\");\n        _(this, \"severity\");\n        _(this, \"code\");\n        _(this, \"detail\");\n        _(this, \"hint\");\n        _(this, \"position\");\n        _(this, \"internalPosition\");\n        _(this, \"internalQuery\");\n        _(this, \"where\");\n        _(this, \"schema\");\n        _(this, \"table\");\n        _(this, \"column\");\n        _(this, \"dataType\");\n        _(this, \"constraint\");\n        _(this, \"file\");\n        _(this, \"line\");\n        _(this, \"routine\");\n        _(this, \"sourceError\");\n    }\n};\na(xn, \"NeonDbError\");\nvar Ae = xn, $s = \"transaction() expects an array of queries, or a function returning an array of queries\", qc = [\n    \"severity\",\n    \"code\",\n    \"detail\",\n    \"hint\",\n    \"position\",\n    \"internalPosition\",\n    \"internalQuery\",\n    \"where\",\n    \"schema\",\n    \"table\",\n    \"column\",\n    \"dataType\",\n    \"constraint\",\n    \"file\",\n    \"line\",\n    \"routine\"\n];\nfunction Ys(r, { arrayMode: e, fullResults: t, fetchOptions: n, isolationLevel: i, readOnly: s, deferrable: o, queryCallback: u, resultCallback: c } = {}) {\n    if (!r) throw new Error(\"No database connection string was provided to `neon()`. Perhaps an environment variable has not been set?\");\n    let h;\n    try {\n        h = fr(r);\n    } catch  {\n        throw new Error(\"Database connection string provided to `neon()` is not a valid URL. Connection string: \" + String(r));\n    }\n    let { protocol: l, username: d, password: b, hostname: C, port: B, pathname: W } = h;\n    if (l !== \"postgres:\" && l !== \"postgresql:\" || !d || !b || !C || !W) throw new Error(\"Database connection string format for `neon()` should be: postgresql://user:password@host.tld/dbname?option=value\");\n    function X(A, ...w) {\n        let P, V;\n        if (typeof A == \"string\") P = A, V = w[1], w = w[0] ?? [];\n        else {\n            P = \"\";\n            for(let j = 0; j < A.length; j++)P += A[j], j < w.length && (P += \"$\" + (j + 1));\n        }\n        w = w.map((j)=>(0, Ks.prepareValue)(j));\n        let k = {\n            query: P,\n            params: w\n        };\n        return u && u(k), Qc(de, k, V);\n    }\n    a(X, \"resolve\"), X.transaction = async (A, w)=>{\n        if (typeof A == \"function\" && (A = A(X)), !Array.isArray(A)) throw new Error($s);\n        A.forEach((k)=>{\n            if (k[Symbol.toStringTag] !== \"NeonQueryPromise\") throw new Error($s);\n        });\n        let P = A.map((k)=>k.parameterizedQuery), V = A.map((k)=>k.opts ?? {});\n        return de(P, V, w);\n    };\n    async function de(A, w, P) {\n        let { fetchEndpoint: V, fetchFunction: k } = _e, j = typeof V == \"function\" ? V(C, B) : V, ce = Array.isArray(A) ? {\n            queries: A\n        } : A, ee = n ?? {}, R = e ?? !1, G = t ?? !1, he = i, ye = s, xe = o;\n        P !== void 0 && (P.fetchOptions !== void 0 && (ee = {\n            ...ee,\n            ...P.fetchOptions\n        }), P.arrayMode !== void 0 && (R = P.arrayMode), P.fullResults !== void 0 && (G = P.fullResults), P.isolationLevel !== void 0 && (he = P.isolationLevel), P.readOnly !== void 0 && (ye = P.readOnly), P.deferrable !== void 0 && (xe = P.deferrable)), w !== void 0 && !Array.isArray(w) && w.fetchOptions !== void 0 && (ee = {\n            ...ee,\n            ...w.fetchOptions\n        });\n        let me = {\n            \"Neon-Connection-String\": r,\n            \"Neon-Raw-Text-Output\": \"true\",\n            \"Neon-Array-Mode\": \"true\"\n        };\n        Array.isArray(A) && (he !== void 0 && (me[\"Neon-Batch-Isolation-Level\"] = he), ye !== void 0 && (me[\"Neon-Batch-Read-Only\"] = String(ye)), xe !== void 0 && (me[\"Neon-Batch-Deferrable\"] = String(xe)));\n        let se;\n        try {\n            se = await (k ?? fetch)(j, {\n                method: \"POST\",\n                body: JSON.stringify(ce),\n                headers: me,\n                ...ee\n            });\n        } catch (oe) {\n            let U = new Ae(`Error connecting to database: ${oe.message}`);\n            throw U.sourceError = oe, U;\n        }\n        if (se.ok) {\n            let oe = await se.json();\n            if (Array.isArray(A)) {\n                let U = oe.results;\n                if (!Array.isArray(U)) throw new Ae(\"Neon internal error: unexpected result format\");\n                return U.map((K, le)=>{\n                    let It = w[le] ?? {}, Xs = It.arrayMode ?? R, eo = It.fullResults ?? G;\n                    return Vs(K, {\n                        arrayMode: Xs,\n                        fullResults: eo,\n                        parameterizedQuery: A[le],\n                        resultCallback: c,\n                        types: It.types\n                    });\n                });\n            } else {\n                let U = w ?? {}, K = U.arrayMode ?? R, le = U.fullResults ?? G;\n                return Vs(oe, {\n                    arrayMode: K,\n                    fullResults: le,\n                    parameterizedQuery: A,\n                    resultCallback: c,\n                    types: U.types\n                });\n            }\n        } else {\n            let { status: oe } = se;\n            if (oe === 400) {\n                let U = await se.json(), K = new Ae(U.message);\n                for (let le of qc)K[le] = U[le] ?? void 0;\n                throw K;\n            } else {\n                let U = await se.text();\n                throw new Ae(`Server erro\\\nr (HTTP status ${oe}): ${U}`);\n            }\n        }\n    }\n    return a(de, \"execute\"), X;\n}\na(Ys, \"neon\");\nfunction Qc(r, e, t) {\n    return {\n        [Symbol.toStringTag]: \"NeonQueryPromise\",\n        parameterizedQuery: e,\n        opts: t,\n        then: a((n, i)=>r(e, t).then(n, i), \"then\"),\n        catch: a((n)=>r(e, t).catch(n), \"catch\"),\n        finally: a((n)=>r(e, t).finally(n), \"finally\")\n    };\n}\na(Qc, \"createNeonQueryPromise\");\nfunction Vs(r, { arrayMode: e, fullResults: t, parameterizedQuery: n, resultCallback: i, types: s }) {\n    let o = new zs.default(s), u = r.fields.map((l)=>l.name), c = r.fields.map((l)=>o.getTypeParser(l.dataTypeID)), h = e === !0 ? r.rows.map((l)=>l.map((d, b)=>d === null ? null : c[b](d))) : r.rows.map((l)=>Object.fromEntries(l.map((d, b)=>[\n                u[b],\n                d === null ? null : c[b](d)\n            ])));\n    return i && i(n, r, h, {\n        arrayMode: e,\n        fullResults: t\n    }), t ? (r.viaNeonFetch = !0, r.rowAsArray = e, r.rows = h, r._parsers = c, r._types = o, r) : h;\n}\na(Vs, \"processQueryResult\");\nvar Js = Te(gt()), Qe = Te(Ct());\nvar En = class En extends Tt.Client {\n    constructor(t){\n        super(t);\n        this.config = t;\n    }\n    get neonConfig() {\n        return this.connection.stream;\n    }\n    connect(t) {\n        let { neonConfig: n } = this;\n        n.forceDisablePgSSL && (this.ssl = this.connection.ssl = !1), this.ssl && n.useSecureWebSocket && console.warn(\"SSL is enabled for both Postgres (e.g. ?sslmode=require in the connection string + forceDisablePgSSL = false) and the WebSocket tunnel (useSecureWebSocket = true). Double encryption will increase latency and CPU usage. It may be appropriate to disable SSL in the Postgres connection parameters or set forceDisablePgSSL = true.\");\n        let i = this.config?.host !== void 0 || this.config?.connectionString !== void 0 || m.env.PGHOST !== void 0, s = m.env.USER ?? m.env.USERNAME;\n        if (!i && this.host === \"localhost\" && this.user === s && this.database === s && this.password === null) throw new Error(`No datab\\\nase host or connection string was set, and key parameters have default values (h\\\nost: localhost, user: ${s}, db: ${s}, password: null). Is an environment variabl\\\ne missing? Alternatively, if you intended to connect with these parameters, plea\\\nse set the host to 'localhost' explicitly.`);\n        let o = super.connect(t), u = n.pipelineTLS && this.ssl, c = n.pipelineConnect === \"password\";\n        if (!u && !n.pipelineConnect) return o;\n        let h = this.connection;\n        if (u && h.on(\"connect\", ()=>h.stream.emit(\"data\", \"S\")), c) {\n            h.removeAllListeners(\"authenticationCleartextPassword\"), h.removeAllListeners(\"readyForQuery\"), h.once(\"readyForQuery\", ()=>h.on(\"readyForQuery\", this._handleReadyForQuery.bind(this)));\n            let l = this.ssl ? \"sslconnect\" : \"connect\";\n            h.on(l, ()=>{\n                this._handleAuthCleartextPassword(), this._handleReadyForQuery();\n            });\n        }\n        return o;\n    }\n    async _handleAuthSASLContinue(t) {\n        let n = this.saslSession, i = this.password, s = t.data;\n        if (n.message !== \"SASLInitialResponse\" || typeof i != \"string\" || typeof s != \"string\") throw new Error(\"SASL: protocol error\");\n        let o = Object.fromEntries(s.split(\",\").map((U)=>{\n            if (!/^.=/.test(U)) throw new Error(\"SASL: Invalid attribute pair entry\");\n            let K = U[0], le = U.substring(2);\n            return [\n                K,\n                le\n            ];\n        })), u = o.r, c = o.s, h = o.i;\n        if (!u || !/^[!-+--~]+$/.test(u)) throw new Error(\"SASL: SCRAM-SERVER-FIRST-MESSAGE: nonce missing/unprintable\");\n        if (!c || !/^(?:[a-zA-Z0-9+/]{4})*(?:[a-zA-Z0-9+/]{2}==|[a-zA-Z0-9+/]{3}=)?$/.test(c)) throw new Error(\"SASL: SCRAM-SERVER-FIRST-MESSAGE: salt missing/not base64\");\n        if (!h || !/^[1-9][0-9]*$/.test(h)) throw new Error(\"SASL: SCRAM-SERVER-FIRST-MESSAGE: missing/invalid iteration count\");\n        if (!u.startsWith(n.clientNonce)) throw new Error(\"SASL: SCRAM-SERVER-FIRST-MESSAGE: server nonce does not start with client nonce\");\n        if (u.length === n.clientNonce.length) throw new Error(\"SASL: SCRAM-SERVER-FIRST-MESSAGE: server nonce is too short\");\n        let l = parseInt(h, 10), d = y.from(c, \"base64\"), b = new TextEncoder, C = b.encode(i), B = await g.subtle.importKey(\"raw\", C, {\n            name: \"HMAC\",\n            hash: {\n                name: \"SHA-256\"\n            }\n        }, !1, [\n            \"sign\"\n        ]), W = new Uint8Array(await g.subtle.sign(\"HMAC\", B, y.concat([\n            d,\n            y.from([\n                0,\n                0,\n                0,\n                1\n            ])\n        ]))), X = W;\n        for(var de = 0; de < l - 1; de++)W = new Uint8Array(await g.subtle.sign(\"HMAC\", B, W)), X = y.from(X.map((U, K)=>X[K] ^ W[K]));\n        let A = X, w = await g.subtle.importKey(\"raw\", A, {\n            name: \"HMAC\",\n            hash: {\n                name: \"SHA-256\"\n            }\n        }, !1, [\n            \"sign\"\n        ]), P = new Uint8Array(await g.subtle.sign(\"HMAC\", w, b.encode(\"Client Key\"))), V = await g.subtle.digest(\"SHA-256\", P), k = \"n=*,r=\" + n.clientNonce, j = \"r=\" + u + \",s=\" + c + \",i=\" + l, ce = \"c=biws,r=\" + u, ee = k + \",\" + j + \",\" + ce, R = await g.subtle.importKey(\"raw\", V, {\n            name: \"HMAC\",\n            hash: {\n                name: \"SHA-256\"\n            }\n        }, !1, [\n            \"sign\"\n        ]);\n        var G = new Uint8Array(await g.subtle.sign(\"HMAC\", R, b.encode(ee))), he = y.from(P.map((U, K)=>P[K] ^ G[K])), ye = he.toString(\"base64\");\n        let xe = await g.subtle.importKey(\"raw\", A, {\n            name: \"HMAC\",\n            hash: {\n                name: \"SHA-256\"\n            }\n        }, !1, [\n            \"sign\"\n        ]), me = await g.subtle.sign(\"HMAC\", xe, b.encode(\"Server Key\")), se = await g.subtle.importKey(\"raw\", me, {\n            name: \"HMAC\",\n            hash: {\n                name: \"SHA-256\"\n            }\n        }, !1, [\n            \"sign\"\n        ]);\n        var oe = y.from(await g.subtle.sign(\"HMAC\", se, b.encode(ee)));\n        n.message = \"SASLResponse\", n.serverSignature = oe.toString(\"base64\"), n.response = ce + \",p=\" + ye, this.connection.sendSCRAMClientFinalMessage(this.saslSession.response);\n    }\n};\na(En, \"NeonClient\");\nvar vn = En;\nfunction Wc(r, e) {\n    if (e) return {\n        callback: e,\n        result: void 0\n    };\n    let t, n, i = a(function(o, u) {\n        o ? t(o) : n(u);\n    }, \"cb\"), s = new r(function(o, u) {\n        n = o, t = u;\n    });\n    return {\n        callback: i,\n        result: s\n    };\n}\na(Wc, \"promisify\");\nvar _n = class _n extends Tt.Pool {\n    constructor(){\n        super(...arguments);\n        _(this, \"Client\", vn);\n        _(this, \"hasFetchUnsupportedListeners\", !1);\n    }\n    on(t, n) {\n        return t !== \"error\" && (this.hasFetchUnsupportedListeners = !0), super.on(t, n);\n    }\n    query(t, n, i) {\n        if (!_e.poolQueryViaFetch || this.hasFetchUnsupportedListeners || typeof t == \"function\") return super.query(t, n, i);\n        typeof n == \"function\" && (i = n, n = void 0);\n        let s = Wc(this.Promise, i);\n        i = s.callback;\n        try {\n            let o = new Js.default(this.options), u = encodeURIComponent, c = encodeURI, h = `postgresql://${u(o.user)}:${u(o.password)}@${u(o.host)}/${c(o.database)}`, l = typeof t == \"string\" ? t : t.text, d = n ?? t.values ?? [];\n            Ys(h, {\n                fullResults: !0,\n                arrayMode: t.rowMode === \"array\"\n            })(l, d, {\n                types: t.types ?? this.options?.types\n            }).then((C)=>i(void 0, C)).catch((C)=>i(C));\n        } catch (o) {\n            i(o);\n        }\n        return s.result;\n    }\n};\na(_n, \"NeonPool\");\nvar Zs = _n;\nvar export_ClientBase = Qe.ClientBase;\nvar export_Connection = Qe.Connection;\nvar export_DatabaseError = Qe.DatabaseError;\nvar export_Query = Qe.Query;\nvar export_defaults = Qe.defaults;\nvar export_types = Qe.types;\n /*! Bundled license information:\n\nieee754/index.js:\n  (*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> *)\n\nbuffer/index.js:\n  (*!\n   * The buffer module from node.js, for the browser.\n   *\n   * @author   Feross Aboukhadijeh <https://feross.org>\n   * @license  MIT\n   *)\n*/ \n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQG5lb25kYXRhYmFzZS9zZXJ2ZXJsZXNzL2luZGV4Lm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztBQUFBLElBQUlBLEtBQUdDLE9BQU9DLE1BQU07QUFBQyxJQUFJQyxLQUFHRixPQUFPRyxjQUFjO0FBQUMsSUFBSUMsS0FBR0osT0FBT0ssd0JBQXdCO0FBQUMsSUFBSUMsS0FBR04sT0FBT08sbUJBQW1CO0FBQUMsSUFBSUMsS0FBR1IsT0FBT1MsY0FBYyxFQUFDQyxLQUFHVixPQUFPVyxTQUFTLENBQUNDLGNBQWM7QUFBQyxJQUFJQyxLQUFHLENBQUNDLEdBQUVDLEdBQUVDLElBQUlELEtBQUtELElBQUVaLEdBQUdZLEdBQUVDLEdBQUU7UUFBQ0UsWUFBVyxDQUFDO1FBQUVDLGNBQWEsQ0FBQztRQUFFQyxVQUFTLENBQUM7UUFBRUMsT0FBTUo7SUFBQyxLQUMzUUYsQ0FBQyxDQUFDQyxFQUFFLEdBQUNDO0FBQUUsSUFBSUssSUFBRSxDQUFDUCxHQUFFQyxJQUFJYixHQUFHWSxHQUFFLFFBQU87UUFBQ00sT0FBTUw7UUFBRUcsY0FBYSxDQUFDO0lBQUM7QUFBRyxJQUFJSSxJQUFFLENBQUNSLEdBQUVDLElBQUksSUFBS0QsQ0FBQUEsS0FBSUMsQ0FBQUEsSUFBRUQsRUFBRUEsSUFBRSxFQUFDLEdBQUdDLENBQUFBO0FBQUcsSUFBSVEsSUFBRSxDQUFDVCxHQUFFQyxJQUFJLElBQUtBLENBQUFBLEtBQUdELEVBQUUsQ0FBQ0MsSUFBRTtZQUFDUyxTQUFRLENBQUM7UUFBQyxHQUFHQSxPQUFPLEVBQUNULElBQUdBLEVBQUVTLE9BQU8sR0FBRUMsS0FBRyxDQUFDWCxHQUFFQztJQUFLLElBQUksSUFBSUMsS0FBS0QsRUFDcExiLEdBQUdZLEdBQUVFLEdBQUU7UUFBQ1UsS0FBSVgsQ0FBQyxDQUFDQyxFQUFFO1FBQUNDLFlBQVcsQ0FBQztJQUFDO0FBQUUsR0FBRVUsS0FBRyxDQUFDYixHQUFFQyxHQUFFQyxHQUFFWTtJ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RUFBRTtZQUFDeXRCLEdBQUcvMUMsR0FBRTtnQkFBQ2cyQyxhQUFZLENBQUM7Z0JBQUUxQyxXQUFVMzJDLEVBQUV1NUIsT0FBTyxLQUFHO1lBQ3pFLEdBQUdqMkIsR0FBRUMsR0FBRTtnQkFBQzYxQixPQUFNcDVCLEVBQUVvNUIsS0FBSyxJQUFFLElBQUksQ0FBQ25RLE9BQU8sRUFBRW1RO1lBQUssR0FBR3puQixJQUFJLENBQUNsTyxDQUFBQSxJQUFHNUMsRUFBRSxLQUFLLEdBQUU0QyxJQUFJdzZCLEtBQUssQ0FBQ3g2QixDQUFBQSxJQUFHNUMsRUFDakY0QztRQUFHLEVBQUMsT0FBTWQsR0FBRTtZQUFDOUIsRUFBRThCO1FBQUU7UUFBQyxPQUFPRCxFQUFFcXVDLE1BQU07SUFBQTtBQUFDO0FBQUUxd0MsRUFBRXU3QyxJQUFHO0FBQVksSUFBSUcsS0FBR0g7QUFBRyxJQUFJSSxvQkFBa0JiLEdBQUdjLFVBQVU7QUFBQyxJQUFJQyxvQkFBa0JmLEdBQUd4QyxVQUFVO0FBQUMsSUFBSXdELHVCQUFxQmhCLEdBQUdsYixhQUFhO0FBQ2hMLElBQUltYyxlQUFhakIsR0FBR3JMLEtBQUs7QUFBQyxJQUFJdU0sa0JBQWdCbEIsR0FBR2xmLFFBQVE7QUFBQyxJQUFJcWdCLGVBQWFuQixHQUFHL2hCLEtBQUs7QUFHSixDQUMvRTs7Ozs7Ozs7Ozs7O0FBWUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zYW5kd2ljaC1tYWtlci8uL25vZGVfbW9kdWxlcy9AbmVvbmRhdGFiYXNlL3NlcnZlcmxlc3MvaW5kZXgubWpzPzcwOTkiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIHRvPU9iamVjdC5jcmVhdGU7dmFyIENlPU9iamVjdC5kZWZpbmVQcm9wZXJ0eTt2YXIgcm89T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjt2YXIgbm89T2JqZWN0LmdldE93blByb3BlcnR5TmFtZXM7dmFyIGlvPU9iamVjdC5nZXRQcm90b3R5cGVPZixzbz1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O3ZhciBvbz0ocixlLHQpPT5lIGluIHI/Q2UocixlLHtlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMCx3cml0YWJsZTohMCx2YWx1ZTp0fSk6XG5yW2VdPXQ7dmFyIGE9KHIsZSk9PkNlKHIsXCJuYW1lXCIse3ZhbHVlOmUsY29uZmlndXJhYmxlOiEwfSk7dmFyIHo9KHIsZSk9PigpPT4ociYmKGU9cihyPTApKSxlKTt2YXIgST0ocixlKT0+KCk9PihlfHxyKChlPXtleHBvcnRzOnt9fSkuZXhwb3J0cyxlKSxlLmV4cG9ydHMpLGllPShyLGUpPT57Zm9yKHZhciB0IGluIGUpXG5DZShyLHQse2dldDplW3RdLGVudW1lcmFibGU6ITB9KX0sQW49KHIsZSx0LG4pPT57aWYoZSYmdHlwZW9mIGU9PVwib2JqZWN0XCJ8fHR5cGVvZiBlPT1cblwiZnVuY3Rpb25cIilmb3IobGV0IGkgb2Ygbm8oZSkpIXNvLmNhbGwocixpKSYmaSE9PXQmJkNlKHIsaSx7Z2V0OigpPT5lW2ldLGVudW1lcmFibGU6IShuPVxucm8oZSxpKSl8fG4uZW51bWVyYWJsZX0pO3JldHVybiByfTt2YXIgVGU9KHIsZSx0KT0+KHQ9ciE9bnVsbD90byhpbyhyKSk6e30sQW4oZXx8IXJ8fCFyLl9fZXNNb2R1bGU/Q2UodCxcImRlZmF1bHRcIix7XG52YWx1ZTpyLGVudW1lcmFibGU6ITB9KTp0LHIpKSxOPXI9PkFuKENlKHt9LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHIpO3ZhciBfPShyLGUsdCk9Pm9vKHIsdHlwZW9mIGUhPVwic3ltYm9sXCI/ZStcIlwiOmUsdCk7dmFyIEluPUkobnQ9PntcInVzZSBzdHJpY3RcIjtwKCk7bnQuYnl0ZUxlbmd0aD11bztudC50b0J5dGVBcnJheT1obztudC5mcm9tQnl0ZUFycmF5PVxucG87dmFyIGFlPVtdLHRlPVtdLGFvPXR5cGVvZiBVaW50OEFycmF5PFwidVwiP1VpbnQ4QXJyYXk6QXJyYXksUHQ9XCJBQkNERUZHSElKS0xNTk9cXFxuUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrL1wiO2Zvcih2ZT0wLENuPVB0Lmxlbmd0aDt2ZTxDbjsrK3ZlKVxuYWVbdmVdPVB0W3ZlXSx0ZVtQdC5jaGFyQ29kZUF0KHZlKV09dmU7dmFyIHZlLENuO3RlWzQ1XT02Mjt0ZVs5NV09NjM7ZnVuY3Rpb24gVG4ocil7XG52YXIgZT1yLmxlbmd0aDtpZihlJTQ+MCl0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIHN0cmluZy4gTGVuZ3RoIG11c3QgYmUgYSBtdWx0aXBcXFxubGUgb2YgNFwiKTt2YXIgdD1yLmluZGV4T2YoXCI9XCIpO3Q9PT0tMSYmKHQ9ZSk7dmFyIG49dD09PWU/MDo0LXQlNDtyZXR1cm5bdCxuXX1hKFRuLFxuXCJnZXRMZW5zXCIpO2Z1bmN0aW9uIHVvKHIpe3ZhciBlPVRuKHIpLHQ9ZVswXSxuPWVbMV07cmV0dXJuKHQrbikqMy80LW59YSh1byxcImJ5dGVcXFxuTGVuZ3RoXCIpO2Z1bmN0aW9uIGNvKHIsZSx0KXtyZXR1cm4oZSt0KSozLzQtdH1hKGNvLFwiX2J5dGVMZW5ndGhcIik7ZnVuY3Rpb24gaG8ocil7XG52YXIgZSx0PVRuKHIpLG49dFswXSxpPXRbMV0scz1uZXcgYW8oY28ocixuLGkpKSxvPTAsdT1pPjA/bi00Om4sYztmb3IoYz0wO2M8dTtjKz1cbjQpZT10ZVtyLmNoYXJDb2RlQXQoYyldPDwxOHx0ZVtyLmNoYXJDb2RlQXQoYysxKV08PDEyfHRlW3IuY2hhckNvZGVBdChjKzIpXTw8Nnx0ZVtyLlxuY2hhckNvZGVBdChjKzMpXSxzW28rK109ZT4+MTYmMjU1LHNbbysrXT1lPj44JjI1NSxzW28rK109ZSYyNTU7cmV0dXJuIGk9PT0yJiYoZT1cbnRlW3IuY2hhckNvZGVBdChjKV08PDJ8dGVbci5jaGFyQ29kZUF0KGMrMSldPj40LHNbbysrXT1lJjI1NSksaT09PTEmJihlPXRlW3IuY2hhckNvZGVBdChcbmMpXTw8MTB8dGVbci5jaGFyQ29kZUF0KGMrMSldPDw0fHRlW3IuY2hhckNvZGVBdChjKzIpXT4+MixzW28rK109ZT4+OCYyNTUsc1tvKytdPVxuZSYyNTUpLHN9YShobyxcInRvQnl0ZUFycmF5XCIpO2Z1bmN0aW9uIGxvKHIpe3JldHVybiBhZVtyPj4xOCY2M10rYWVbcj4+MTImNjNdK2FlW3I+PlxuNiY2M10rYWVbciY2M119YShsbyxcInRyaXBsZXRUb0Jhc2U2NFwiKTtmdW5jdGlvbiBmbyhyLGUsdCl7Zm9yKHZhciBuLGk9W10scz1lO3M8dDtzKz1cbjMpbj0ocltzXTw8MTYmMTY3MTE2ODApKyhyW3MrMV08PDgmNjUyODApKyhyW3MrMl0mMjU1KSxpLnB1c2gobG8obikpO3JldHVybiBpLmpvaW4oXG5cIlwiKX1hKGZvLFwiZW5jb2RlQ2h1bmtcIik7ZnVuY3Rpb24gcG8ocil7Zm9yKHZhciBlLHQ9ci5sZW5ndGgsbj10JTMsaT1bXSxzPTE2MzgzLG89MCxcbnU9dC1uO288dTtvKz1zKWkucHVzaChmbyhyLG8sbytzPnU/dTpvK3MpKTtyZXR1cm4gbj09PTE/KGU9clt0LTFdLGkucHVzaChhZVtlPj4yXStcbmFlW2U8PDQmNjNdK1wiPT1cIikpOm49PT0yJiYoZT0oclt0LTJdPDw4KStyW3QtMV0saS5wdXNoKGFlW2U+PjEwXSthZVtlPj40JjYzXSthZVtlPDxcbjImNjNdK1wiPVwiKSksaS5qb2luKFwiXCIpfWEocG8sXCJmcm9tQnl0ZUFycmF5XCIpfSk7dmFyIFBuPUkoQnQ9PntwKCk7QnQucmVhZD1mdW5jdGlvbihyLGUsdCxuLGkpe3ZhciBzLG8sdT1pKjgtbi0xLGM9KDE8PHUpLTEsaD1jPj5cbjEsbD0tNyxkPXQ/aS0xOjAsYj10Py0xOjEsQz1yW2UrZF07Zm9yKGQrPWIscz1DJigxPDwtbCktMSxDPj49LWwsbCs9dTtsPjA7cz1zKjI1NitcbnJbZStkXSxkKz1iLGwtPTgpO2ZvcihvPXMmKDE8PC1sKS0xLHM+Pj0tbCxsKz1uO2w+MDtvPW8qMjU2K3JbZStkXSxkKz1iLGwtPTgpO2lmKHM9PT1cbjApcz0xLWg7ZWxzZXtpZihzPT09YylyZXR1cm4gbz9OYU46KEM/LTE6MSkqKDEvMCk7bz1vK01hdGgucG93KDIsbikscz1zLWh9cmV0dXJuKEM/XG4tMToxKSpvKk1hdGgucG93KDIscy1uKX07QnQud3JpdGU9ZnVuY3Rpb24ocixlLHQsbixpLHMpe3ZhciBvLHUsYyxoPXMqOC1pLTEsbD0oMTw8XG5oKS0xLGQ9bD4+MSxiPWk9PT0yMz9NYXRoLnBvdygyLC0yNCktTWF0aC5wb3coMiwtNzcpOjAsQz1uPzA6cy0xLEI9bj8xOi0xLFc9ZTwwfHxcbmU9PT0wJiYxL2U8MD8xOjA7Zm9yKGU9TWF0aC5hYnMoZSksaXNOYU4oZSl8fGU9PT0xLzA/KHU9aXNOYU4oZSk/MTowLG89bCk6KG89TWF0aC5cbmZsb29yKE1hdGgubG9nKGUpL01hdGguTE4yKSxlKihjPU1hdGgucG93KDIsLW8pKTwxJiYoby0tLGMqPTIpLG8rZD49MT9lKz1iL2M6ZSs9XG5iKk1hdGgucG93KDIsMS1kKSxlKmM+PTImJihvKyssYy89MiksbytkPj1sPyh1PTAsbz1sKTpvK2Q+PTE/KHU9KGUqYy0xKSpNYXRoLnBvdyhcbjIsaSksbz1vK2QpOih1PWUqTWF0aC5wb3coMixkLTEpKk1hdGgucG93KDIsaSksbz0wKSk7aT49ODtyW3QrQ109dSYyNTUsQys9Qix1Lz0yNTYsXG5pLT04KTtmb3Iobz1vPDxpfHUsaCs9aTtoPjA7clt0K0NdPW8mMjU1LEMrPUIsby89MjU2LGgtPTgpO3JbdCtDLUJdfD1XKjEyOH19KTt2YXIgJG49SShMZT0+e1widXNlIHN0cmljdFwiO3AoKTt2YXIgTHQ9SW4oKSxQZT1QbigpLEJuPXR5cGVvZiBTeW1ib2w9PVwiZnVuY3Rpb25cIiYmXG50eXBlb2YgU3ltYm9sLmZvcj09XCJmdW5jdGlvblwiP1N5bWJvbC5mb3IoXCJub2RlanMudXRpbC5pbnNwZWN0LmN1c3RvbVwiKTpudWxsO0xlLkJ1ZmZlcj1cbmY7TGUuU2xvd0J1ZmZlcj1TbztMZS5JTlNQRUNUX01BWF9CWVRFUz01MDt2YXIgaXQ9MjE0NzQ4MzY0NztMZS5rTWF4TGVuZ3RoPWl0O2YuXG5UWVBFRF9BUlJBWV9TVVBQT1JUPXlvKCk7IWYuVFlQRURfQVJSQVlfU1VQUE9SVCYmdHlwZW9mIGNvbnNvbGU8XCJ1XCImJnR5cGVvZiBjb25zb2xlLlxuZXJyb3I9PVwiZnVuY3Rpb25cIiYmY29uc29sZS5lcnJvcihcIlRoaXMgYnJvd3NlciBsYWNrcyB0eXBlZCBhcnJheSAoVWludDhBcnJheSkgc3VcXFxucHBvcnQgd2hpY2ggaXMgcmVxdWlyZWQgYnkgYGJ1ZmZlcmAgdjUueC4gVXNlIGBidWZmZXJgIHY0LnggaWYgeW91IHJlcXVpcmUgb2xkIGJcXFxucm93c2VyIHN1cHBvcnQuXCIpO2Z1bmN0aW9uIHlvKCl7dHJ5e2xldCByPW5ldyBVaW50OEFycmF5KDEpLGU9e2ZvbzphKGZ1bmN0aW9uKCl7XG5yZXR1cm4gNDJ9LFwiZm9vXCIpfTtyZXR1cm4gT2JqZWN0LnNldFByb3RvdHlwZU9mKGUsVWludDhBcnJheS5wcm90b3R5cGUpLE9iamVjdC5zZXRQcm90b3R5cGVPZihcbnIsZSksci5mb28oKT09PTQyfWNhdGNoe3JldHVybiExfX1hKHlvLFwidHlwZWRBcnJheVN1cHBvcnRcIik7T2JqZWN0LmRlZmluZVByb3BlcnR5KFxuZi5wcm90b3R5cGUsXCJwYXJlbnRcIix7ZW51bWVyYWJsZTohMCxnZXQ6YShmdW5jdGlvbigpe2lmKGYuaXNCdWZmZXIodGhpcykpcmV0dXJuIHRoaXMuXG5idWZmZXJ9LFwiZ2V0XCIpfSk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGYucHJvdG90eXBlLFwib2Zmc2V0XCIse2VudW1lcmFibGU6ITAsZ2V0OmEoXG5mdW5jdGlvbigpe2lmKGYuaXNCdWZmZXIodGhpcykpcmV0dXJuIHRoaXMuYnl0ZU9mZnNldH0sXCJnZXRcIil9KTtmdW5jdGlvbiBmZShyKXtpZihyPlxuaXQpdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1RoZSB2YWx1ZSBcIicrcisnXCIgaXMgaW52YWxpZCBmb3Igb3B0aW9uIFwic2l6ZVwiJyk7bGV0IGU9bmV3IFVpbnQ4QXJyYXkoXG5yKTtyZXR1cm4gT2JqZWN0LnNldFByb3RvdHlwZU9mKGUsZi5wcm90b3R5cGUpLGV9YShmZSxcImNyZWF0ZUJ1ZmZlclwiKTtmdW5jdGlvbiBmKHIsZSx0KXtcbmlmKHR5cGVvZiByPT1cIm51bWJlclwiKXtpZih0eXBlb2YgZT09XCJzdHJpbmdcIil0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGUgXCJzdHJpbmdcIiBhXFxcbnJndW1lbnQgbXVzdCBiZSBvZiB0eXBlIHN0cmluZy4gUmVjZWl2ZWQgdHlwZSBudW1iZXInKTtyZXR1cm4gRHQocil9cmV0dXJuIE1uKHIsXG5lLHQpfWEoZixcIkJ1ZmZlclwiKTtmLnBvb2xTaXplPTgxOTI7ZnVuY3Rpb24gTW4ocixlLHQpe2lmKHR5cGVvZiByPT1cInN0cmluZ1wiKXJldHVybiBnbyhcbnIsZSk7aWYoQXJyYXlCdWZmZXIuaXNWaWV3KHIpKXJldHVybiB3byhyKTtpZihyPT1udWxsKXRocm93IG5ldyBUeXBlRXJyb3IoXCJUaGUgZlxcXG5pcnN0IGFyZ3VtZW50IG11c3QgYmUgb25lIG9mIHR5cGUgc3RyaW5nLCBCdWZmZXIsIEFycmF5QnVmZmVyLCBBcnJheSwgb3IgQXJyYXktbFxcXG5pa2UgT2JqZWN0LiBSZWNlaXZlZCB0eXBlIFwiK3R5cGVvZiByKTtpZih1ZShyLEFycmF5QnVmZmVyKXx8ciYmdWUoci5idWZmZXIsQXJyYXlCdWZmZXIpfHxcbnR5cGVvZiBTaGFyZWRBcnJheUJ1ZmZlcjxcInVcIiYmKHVlKHIsU2hhcmVkQXJyYXlCdWZmZXIpfHxyJiZ1ZShyLmJ1ZmZlcixTaGFyZWRBcnJheUJ1ZmZlcikpKVxucmV0dXJuIEZ0KHIsZSx0KTtpZih0eXBlb2Ygcj09XCJudW1iZXJcIil0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGUgXCJ2YWx1ZVwiIGFyZ3VtZW50XFxcbiBtdXN0IG5vdCBiZSBvZiB0eXBlIG51bWJlci4gUmVjZWl2ZWQgdHlwZSBudW1iZXInKTtsZXQgbj1yLnZhbHVlT2YmJnIudmFsdWVPZigpO1xuaWYobiE9bnVsbCYmbiE9PXIpcmV0dXJuIGYuZnJvbShuLGUsdCk7bGV0IGk9Ym8ocik7aWYoaSlyZXR1cm4gaTtpZih0eXBlb2YgU3ltYm9sPFxuXCJ1XCImJlN5bWJvbC50b1ByaW1pdGl2ZSE9bnVsbCYmdHlwZW9mIHJbU3ltYm9sLnRvUHJpbWl0aXZlXT09XCJmdW5jdGlvblwiKXJldHVybiBmLlxuZnJvbShyW1N5bWJvbC50b1ByaW1pdGl2ZV0oXCJzdHJpbmdcIiksZSx0KTt0aHJvdyBuZXcgVHlwZUVycm9yKFwiVGhlIGZpcnN0IGFyZ3VtZW5cXFxudCBtdXN0IGJlIG9uZSBvZiB0eXBlIHN0cmluZywgQnVmZmVyLCBBcnJheUJ1ZmZlciwgQXJyYXksIG9yIEFycmF5LWxpa2UgT2JqZWN0LiBcXFxuUmVjZWl2ZWQgdHlwZSBcIit0eXBlb2Ygcil9YShNbixcImZyb21cIik7Zi5mcm9tPWZ1bmN0aW9uKHIsZSx0KXtyZXR1cm4gTW4ocixlLHQpfTtcbk9iamVjdC5zZXRQcm90b3R5cGVPZihmLnByb3RvdHlwZSxVaW50OEFycmF5LnByb3RvdHlwZSk7T2JqZWN0LnNldFByb3RvdHlwZU9mKGYsXG5VaW50OEFycmF5KTtmdW5jdGlvbiBEbihyKXtpZih0eXBlb2YgciE9XCJudW1iZXJcIil0aHJvdyBuZXcgVHlwZUVycm9yKCdcInNpemVcIiBhcmdcXFxudW1lbnQgbXVzdCBiZSBvZiB0eXBlIG51bWJlcicpO2lmKHI8MCl0aHJvdyBuZXcgUmFuZ2VFcnJvcignVGhlIHZhbHVlIFwiJytyKydcIiBpc1xcXG4gaW52YWxpZCBmb3Igb3B0aW9uIFwic2l6ZVwiJyl9YShEbixcImFzc2VydFNpemVcIik7ZnVuY3Rpb24gbW8ocixlLHQpe3JldHVybiBEbihyKSxcbnI8PTA/ZmUocik6ZSE9PXZvaWQgMD90eXBlb2YgdD09XCJzdHJpbmdcIj9mZShyKS5maWxsKGUsdCk6ZmUocikuZmlsbChlKTpmZShyKX1hKG1vLFxuXCJhbGxvY1wiKTtmLmFsbG9jPWZ1bmN0aW9uKHIsZSx0KXtyZXR1cm4gbW8ocixlLHQpfTtmdW5jdGlvbiBEdChyKXtyZXR1cm4gRG4ociksZmUoXG5yPDA/MDprdChyKXwwKX1hKER0LFwiYWxsb2NVbnNhZmVcIik7Zi5hbGxvY1Vuc2FmZT1mdW5jdGlvbihyKXtyZXR1cm4gRHQocil9O2YuYWxsb2NVbnNhZmVTbG93PVxuZnVuY3Rpb24ocil7cmV0dXJuIER0KHIpfTtmdW5jdGlvbiBnbyhyLGUpe2lmKCh0eXBlb2YgZSE9XCJzdHJpbmdcInx8ZT09PVwiXCIpJiYoZT1cIlxcXG51dGY4XCIpLCFmLmlzRW5jb2RpbmcoZSkpdGhyb3cgbmV3IFR5cGVFcnJvcihcIlVua25vd24gZW5jb2Rpbmc6IFwiK2UpO2xldCB0PWtuKHIsZSl8XG4wLG49ZmUodCksaT1uLndyaXRlKHIsZSk7cmV0dXJuIGkhPT10JiYobj1uLnNsaWNlKDAsaSkpLG59YShnbyxcImZyb21TdHJpbmdcIik7ZnVuY3Rpb24gUnQocil7XG5sZXQgZT1yLmxlbmd0aDwwPzA6a3Qoci5sZW5ndGgpfDAsdD1mZShlKTtmb3IobGV0IG49MDtuPGU7bis9MSl0W25dPXJbbl0mMjU1O3JldHVybiB0fVxuYShSdCxcImZyb21BcnJheUxpa2VcIik7ZnVuY3Rpb24gd28ocil7aWYodWUocixVaW50OEFycmF5KSl7bGV0IGU9bmV3IFVpbnQ4QXJyYXkocik7XG5yZXR1cm4gRnQoZS5idWZmZXIsZS5ieXRlT2Zmc2V0LGUuYnl0ZUxlbmd0aCl9cmV0dXJuIFJ0KHIpfWEod28sXCJmcm9tQXJyYXlWaWV3XCIpO1xuZnVuY3Rpb24gRnQocixlLHQpe2lmKGU8MHx8ci5ieXRlTGVuZ3RoPGUpdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1wib2Zmc2V0XCIgaXMgb3V0c1xcXG5pZGUgb2YgYnVmZmVyIGJvdW5kcycpO2lmKHIuYnl0ZUxlbmd0aDxlKyh0fHwwKSl0aHJvdyBuZXcgUmFuZ2VFcnJvcignXCJsZW5ndGhcIiBpXFxcbnMgb3V0c2lkZSBvZiBidWZmZXIgYm91bmRzJyk7bGV0IG47cmV0dXJuIGU9PT12b2lkIDAmJnQ9PT12b2lkIDA/bj1uZXcgVWludDhBcnJheShcbnIpOnQ9PT12b2lkIDA/bj1uZXcgVWludDhBcnJheShyLGUpOm49bmV3IFVpbnQ4QXJyYXkocixlLHQpLE9iamVjdC5zZXRQcm90b3R5cGVPZihcbm4sZi5wcm90b3R5cGUpLG59YShGdCxcImZyb21BcnJheUJ1ZmZlclwiKTtmdW5jdGlvbiBibyhyKXtpZihmLmlzQnVmZmVyKHIpKXtsZXQgZT1rdChcbnIubGVuZ3RoKXwwLHQ9ZmUoZSk7cmV0dXJuIHQubGVuZ3RoPT09MHx8ci5jb3B5KHQsMCwwLGUpLHR9aWYoci5sZW5ndGghPT12b2lkIDApXG5yZXR1cm4gdHlwZW9mIHIubGVuZ3RoIT1cIm51bWJlclwifHxPdChyLmxlbmd0aCk/ZmUoMCk6UnQocik7aWYoci50eXBlPT09XCJCdWZmZXJcIiYmXG5BcnJheS5pc0FycmF5KHIuZGF0YSkpcmV0dXJuIFJ0KHIuZGF0YSl9YShibyxcImZyb21PYmplY3RcIik7ZnVuY3Rpb24ga3Qocil7aWYocj49XG5pdCl0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIkF0dGVtcHQgdG8gYWxsb2NhdGUgQnVmZmVyIGxhcmdlciB0aGFuIG1heGltdW0gc2l6ZTogMHhcIitcbml0LnRvU3RyaW5nKDE2KStcIiBieXRlc1wiKTtyZXR1cm4gcnwwfWEoa3QsXCJjaGVja2VkXCIpO2Z1bmN0aW9uIFNvKHIpe3JldHVybityIT1yJiZcbihyPTApLGYuYWxsb2MoK3IpfWEoU28sXCJTbG93QnVmZmVyXCIpO2YuaXNCdWZmZXI9YShmdW5jdGlvbihlKXtyZXR1cm4gZSE9bnVsbCYmZS5cbl9pc0J1ZmZlcj09PSEwJiZlIT09Zi5wcm90b3R5cGV9LFwiaXNCdWZmZXJcIik7Zi5jb21wYXJlPWEoZnVuY3Rpb24oZSx0KXtpZih1ZShlLFVpbnQ4QXJyYXkpJiZcbihlPWYuZnJvbShlLGUub2Zmc2V0LGUuYnl0ZUxlbmd0aCkpLHVlKHQsVWludDhBcnJheSkmJih0PWYuZnJvbSh0LHQub2Zmc2V0LHQuYnl0ZUxlbmd0aCkpLFxuIWYuaXNCdWZmZXIoZSl8fCFmLmlzQnVmZmVyKHQpKXRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSBcImJ1ZjFcIiwgXCJidWYyXCIgYXJndW1lbnRzXFxcbiBtdXN0IGJlIG9uZSBvZiB0eXBlIEJ1ZmZlciBvciBVaW50OEFycmF5Jyk7aWYoZT09PXQpcmV0dXJuIDA7bGV0IG49ZS5sZW5ndGgsaT10LlxubGVuZ3RoO2ZvcihsZXQgcz0wLG89TWF0aC5taW4obixpKTtzPG87KytzKWlmKGVbc10hPT10W3NdKXtuPWVbc10saT10W3NdO2JyZWFrfXJldHVybiBuPFxuaT8tMTppPG4/MTowfSxcImNvbXBhcmVcIik7Zi5pc0VuY29kaW5nPWEoZnVuY3Rpb24oZSl7c3dpdGNoKFN0cmluZyhlKS50b0xvd2VyQ2FzZSgpKXtjYXNlXCJcXFxuaGV4XCI6Y2FzZVwidXRmOFwiOmNhc2VcInV0Zi04XCI6Y2FzZVwiYXNjaWlcIjpjYXNlXCJsYXRpbjFcIjpjYXNlXCJiaW5hcnlcIjpjYXNlXCJiYXNlNjRcIjpjYXNlXCJcXFxudWNzMlwiOmNhc2VcInVjcy0yXCI6Y2FzZVwidXRmMTZsZVwiOmNhc2VcInV0Zi0xNmxlXCI6cmV0dXJuITA7ZGVmYXVsdDpyZXR1cm4hMX19LFwiaXNFblxcXG5jb2RpbmdcIik7Zi5jb25jYXQ9YShmdW5jdGlvbihlLHQpe2lmKCFBcnJheS5pc0FycmF5KGUpKXRocm93IG5ldyBUeXBlRXJyb3IoJ1wibGlzXFxcbnRcIiBhcmd1bWVudCBtdXN0IGJlIGFuIEFycmF5IG9mIEJ1ZmZlcnMnKTtpZihlLmxlbmd0aD09PTApcmV0dXJuIGYuYWxsb2MoMCk7bGV0IG47XG5pZih0PT09dm9pZCAwKWZvcih0PTAsbj0wO248ZS5sZW5ndGg7KytuKXQrPWVbbl0ubGVuZ3RoO2xldCBpPWYuYWxsb2NVbnNhZmUodCkscz0wO1xuZm9yKG49MDtuPGUubGVuZ3RoOysrbil7bGV0IG89ZVtuXTtpZih1ZShvLFVpbnQ4QXJyYXkpKXMrby5sZW5ndGg+aS5sZW5ndGg/KGYuaXNCdWZmZXIoXG5vKXx8KG89Zi5mcm9tKG8pKSxvLmNvcHkoaSxzKSk6VWludDhBcnJheS5wcm90b3R5cGUuc2V0LmNhbGwoaSxvLHMpO2Vsc2UgaWYoZi5pc0J1ZmZlcihcbm8pKW8uY29weShpLHMpO2Vsc2UgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJsaXN0XCIgYXJndW1lbnQgbXVzdCBiZSBhbiBBcnJheSBvZiBCdWZcXFxuZmVycycpO3MrPW8ubGVuZ3RofXJldHVybiBpfSxcImNvbmNhdFwiKTtmdW5jdGlvbiBrbihyLGUpe2lmKGYuaXNCdWZmZXIocikpcmV0dXJuIHIuXG5sZW5ndGg7aWYoQXJyYXlCdWZmZXIuaXNWaWV3KHIpfHx1ZShyLEFycmF5QnVmZmVyKSlyZXR1cm4gci5ieXRlTGVuZ3RoO2lmKHR5cGVvZiByIT1cblwic3RyaW5nXCIpdGhyb3cgbmV3IFR5cGVFcnJvcignVGhlIFwic3RyaW5nXCIgYXJndW1lbnQgbXVzdCBiZSBvbmUgb2YgdHlwZSBzdHJpbmcsIFxcXG5CdWZmZXIsIG9yIEFycmF5QnVmZmVyLiBSZWNlaXZlZCB0eXBlICcrdHlwZW9mIHIpO2xldCB0PXIubGVuZ3RoLG49YXJndW1lbnRzLmxlbmd0aD5cbjImJmFyZ3VtZW50c1syXT09PSEwO2lmKCFuJiZ0PT09MClyZXR1cm4gMDtsZXQgaT0hMTtmb3IoOzspc3dpdGNoKGUpe2Nhc2VcImFzY2lpXCI6Y2FzZVwiXFxcbmxhdGluMVwiOmNhc2VcImJpbmFyeVwiOnJldHVybiB0O2Nhc2VcInV0ZjhcIjpjYXNlXCJ1dGYtOFwiOnJldHVybiBNdChyKS5sZW5ndGg7Y2FzZVwidWNcXFxuczJcIjpjYXNlXCJ1Y3MtMlwiOmNhc2VcInV0ZjE2bGVcIjpjYXNlXCJ1dGYtMTZsZVwiOnJldHVybiB0KjI7Y2FzZVwiaGV4XCI6cmV0dXJuIHQ+Pj4xO2Nhc2VcIlxcXG5iYXNlNjRcIjpyZXR1cm4gR24ocikubGVuZ3RoO2RlZmF1bHQ6aWYoaSlyZXR1cm4gbj8tMTpNdChyKS5sZW5ndGg7ZT0oXCJcIitlKS50b0xvd2VyQ2FzZSgpLFxuaT0hMH19YShrbixcImJ5dGVMZW5ndGhcIik7Zi5ieXRlTGVuZ3RoPWtuO2Z1bmN0aW9uIHhvKHIsZSx0KXtsZXQgbj0hMTtpZigoZT09PXZvaWQgMHx8XG5lPDApJiYoZT0wKSxlPnRoaXMubGVuZ3RofHwoKHQ9PT12b2lkIDB8fHQ+dGhpcy5sZW5ndGgpJiYodD10aGlzLmxlbmd0aCksdDw9MCl8fFxuKHQ+Pj49MCxlPj4+PTAsdDw9ZSkpcmV0dXJuXCJcIjtmb3Iocnx8KHI9XCJ1dGY4XCIpOzspc3dpdGNoKHIpe2Nhc2VcImhleFwiOnJldHVybiBMbyhcbnRoaXMsZSx0KTtjYXNlXCJ1dGY4XCI6Y2FzZVwidXRmLThcIjpyZXR1cm4gT24odGhpcyxlLHQpO2Nhc2VcImFzY2lpXCI6cmV0dXJuIFBvKHRoaXMsXG5lLHQpO2Nhc2VcImxhdGluMVwiOmNhc2VcImJpbmFyeVwiOnJldHVybiBCbyh0aGlzLGUsdCk7Y2FzZVwiYmFzZTY0XCI6cmV0dXJuIFRvKHRoaXMsZSxcbnQpO2Nhc2VcInVjczJcIjpjYXNlXCJ1Y3MtMlwiOmNhc2VcInV0ZjE2bGVcIjpjYXNlXCJ1dGYtMTZsZVwiOnJldHVybiBSbyh0aGlzLGUsdCk7ZGVmYXVsdDpcbmlmKG4pdGhyb3cgbmV3IFR5cGVFcnJvcihcIlVua25vd24gZW5jb2Rpbmc6IFwiK3IpO3I9KHIrXCJcIikudG9Mb3dlckNhc2UoKSxuPSEwfX1hKFxueG8sXCJzbG93VG9TdHJpbmdcIik7Zi5wcm90b3R5cGUuX2lzQnVmZmVyPSEwO2Z1bmN0aW9uIEVlKHIsZSx0KXtsZXQgbj1yW2VdO3JbZV09clt0XSxcbnJbdF09bn1hKEVlLFwic3dhcFwiKTtmLnByb3RvdHlwZS5zd2FwMTY9YShmdW5jdGlvbigpe2xldCBlPXRoaXMubGVuZ3RoO2lmKGUlMiE9PTApXG50aHJvdyBuZXcgUmFuZ2VFcnJvcihcIkJ1ZmZlciBzaXplIG11c3QgYmUgYSBtdWx0aXBsZSBvZiAxNi1iaXRzXCIpO2ZvcihsZXQgdD0wO3Q8XG5lO3QrPTIpRWUodGhpcyx0LHQrMSk7cmV0dXJuIHRoaXN9LFwic3dhcDE2XCIpO2YucHJvdG90eXBlLnN3YXAzMj1hKGZ1bmN0aW9uKCl7bGV0IGU9dGhpcy5cbmxlbmd0aDtpZihlJTQhPT0wKXRocm93IG5ldyBSYW5nZUVycm9yKFwiQnVmZmVyIHNpemUgbXVzdCBiZSBhIG11bHRpcGxlIG9mIDMyLWJpdFxcXG5zXCIpO2ZvcihsZXQgdD0wO3Q8ZTt0Kz00KUVlKHRoaXMsdCx0KzMpLEVlKHRoaXMsdCsxLHQrMik7cmV0dXJuIHRoaXN9LFwic3dhcDMyXCIpO1xuZi5wcm90b3R5cGUuc3dhcDY0PWEoZnVuY3Rpb24oKXtsZXQgZT10aGlzLmxlbmd0aDtpZihlJTghPT0wKXRocm93IG5ldyBSYW5nZUVycm9yKFxuXCJCdWZmZXIgc2l6ZSBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgNjQtYml0c1wiKTtmb3IobGV0IHQ9MDt0PGU7dCs9OClFZSh0aGlzLHQsdCs3KSxcbkVlKHRoaXMsdCsxLHQrNiksRWUodGhpcyx0KzIsdCs1KSxFZSh0aGlzLHQrMyx0KzQpO3JldHVybiB0aGlzfSxcInN3YXA2NFwiKTtmLnByb3RvdHlwZS5cbnRvU3RyaW5nPWEoZnVuY3Rpb24oKXtsZXQgZT10aGlzLmxlbmd0aDtyZXR1cm4gZT09PTA/XCJcIjphcmd1bWVudHMubGVuZ3RoPT09MD9PbihcbnRoaXMsMCxlKTp4by5hcHBseSh0aGlzLGFyZ3VtZW50cyl9LFwidG9TdHJpbmdcIik7Zi5wcm90b3R5cGUudG9Mb2NhbGVTdHJpbmc9Zi5wcm90b3R5cGUuXG50b1N0cmluZztmLnByb3RvdHlwZS5lcXVhbHM9YShmdW5jdGlvbihlKXtpZighZi5pc0J1ZmZlcihlKSl0aHJvdyBuZXcgVHlwZUVycm9yKFxuXCJBcmd1bWVudCBtdXN0IGJlIGEgQnVmZmVyXCIpO3JldHVybiB0aGlzPT09ZT8hMDpmLmNvbXBhcmUodGhpcyxlKT09PTB9LFwiZXF1YWxzXCIpO1xuZi5wcm90b3R5cGUuaW5zcGVjdD1hKGZ1bmN0aW9uKCl7bGV0IGU9XCJcIix0PUxlLklOU1BFQ1RfTUFYX0JZVEVTO3JldHVybiBlPXRoaXMudG9TdHJpbmcoXG5cImhleFwiLDAsdCkucmVwbGFjZSgvKC57Mn0pL2csXCIkMSBcIikudHJpbSgpLHRoaXMubGVuZ3RoPnQmJihlKz1cIiAuLi4gXCIpLFwiPEJ1ZmZlciBcIitcbmUrXCI+XCJ9LFwiaW5zcGVjdFwiKTtCbiYmKGYucHJvdG90eXBlW0JuXT1mLnByb3RvdHlwZS5pbnNwZWN0KTtmLnByb3RvdHlwZS5jb21wYXJlPVxuYShmdW5jdGlvbihlLHQsbixpLHMpe2lmKHVlKGUsVWludDhBcnJheSkmJihlPWYuZnJvbShlLGUub2Zmc2V0LGUuYnl0ZUxlbmd0aCkpLCFmLlxuaXNCdWZmZXIoZSkpdGhyb3cgbmV3IFR5cGVFcnJvcignVGhlIFwidGFyZ2V0XCIgYXJndW1lbnQgbXVzdCBiZSBvbmUgb2YgdHlwZSBCdWZmZVxcXG5yIG9yIFVpbnQ4QXJyYXkuIFJlY2VpdmVkIHR5cGUgJyt0eXBlb2YgZSk7aWYodD09PXZvaWQgMCYmKHQ9MCksbj09PXZvaWQgMCYmKG49ZT9cbmUubGVuZ3RoOjApLGk9PT12b2lkIDAmJihpPTApLHM9PT12b2lkIDAmJihzPXRoaXMubGVuZ3RoKSx0PDB8fG4+ZS5sZW5ndGh8fGk8MHx8XG5zPnRoaXMubGVuZ3RoKXRocm93IG5ldyBSYW5nZUVycm9yKFwib3V0IG9mIHJhbmdlIGluZGV4XCIpO2lmKGk+PXMmJnQ+PW4pcmV0dXJuIDA7XG5pZihpPj1zKXJldHVybi0xO2lmKHQ+PW4pcmV0dXJuIDE7aWYodD4+Pj0wLG4+Pj49MCxpPj4+PTAscz4+Pj0wLHRoaXM9PT1lKXJldHVybiAwO1xubGV0IG89cy1pLHU9bi10LGM9TWF0aC5taW4obyx1KSxoPXRoaXMuc2xpY2UoaSxzKSxsPWUuc2xpY2UodCxuKTtmb3IobGV0IGQ9MDtkPGM7KytkKVxuaWYoaFtkXSE9PWxbZF0pe289aFtkXSx1PWxbZF07YnJlYWt9cmV0dXJuIG88dT8tMTp1PG8/MTowfSxcImNvbXBhcmVcIik7ZnVuY3Rpb24gVW4ocixlLHQsbixpKXtcbmlmKHIubGVuZ3RoPT09MClyZXR1cm4tMTtpZih0eXBlb2YgdD09XCJzdHJpbmdcIj8obj10LHQ9MCk6dD4yMTQ3NDgzNjQ3P3Q9MjE0NzQ4MzY0NzpcbnQ8LTIxNDc0ODM2NDgmJih0PS0yMTQ3NDgzNjQ4KSx0PSt0LE90KHQpJiYodD1pPzA6ci5sZW5ndGgtMSksdDwwJiYodD1yLmxlbmd0aCt0KSxcbnQ+PXIubGVuZ3RoKXtpZihpKXJldHVybi0xO3Q9ci5sZW5ndGgtMX1lbHNlIGlmKHQ8MClpZihpKXQ9MDtlbHNlIHJldHVybi0xO2lmKHR5cGVvZiBlPT1cblwic3RyaW5nXCImJihlPWYuZnJvbShlLG4pKSxmLmlzQnVmZmVyKGUpKXJldHVybiBlLmxlbmd0aD09PTA/LTE6TG4ocixlLHQsbixpKTtpZih0eXBlb2YgZT09XG5cIm51bWJlclwiKXJldHVybiBlPWUmMjU1LHR5cGVvZiBVaW50OEFycmF5LnByb3RvdHlwZS5pbmRleE9mPT1cImZ1bmN0aW9uXCI/aT9VaW50OEFycmF5LlxucHJvdG90eXBlLmluZGV4T2YuY2FsbChyLGUsdCk6VWludDhBcnJheS5wcm90b3R5cGUubGFzdEluZGV4T2YuY2FsbChyLGUsdCk6TG4ocixcbltlXSx0LG4saSk7dGhyb3cgbmV3IFR5cGVFcnJvcihcInZhbCBtdXN0IGJlIHN0cmluZywgbnVtYmVyIG9yIEJ1ZmZlclwiKX1hKFVuLFwiYmlkXFxcbmlyZWN0aW9uYWxJbmRleE9mXCIpO2Z1bmN0aW9uIExuKHIsZSx0LG4saSl7bGV0IHM9MSxvPXIubGVuZ3RoLHU9ZS5sZW5ndGg7aWYobiE9PVxudm9pZCAwJiYobj1TdHJpbmcobikudG9Mb3dlckNhc2UoKSxuPT09XCJ1Y3MyXCJ8fG49PT1cInVjcy0yXCJ8fG49PT1cInV0ZjE2bGVcInx8bj09PVwiXFxcbnV0Zi0xNmxlXCIpKXtpZihyLmxlbmd0aDwyfHxlLmxlbmd0aDwyKXJldHVybi0xO3M9MixvLz0yLHUvPTIsdC89Mn1mdW5jdGlvbiBjKGwsZCl7XG5yZXR1cm4gcz09PTE/bFtkXTpsLnJlYWRVSW50MTZCRShkKnMpfWEoYyxcInJlYWRcIik7bGV0IGg7aWYoaSl7bGV0IGw9LTE7Zm9yKGg9dDtoPFxubztoKyspaWYoYyhyLGgpPT09YyhlLGw9PT0tMT8wOmgtbCkpe2lmKGw9PT0tMSYmKGw9aCksaC1sKzE9PT11KXJldHVybiBsKnN9ZWxzZSBsIT09XG4tMSYmKGgtPWgtbCksbD0tMX1lbHNlIGZvcih0K3U+byYmKHQ9by11KSxoPXQ7aD49MDtoLS0pe2xldCBsPSEwO2ZvcihsZXQgZD0wO2Q8dTtkKyspXG5pZihjKHIsaCtkKSE9PWMoZSxkKSl7bD0hMTticmVha31pZihsKXJldHVybiBofXJldHVybi0xfWEoTG4sXCJhcnJheUluZGV4T2ZcIik7Zi5wcm90b3R5cGUuXG5pbmNsdWRlcz1hKGZ1bmN0aW9uKGUsdCxuKXtyZXR1cm4gdGhpcy5pbmRleE9mKGUsdCxuKSE9PS0xfSxcImluY2x1ZGVzXCIpO2YucHJvdG90eXBlLlxuaW5kZXhPZj1hKGZ1bmN0aW9uKGUsdCxuKXtyZXR1cm4gVW4odGhpcyxlLHQsbiwhMCl9LFwiaW5kZXhPZlwiKTtmLnByb3RvdHlwZS5sYXN0SW5kZXhPZj1cbmEoZnVuY3Rpb24oZSx0LG4pe3JldHVybiBVbih0aGlzLGUsdCxuLCExKX0sXCJsYXN0SW5kZXhPZlwiKTtmdW5jdGlvbiB2byhyLGUsdCxuKXtcbnQ9TnVtYmVyKHQpfHwwO2xldCBpPXIubGVuZ3RoLXQ7bj8obj1OdW1iZXIobiksbj5pJiYobj1pKSk6bj1pO2xldCBzPWUubGVuZ3RoO24+XG5zLzImJihuPXMvMik7bGV0IG87Zm9yKG89MDtvPG47KytvKXtsZXQgdT1wYXJzZUludChlLnN1YnN0cihvKjIsMiksMTYpO2lmKE90KHUpKVxucmV0dXJuIG87clt0K29dPXV9cmV0dXJuIG99YSh2byxcImhleFdyaXRlXCIpO2Z1bmN0aW9uIEVvKHIsZSx0LG4pe3JldHVybiBzdChNdChlLFxuci5sZW5ndGgtdCkscix0LG4pfWEoRW8sXCJ1dGY4V3JpdGVcIik7ZnVuY3Rpb24gX28ocixlLHQsbil7cmV0dXJuIHN0KGtvKGUpLHIsdCxuKX1cbmEoX28sXCJhc2NpaVdyaXRlXCIpO2Z1bmN0aW9uIEFvKHIsZSx0LG4pe3JldHVybiBzdChHbihlKSxyLHQsbil9YShBbyxcImJhc2U2NFdyaXRlXCIpO1xuZnVuY3Rpb24gQ28ocixlLHQsbil7cmV0dXJuIHN0KFVvKGUsci5sZW5ndGgtdCkscix0LG4pfWEoQ28sXCJ1Y3MyV3JpdGVcIik7Zi5wcm90b3R5cGUuXG53cml0ZT1hKGZ1bmN0aW9uKGUsdCxuLGkpe2lmKHQ9PT12b2lkIDApaT1cInV0ZjhcIixuPXRoaXMubGVuZ3RoLHQ9MDtlbHNlIGlmKG49PT12b2lkIDAmJlxudHlwZW9mIHQ9PVwic3RyaW5nXCIpaT10LG49dGhpcy5sZW5ndGgsdD0wO2Vsc2UgaWYoaXNGaW5pdGUodCkpdD10Pj4+MCxpc0Zpbml0ZShuKT9cbihuPW4+Pj4wLGk9PT12b2lkIDAmJihpPVwidXRmOFwiKSk6KGk9bixuPXZvaWQgMCk7ZWxzZSB0aHJvdyBuZXcgRXJyb3IoXCJCdWZmZXIud3JpXFxcbnRlKHN0cmluZywgZW5jb2RpbmcsIG9mZnNldFssIGxlbmd0aF0pIGlzIG5vIGxvbmdlciBzdXBwb3J0ZWRcIik7bGV0IHM9dGhpcy5sZW5ndGgtXG50O2lmKChuPT09dm9pZCAwfHxuPnMpJiYobj1zKSxlLmxlbmd0aD4wJiYobjwwfHx0PDApfHx0PnRoaXMubGVuZ3RoKXRocm93IG5ldyBSYW5nZUVycm9yKFxuXCJBdHRlbXB0IHRvIHdyaXRlIG91dHNpZGUgYnVmZmVyIGJvdW5kc1wiKTtpfHwoaT1cInV0ZjhcIik7bGV0IG89ITE7Zm9yKDs7KXN3aXRjaChpKXtjYXNlXCJcXFxuaGV4XCI6cmV0dXJuIHZvKHRoaXMsZSx0LG4pO2Nhc2VcInV0ZjhcIjpjYXNlXCJ1dGYtOFwiOnJldHVybiBFbyh0aGlzLGUsdCxuKTtjYXNlXCJhc2NcXFxuaWlcIjpjYXNlXCJsYXRpbjFcIjpjYXNlXCJiaW5hcnlcIjpyZXR1cm4gX28odGhpcyxlLHQsbik7Y2FzZVwiYmFzZTY0XCI6cmV0dXJuIEFvKHRoaXMsXG5lLHQsbik7Y2FzZVwidWNzMlwiOmNhc2VcInVjcy0yXCI6Y2FzZVwidXRmMTZsZVwiOmNhc2VcInV0Zi0xNmxlXCI6cmV0dXJuIENvKHRoaXMsZSx0LG4pO2RlZmF1bHQ6XG5pZihvKXRocm93IG5ldyBUeXBlRXJyb3IoXCJVbmtub3duIGVuY29kaW5nOiBcIitpKTtpPShcIlwiK2kpLnRvTG93ZXJDYXNlKCksbz0hMH19LFwiXFxcbndyaXRlXCIpO2YucHJvdG90eXBlLnRvSlNPTj1hKGZ1bmN0aW9uKCl7cmV0dXJue3R5cGU6XCJCdWZmZXJcIixkYXRhOkFycmF5LnByb3RvdHlwZS5cbnNsaWNlLmNhbGwodGhpcy5fYXJyfHx0aGlzLDApfX0sXCJ0b0pTT05cIik7ZnVuY3Rpb24gVG8ocixlLHQpe3JldHVybiBlPT09MCYmdD09PXIuXG5sZW5ndGg/THQuZnJvbUJ5dGVBcnJheShyKTpMdC5mcm9tQnl0ZUFycmF5KHIuc2xpY2UoZSx0KSl9YShUbyxcImJhc2U2NFNsaWNlXCIpO2Z1bmN0aW9uIE9uKHIsZSx0KXtcbnQ9TWF0aC5taW4oci5sZW5ndGgsdCk7bGV0IG49W10saT1lO2Zvcig7aTx0Oyl7bGV0IHM9cltpXSxvPW51bGwsdT1zPjIzOT80OnM+MjIzP1xuMzpzPjE5MT8yOjE7aWYoaSt1PD10KXtsZXQgYyxoLGwsZDtzd2l0Y2godSl7Y2FzZSAxOnM8MTI4JiYobz1zKTticmVhaztjYXNlIDI6Yz1cbnJbaSsxXSwoYyYxOTIpPT09MTI4JiYoZD0ocyYzMSk8PDZ8YyY2MyxkPjEyNyYmKG89ZCkpO2JyZWFrO2Nhc2UgMzpjPXJbaSsxXSxoPXJbaStcbjJdLChjJjE5Mik9PT0xMjgmJihoJjE5Mik9PT0xMjgmJihkPShzJjE1KTw8MTJ8KGMmNjMpPDw2fGgmNjMsZD4yMDQ3JiYoZDw1NTI5Nnx8XG5kPjU3MzQzKSYmKG89ZCkpO2JyZWFrO2Nhc2UgNDpjPXJbaSsxXSxoPXJbaSsyXSxsPXJbaSszXSwoYyYxOTIpPT09MTI4JiYoaCYxOTIpPT09XG4xMjgmJihsJjE5Mik9PT0xMjgmJihkPShzJjE1KTw8MTh8KGMmNjMpPDwxMnwoaCY2Myk8PDZ8bCY2MyxkPjY1NTM1JiZkPDExMTQxMTImJlxuKG89ZCkpfX1vPT09bnVsbD8obz02NTUzMyx1PTEpOm8+NjU1MzUmJihvLT02NTUzNixuLnB1c2gobz4+PjEwJjEwMjN8NTUyOTYpLG89NTYzMjB8XG5vJjEwMjMpLG4ucHVzaChvKSxpKz11fXJldHVybiBJbyhuKX1hKE9uLFwidXRmOFNsaWNlXCIpO3ZhciBSbj00MDk2O2Z1bmN0aW9uIElvKHIpe1xubGV0IGU9ci5sZW5ndGg7aWYoZTw9Um4pcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkoU3RyaW5nLHIpO2xldCB0PVwiXCIsbj0wO1xuZm9yKDtuPGU7KXQrPVN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkoU3RyaW5nLHIuc2xpY2UobixuKz1SbikpO3JldHVybiB0fWEoSW8sXCJkXFxcbmVjb2RlQ29kZVBvaW50c0FycmF5XCIpO2Z1bmN0aW9uIFBvKHIsZSx0KXtsZXQgbj1cIlwiO3Q9TWF0aC5taW4oci5sZW5ndGgsdCk7Zm9yKGxldCBpPWU7aTxcbnQ7KytpKW4rPVN0cmluZy5mcm9tQ2hhckNvZGUocltpXSYxMjcpO3JldHVybiBufWEoUG8sXCJhc2NpaVNsaWNlXCIpO2Z1bmN0aW9uIEJvKHIsZSx0KXtcbmxldCBuPVwiXCI7dD1NYXRoLm1pbihyLmxlbmd0aCx0KTtmb3IobGV0IGk9ZTtpPHQ7KytpKW4rPVN0cmluZy5mcm9tQ2hhckNvZGUocltpXSk7XG5yZXR1cm4gbn1hKEJvLFwibGF0aW4xU2xpY2VcIik7ZnVuY3Rpb24gTG8ocixlLHQpe2xldCBuPXIubGVuZ3RoOyghZXx8ZTwwKSYmKGU9MCksXG4oIXR8fHQ8MHx8dD5uKSYmKHQ9bik7bGV0IGk9XCJcIjtmb3IobGV0IHM9ZTtzPHQ7KytzKWkrPU9vW3Jbc11dO3JldHVybiBpfWEoTG8sXCJoZVxcXG54U2xpY2VcIik7ZnVuY3Rpb24gUm8ocixlLHQpe2xldCBuPXIuc2xpY2UoZSx0KSxpPVwiXCI7Zm9yKGxldCBzPTA7czxuLmxlbmd0aC0xO3MrPVxuMilpKz1TdHJpbmcuZnJvbUNoYXJDb2RlKG5bc10rbltzKzFdKjI1Nik7cmV0dXJuIGl9YShSbyxcInV0ZjE2bGVTbGljZVwiKTtmLnByb3RvdHlwZS5cbnNsaWNlPWEoZnVuY3Rpb24oZSx0KXtsZXQgbj10aGlzLmxlbmd0aDtlPX5+ZSx0PXQ9PT12b2lkIDA/bjp+fnQsZTwwPyhlKz1uLGU8MCYmXG4oZT0wKSk6ZT5uJiYoZT1uKSx0PDA/KHQrPW4sdDwwJiYodD0wKSk6dD5uJiYodD1uKSx0PGUmJih0PWUpO2xldCBpPXRoaXMuc3ViYXJyYXkoXG5lLHQpO3JldHVybiBPYmplY3Quc2V0UHJvdG90eXBlT2YoaSxmLnByb3RvdHlwZSksaX0sXCJzbGljZVwiKTtmdW5jdGlvbiBxKHIsZSx0KXtpZihyJVxuMSE9PTB8fHI8MCl0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIm9mZnNldCBpcyBub3QgdWludFwiKTtpZihyK2U+dCl0aHJvdyBuZXcgUmFuZ2VFcnJvcihcblwiVHJ5aW5nIHRvIGFjY2VzcyBiZXlvbmQgYnVmZmVyIGxlbmd0aFwiKX1hKHEsXCJjaGVja09mZnNldFwiKTtmLnByb3RvdHlwZS5yZWFkVWludExFPVxuZi5wcm90b3R5cGUucmVhZFVJbnRMRT1hKGZ1bmN0aW9uKGUsdCxuKXtlPWU+Pj4wLHQ9dD4+PjAsbnx8cShlLHQsdGhpcy5sZW5ndGgpO2xldCBpPXRoaXNbZV0sXG5zPTEsbz0wO2Zvcig7KytvPHQmJihzKj0yNTYpOylpKz10aGlzW2Urb10qcztyZXR1cm4gaX0sXCJyZWFkVUludExFXCIpO2YucHJvdG90eXBlLlxucmVhZFVpbnRCRT1mLnByb3RvdHlwZS5yZWFkVUludEJFPWEoZnVuY3Rpb24oZSx0LG4pe2U9ZT4+PjAsdD10Pj4+MCxufHxxKGUsdCx0aGlzLlxubGVuZ3RoKTtsZXQgaT10aGlzW2UrLS10XSxzPTE7Zm9yKDt0PjAmJihzKj0yNTYpOylpKz10aGlzW2UrLS10XSpzO3JldHVybiBpfSxcInJlXFxcbmFkVUludEJFXCIpO2YucHJvdG90eXBlLnJlYWRVaW50OD1mLnByb3RvdHlwZS5yZWFkVUludDg9YShmdW5jdGlvbihlLHQpe3JldHVybiBlPVxuZT4+PjAsdHx8cShlLDEsdGhpcy5sZW5ndGgpLHRoaXNbZV19LFwicmVhZFVJbnQ4XCIpO2YucHJvdG90eXBlLnJlYWRVaW50MTZMRT1mLnByb3RvdHlwZS5cbnJlYWRVSW50MTZMRT1hKGZ1bmN0aW9uKGUsdCl7cmV0dXJuIGU9ZT4+PjAsdHx8cShlLDIsdGhpcy5sZW5ndGgpLHRoaXNbZV18dGhpc1tlK1xuMV08PDh9LFwicmVhZFVJbnQxNkxFXCIpO2YucHJvdG90eXBlLnJlYWRVaW50MTZCRT1mLnByb3RvdHlwZS5yZWFkVUludDE2QkU9YShmdW5jdGlvbihlLHQpe1xucmV0dXJuIGU9ZT4+PjAsdHx8cShlLDIsdGhpcy5sZW5ndGgpLHRoaXNbZV08PDh8dGhpc1tlKzFdfSxcInJlYWRVSW50MTZCRVwiKTtmLnByb3RvdHlwZS5cbnJlYWRVaW50MzJMRT1mLnByb3RvdHlwZS5yZWFkVUludDMyTEU9YShmdW5jdGlvbihlLHQpe3JldHVybiBlPWU+Pj4wLHR8fHEoZSw0LHRoaXMuXG5sZW5ndGgpLCh0aGlzW2VdfHRoaXNbZSsxXTw8OHx0aGlzW2UrMl08PDE2KSt0aGlzW2UrM10qMTY3NzcyMTZ9LFwicmVhZFVJbnQzMkxFXCIpO1xuZi5wcm90b3R5cGUucmVhZFVpbnQzMkJFPWYucHJvdG90eXBlLnJlYWRVSW50MzJCRT1hKGZ1bmN0aW9uKGUsdCl7cmV0dXJuIGU9ZT4+PjAsXG50fHxxKGUsNCx0aGlzLmxlbmd0aCksdGhpc1tlXSoxNjc3NzIxNisodGhpc1tlKzFdPDwxNnx0aGlzW2UrMl08PDh8dGhpc1tlKzNdKX0sXCJcXFxucmVhZFVJbnQzMkJFXCIpO2YucHJvdG90eXBlLnJlYWRCaWdVSW50NjRMRT1nZShhKGZ1bmN0aW9uKGUpe2U9ZT4+PjAsQmUoZSxcIm9mZnNldFwiKTtcbmxldCB0PXRoaXNbZV0sbj10aGlzW2UrN107KHQ9PT12b2lkIDB8fG49PT12b2lkIDApJiZXZShlLHRoaXMubGVuZ3RoLTgpO2xldCBpPXQrXG50aGlzWysrZV0qMioqOCt0aGlzWysrZV0qMioqMTYrdGhpc1srK2VdKjIqKjI0LHM9dGhpc1srK2VdK3RoaXNbKytlXSoyKio4K3RoaXNbKytlXSpcbjIqKjE2K24qMioqMjQ7cmV0dXJuIEJpZ0ludChpKSsoQmlnSW50KHMpPDxCaWdJbnQoMzIpKX0sXCJyZWFkQmlnVUludDY0TEVcIikpO2YucHJvdG90eXBlLlxucmVhZEJpZ1VJbnQ2NEJFPWdlKGEoZnVuY3Rpb24oZSl7ZT1lPj4+MCxCZShlLFwib2Zmc2V0XCIpO2xldCB0PXRoaXNbZV0sbj10aGlzW2UrN107XG4odD09PXZvaWQgMHx8bj09PXZvaWQgMCkmJldlKGUsdGhpcy5sZW5ndGgtOCk7bGV0IGk9dCoyKioyNCt0aGlzWysrZV0qMioqMTYrdGhpc1srK2VdKlxuMioqOCt0aGlzWysrZV0scz10aGlzWysrZV0qMioqMjQrdGhpc1srK2VdKjIqKjE2K3RoaXNbKytlXSoyKio4K247cmV0dXJuKEJpZ0ludChcbmkpPDxCaWdJbnQoMzIpKStCaWdJbnQocyl9LFwicmVhZEJpZ1VJbnQ2NEJFXCIpKTtmLnByb3RvdHlwZS5yZWFkSW50TEU9YShmdW5jdGlvbihlLHQsbil7XG5lPWU+Pj4wLHQ9dD4+PjAsbnx8cShlLHQsdGhpcy5sZW5ndGgpO2xldCBpPXRoaXNbZV0scz0xLG89MDtmb3IoOysrbzx0JiYocyo9MjU2KTspXG5pKz10aGlzW2Urb10qcztyZXR1cm4gcyo9MTI4LGk+PXMmJihpLT1NYXRoLnBvdygyLDgqdCkpLGl9LFwicmVhZEludExFXCIpO2YucHJvdG90eXBlLlxucmVhZEludEJFPWEoZnVuY3Rpb24oZSx0LG4pe2U9ZT4+PjAsdD10Pj4+MCxufHxxKGUsdCx0aGlzLmxlbmd0aCk7bGV0IGk9dCxzPTEsbz10aGlzW2UrXG4tLWldO2Zvcig7aT4wJiYocyo9MjU2KTspbys9dGhpc1tlKy0taV0qcztyZXR1cm4gcyo9MTI4LG8+PXMmJihvLT1NYXRoLnBvdygyLDgqdCkpLFxub30sXCJyZWFkSW50QkVcIik7Zi5wcm90b3R5cGUucmVhZEludDg9YShmdW5jdGlvbihlLHQpe3JldHVybiBlPWU+Pj4wLHR8fHEoZSwxLHRoaXMuXG5sZW5ndGgpLHRoaXNbZV0mMTI4PygyNTUtdGhpc1tlXSsxKSotMTp0aGlzW2VdfSxcInJlYWRJbnQ4XCIpO2YucHJvdG90eXBlLnJlYWRJbnQxNkxFPVxuYShmdW5jdGlvbihlLHQpe2U9ZT4+PjAsdHx8cShlLDIsdGhpcy5sZW5ndGgpO2xldCBuPXRoaXNbZV18dGhpc1tlKzFdPDw4O3JldHVybiBuJlxuMzI3Njg/bnw0Mjk0OTAxNzYwOm59LFwicmVhZEludDE2TEVcIik7Zi5wcm90b3R5cGUucmVhZEludDE2QkU9YShmdW5jdGlvbihlLHQpe2U9ZT4+PlxuMCx0fHxxKGUsMix0aGlzLmxlbmd0aCk7bGV0IG49dGhpc1tlKzFdfHRoaXNbZV08PDg7cmV0dXJuIG4mMzI3Njg/bnw0Mjk0OTAxNzYwOm59LFxuXCJyZWFkSW50MTZCRVwiKTtmLnByb3RvdHlwZS5yZWFkSW50MzJMRT1hKGZ1bmN0aW9uKGUsdCl7cmV0dXJuIGU9ZT4+PjAsdHx8cShlLDQsdGhpcy5cbmxlbmd0aCksdGhpc1tlXXx0aGlzW2UrMV08PDh8dGhpc1tlKzJdPDwxNnx0aGlzW2UrM108PDI0fSxcInJlYWRJbnQzMkxFXCIpO2YucHJvdG90eXBlLlxucmVhZEludDMyQkU9YShmdW5jdGlvbihlLHQpe3JldHVybiBlPWU+Pj4wLHR8fHEoZSw0LHRoaXMubGVuZ3RoKSx0aGlzW2VdPDwyNHx0aGlzW2UrXG4xXTw8MTZ8dGhpc1tlKzJdPDw4fHRoaXNbZSszXX0sXCJyZWFkSW50MzJCRVwiKTtmLnByb3RvdHlwZS5yZWFkQmlnSW50NjRMRT1nZShhKGZ1bmN0aW9uKGUpe1xuZT1lPj4+MCxCZShlLFwib2Zmc2V0XCIpO2xldCB0PXRoaXNbZV0sbj10aGlzW2UrN107KHQ9PT12b2lkIDB8fG49PT12b2lkIDApJiZXZShlLFxudGhpcy5sZW5ndGgtOCk7bGV0IGk9dGhpc1tlKzRdK3RoaXNbZSs1XSoyKio4K3RoaXNbZSs2XSoyKioxNisobjw8MjQpO3JldHVybihCaWdJbnQoXG5pKTw8QmlnSW50KDMyKSkrQmlnSW50KHQrdGhpc1srK2VdKjIqKjgrdGhpc1srK2VdKjIqKjE2K3RoaXNbKytlXSoyKioyNCl9LFwicmVhZEJcXFxuaWdJbnQ2NExFXCIpKTtmLnByb3RvdHlwZS5yZWFkQmlnSW50NjRCRT1nZShhKGZ1bmN0aW9uKGUpe2U9ZT4+PjAsQmUoZSxcIm9mZnNldFwiKTtcbmxldCB0PXRoaXNbZV0sbj10aGlzW2UrN107KHQ9PT12b2lkIDB8fG49PT12b2lkIDApJiZXZShlLHRoaXMubGVuZ3RoLTgpO2xldCBpPSh0PDxcbjI0KSt0aGlzWysrZV0qMioqMTYrdGhpc1srK2VdKjIqKjgrdGhpc1srK2VdO3JldHVybihCaWdJbnQoaSk8PEJpZ0ludCgzMikpK0JpZ0ludChcbnRoaXNbKytlXSoyKioyNCt0aGlzWysrZV0qMioqMTYrdGhpc1srK2VdKjIqKjgrbil9LFwicmVhZEJpZ0ludDY0QkVcIikpO2YucHJvdG90eXBlLlxucmVhZEZsb2F0TEU9YShmdW5jdGlvbihlLHQpe3JldHVybiBlPWU+Pj4wLHR8fHEoZSw0LHRoaXMubGVuZ3RoKSxQZS5yZWFkKHRoaXMsZSxcbiEwLDIzLDQpfSxcInJlYWRGbG9hdExFXCIpO2YucHJvdG90eXBlLnJlYWRGbG9hdEJFPWEoZnVuY3Rpb24oZSx0KXtyZXR1cm4gZT1lPj4+MCxcbnR8fHEoZSw0LHRoaXMubGVuZ3RoKSxQZS5yZWFkKHRoaXMsZSwhMSwyMyw0KX0sXCJyZWFkRmxvYXRCRVwiKTtmLnByb3RvdHlwZS5yZWFkRG91YmxlTEU9XG5hKGZ1bmN0aW9uKGUsdCl7cmV0dXJuIGU9ZT4+PjAsdHx8cShlLDgsdGhpcy5sZW5ndGgpLFBlLnJlYWQodGhpcyxlLCEwLDUyLDgpfSxcInJcXFxuZWFkRG91YmxlTEVcIik7Zi5wcm90b3R5cGUucmVhZERvdWJsZUJFPWEoZnVuY3Rpb24oZSx0KXtyZXR1cm4gZT1lPj4+MCx0fHxxKGUsOCx0aGlzLlxubGVuZ3RoKSxQZS5yZWFkKHRoaXMsZSwhMSw1Miw4KX0sXCJyZWFkRG91YmxlQkVcIik7ZnVuY3Rpb24gWShyLGUsdCxuLGkscyl7aWYoIWYuaXNCdWZmZXIoXG5yKSl0aHJvdyBuZXcgVHlwZUVycm9yKCdcImJ1ZmZlclwiIGFyZ3VtZW50IG11c3QgYmUgYSBCdWZmZXIgaW5zdGFuY2UnKTtpZihlPml8fGU8XG5zKXRocm93IG5ldyBSYW5nZUVycm9yKCdcInZhbHVlXCIgYXJndW1lbnQgaXMgb3V0IG9mIGJvdW5kcycpO2lmKHQrbj5yLmxlbmd0aCl0aHJvdyBuZXcgUmFuZ2VFcnJvcihcblwiSW5kZXggb3V0IG9mIHJhbmdlXCIpfWEoWSxcImNoZWNrSW50XCIpO2YucHJvdG90eXBlLndyaXRlVWludExFPWYucHJvdG90eXBlLndyaXRlVUludExFPVxuYShmdW5jdGlvbihlLHQsbixpKXtpZihlPStlLHQ9dD4+PjAsbj1uPj4+MCwhaSl7bGV0IHU9TWF0aC5wb3coMiw4Km4pLTE7WSh0aGlzLGUsXG50LG4sdSwwKX1sZXQgcz0xLG89MDtmb3IodGhpc1t0XT1lJjI1NTsrK288biYmKHMqPTI1Nik7KXRoaXNbdCtvXT1lL3MmMjU1O3JldHVybiB0K1xubn0sXCJ3cml0ZVVJbnRMRVwiKTtmLnByb3RvdHlwZS53cml0ZVVpbnRCRT1mLnByb3RvdHlwZS53cml0ZVVJbnRCRT1hKGZ1bmN0aW9uKGUsdCxuLGkpe1xuaWYoZT0rZSx0PXQ+Pj4wLG49bj4+PjAsIWkpe2xldCB1PU1hdGgucG93KDIsOCpuKS0xO1kodGhpcyxlLHQsbix1LDApfWxldCBzPW4tMSxcbm89MTtmb3IodGhpc1t0K3NdPWUmMjU1Oy0tcz49MCYmKG8qPTI1Nik7KXRoaXNbdCtzXT1lL28mMjU1O3JldHVybiB0K259LFwid3JpdGVVSVxcXG5udEJFXCIpO2YucHJvdG90eXBlLndyaXRlVWludDg9Zi5wcm90b3R5cGUud3JpdGVVSW50OD1hKGZ1bmN0aW9uKGUsdCxuKXtyZXR1cm4gZT1cbitlLHQ9dD4+PjAsbnx8WSh0aGlzLGUsdCwxLDI1NSwwKSx0aGlzW3RdPWUmMjU1LHQrMX0sXCJ3cml0ZVVJbnQ4XCIpO2YucHJvdG90eXBlLndyaXRlVWludDE2TEU9XG5mLnByb3RvdHlwZS53cml0ZVVJbnQxNkxFPWEoZnVuY3Rpb24oZSx0LG4pe3JldHVybiBlPStlLHQ9dD4+PjAsbnx8WSh0aGlzLGUsdCwyLFxuNjU1MzUsMCksdGhpc1t0XT1lJjI1NSx0aGlzW3QrMV09ZT4+PjgsdCsyfSxcIndyaXRlVUludDE2TEVcIik7Zi5wcm90b3R5cGUud3JpdGVVaW50MTZCRT1cbmYucHJvdG90eXBlLndyaXRlVUludDE2QkU9YShmdW5jdGlvbihlLHQsbil7cmV0dXJuIGU9K2UsdD10Pj4+MCxufHxZKHRoaXMsZSx0LDIsXG42NTUzNSwwKSx0aGlzW3RdPWU+Pj44LHRoaXNbdCsxXT1lJjI1NSx0KzJ9LFwid3JpdGVVSW50MTZCRVwiKTtmLnByb3RvdHlwZS53cml0ZVVpbnQzMkxFPVxuZi5wcm90b3R5cGUud3JpdGVVSW50MzJMRT1hKGZ1bmN0aW9uKGUsdCxuKXtyZXR1cm4gZT0rZSx0PXQ+Pj4wLG58fFkodGhpcyxlLHQsNCxcbjQyOTQ5NjcyOTUsMCksdGhpc1t0KzNdPWU+Pj4yNCx0aGlzW3QrMl09ZT4+PjE2LHRoaXNbdCsxXT1lPj4+OCx0aGlzW3RdPWUmMjU1LHQrXG40fSxcIndyaXRlVUludDMyTEVcIik7Zi5wcm90b3R5cGUud3JpdGVVaW50MzJCRT1mLnByb3RvdHlwZS53cml0ZVVJbnQzMkJFPWEoZnVuY3Rpb24oZSx0LG4pe1xucmV0dXJuIGU9K2UsdD10Pj4+MCxufHxZKHRoaXMsZSx0LDQsNDI5NDk2NzI5NSwwKSx0aGlzW3RdPWU+Pj4yNCx0aGlzW3QrMV09ZT4+PjE2LFxudGhpc1t0KzJdPWU+Pj44LHRoaXNbdCszXT1lJjI1NSx0KzR9LFwid3JpdGVVSW50MzJCRVwiKTtmdW5jdGlvbiBObihyLGUsdCxuLGkpe0huKFxuZSxuLGkscix0LDcpO2xldCBzPU51bWJlcihlJkJpZ0ludCg0Mjk0OTY3Mjk1KSk7clt0KytdPXMscz1zPj44LHJbdCsrXT1zLHM9cz4+OCxcbnJbdCsrXT1zLHM9cz4+OCxyW3QrK109cztsZXQgbz1OdW1iZXIoZT4+QmlnSW50KDMyKSZCaWdJbnQoNDI5NDk2NzI5NSkpO3JldHVybiByW3QrK109XG5vLG89bz4+OCxyW3QrK109byxvPW8+Pjgsclt0KytdPW8sbz1vPj44LHJbdCsrXT1vLHR9YShObixcIndydEJpZ1VJbnQ2NExFXCIpO2Z1bmN0aW9uIHFuKHIsZSx0LG4saSl7XG5IbihlLG4saSxyLHQsNyk7bGV0IHM9TnVtYmVyKGUmQmlnSW50KDQyOTQ5NjcyOTUpKTtyW3QrN109cyxzPXM+Pjgsclt0KzZdPXMscz1zPj5cbjgsclt0KzVdPXMscz1zPj44LHJbdCs0XT1zO2xldCBvPU51bWJlcihlPj5CaWdJbnQoMzIpJkJpZ0ludCg0Mjk0OTY3Mjk1KSk7cmV0dXJuIHJbdCtcbjNdPW8sbz1vPj44LHJbdCsyXT1vLG89bz4+OCxyW3QrMV09byxvPW8+Pjgsclt0XT1vLHQrOH1hKHFuLFwid3J0QmlnVUludDY0QkVcIik7Zi5cbnByb3RvdHlwZS53cml0ZUJpZ1VJbnQ2NExFPWdlKGEoZnVuY3Rpb24oZSx0PTApe3JldHVybiBObih0aGlzLGUsdCxCaWdJbnQoMCksQmlnSW50KFxuXCIweGZmZmZmZmZmZmZmZmZmZmZcIikpfSxcIndyaXRlQmlnVUludDY0TEVcIikpO2YucHJvdG90eXBlLndyaXRlQmlnVUludDY0QkU9Z2UoYShmdW5jdGlvbihlLHQ9MCl7XG5yZXR1cm4gcW4odGhpcyxlLHQsQmlnSW50KDApLEJpZ0ludChcIjB4ZmZmZmZmZmZmZmZmZmZmZlwiKSl9LFwid3JpdGVCaWdVSW50NjRCRVwiKSk7XG5mLnByb3RvdHlwZS53cml0ZUludExFPWEoZnVuY3Rpb24oZSx0LG4saSl7aWYoZT0rZSx0PXQ+Pj4wLCFpKXtsZXQgYz1NYXRoLnBvdygyLFxuOCpuLTEpO1kodGhpcyxlLHQsbixjLTEsLWMpfWxldCBzPTAsbz0xLHU9MDtmb3IodGhpc1t0XT1lJjI1NTsrK3M8biYmKG8qPTI1Nik7KWU8XG4wJiZ1PT09MCYmdGhpc1t0K3MtMV0hPT0wJiYodT0xKSx0aGlzW3Qrc109KGUvbz4+MCktdSYyNTU7cmV0dXJuIHQrbn0sXCJ3cml0ZUludExcXFxuRVwiKTtmLnByb3RvdHlwZS53cml0ZUludEJFPWEoZnVuY3Rpb24oZSx0LG4saSl7aWYoZT0rZSx0PXQ+Pj4wLCFpKXtsZXQgYz1NYXRoLnBvdyhcbjIsOCpuLTEpO1kodGhpcyxlLHQsbixjLTEsLWMpfWxldCBzPW4tMSxvPTEsdT0wO2Zvcih0aGlzW3Qrc109ZSYyNTU7LS1zPj0wJiYobyo9XG4yNTYpOyllPDAmJnU9PT0wJiZ0aGlzW3QrcysxXSE9PTAmJih1PTEpLHRoaXNbdCtzXT0oZS9vPj4wKS11JjI1NTtyZXR1cm4gdCtufSxcIndcXFxucml0ZUludEJFXCIpO2YucHJvdG90eXBlLndyaXRlSW50OD1hKGZ1bmN0aW9uKGUsdCxuKXtyZXR1cm4gZT0rZSx0PXQ+Pj4wLG58fFkodGhpcyxcbmUsdCwxLDEyNywtMTI4KSxlPDAmJihlPTI1NStlKzEpLHRoaXNbdF09ZSYyNTUsdCsxfSxcIndyaXRlSW50OFwiKTtmLnByb3RvdHlwZS53cml0ZUludDE2TEU9XG5hKGZ1bmN0aW9uKGUsdCxuKXtyZXR1cm4gZT0rZSx0PXQ+Pj4wLG58fFkodGhpcyxlLHQsMiwzMjc2NywtMzI3NjgpLHRoaXNbdF09ZSYyNTUsXG50aGlzW3QrMV09ZT4+PjgsdCsyfSxcIndyaXRlSW50MTZMRVwiKTtmLnByb3RvdHlwZS53cml0ZUludDE2QkU9YShmdW5jdGlvbihlLHQsbil7XG5yZXR1cm4gZT0rZSx0PXQ+Pj4wLG58fFkodGhpcyxlLHQsMiwzMjc2NywtMzI3NjgpLHRoaXNbdF09ZT4+PjgsdGhpc1t0KzFdPWUmMjU1LFxudCsyfSxcIndyaXRlSW50MTZCRVwiKTtmLnByb3RvdHlwZS53cml0ZUludDMyTEU9YShmdW5jdGlvbihlLHQsbil7cmV0dXJuIGU9K2UsdD10Pj4+XG4wLG58fFkodGhpcyxlLHQsNCwyMTQ3NDgzNjQ3LC0yMTQ3NDgzNjQ4KSx0aGlzW3RdPWUmMjU1LHRoaXNbdCsxXT1lPj4+OCx0aGlzW3QrMl09XG5lPj4+MTYsdGhpc1t0KzNdPWU+Pj4yNCx0KzR9LFwid3JpdGVJbnQzMkxFXCIpO2YucHJvdG90eXBlLndyaXRlSW50MzJCRT1hKGZ1bmN0aW9uKGUsdCxuKXtcbnJldHVybiBlPStlLHQ9dD4+PjAsbnx8WSh0aGlzLGUsdCw0LDIxNDc0ODM2NDcsLTIxNDc0ODM2NDgpLGU8MCYmKGU9NDI5NDk2NzI5NStlK1xuMSksdGhpc1t0XT1lPj4+MjQsdGhpc1t0KzFdPWU+Pj4xNix0aGlzW3QrMl09ZT4+PjgsdGhpc1t0KzNdPWUmMjU1LHQrNH0sXCJ3cml0ZUluXFxcbnQzMkJFXCIpO2YucHJvdG90eXBlLndyaXRlQmlnSW50NjRMRT1nZShhKGZ1bmN0aW9uKGUsdD0wKXtyZXR1cm4gTm4odGhpcyxlLHQsLUJpZ0ludChcblwiMHg4MDAwMDAwMDAwMDAwMDAwXCIpLEJpZ0ludChcIjB4N2ZmZmZmZmZmZmZmZmZmZlwiKSl9LFwid3JpdGVCaWdJbnQ2NExFXCIpKTtmLnByb3RvdHlwZS5cbndyaXRlQmlnSW50NjRCRT1nZShhKGZ1bmN0aW9uKGUsdD0wKXtyZXR1cm4gcW4odGhpcyxlLHQsLUJpZ0ludChcIjB4ODAwMDAwMDAwMDAwMFxcXG4wMDBcIiksQmlnSW50KFwiMHg3ZmZmZmZmZmZmZmZmZmZmXCIpKX0sXCJ3cml0ZUJpZ0ludDY0QkVcIikpO2Z1bmN0aW9uIFFuKHIsZSx0LG4saSxzKXtcbmlmKHQrbj5yLmxlbmd0aCl0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIkluZGV4IG91dCBvZiByYW5nZVwiKTtpZih0PDApdGhyb3cgbmV3IFJhbmdlRXJyb3IoXG5cIkluZGV4IG91dCBvZiByYW5nZVwiKX1hKFFuLFwiY2hlY2tJRUVFNzU0XCIpO2Z1bmN0aW9uIFduKHIsZSx0LG4saSl7cmV0dXJuIGU9K2UsdD1cbnQ+Pj4wLGl8fFFuKHIsZSx0LDQsMzQwMjgyMzQ2NjM4NTI4ODZlMjIsLTM0MDI4MjM0NjYzODUyODg2ZTIyKSxQZS53cml0ZShyLGUsdCxuLFxuMjMsNCksdCs0fWEoV24sXCJ3cml0ZUZsb2F0XCIpO2YucHJvdG90eXBlLndyaXRlRmxvYXRMRT1hKGZ1bmN0aW9uKGUsdCxuKXtyZXR1cm4gV24oXG50aGlzLGUsdCwhMCxuKX0sXCJ3cml0ZUZsb2F0TEVcIik7Zi5wcm90b3R5cGUud3JpdGVGbG9hdEJFPWEoZnVuY3Rpb24oZSx0LG4pe3JldHVybiBXbihcbnRoaXMsZSx0LCExLG4pfSxcIndyaXRlRmxvYXRCRVwiKTtmdW5jdGlvbiBqbihyLGUsdCxuLGkpe3JldHVybiBlPStlLHQ9dD4+PjAsaXx8UW4oXG5yLGUsdCw4LDE3OTc2OTMxMzQ4NjIzMTU3ZTI5MiwtMTc5NzY5MzEzNDg2MjMxNTdlMjkyKSxQZS53cml0ZShyLGUsdCxuLDUyLDgpLHQrOH1cbmEoam4sXCJ3cml0ZURvdWJsZVwiKTtmLnByb3RvdHlwZS53cml0ZURvdWJsZUxFPWEoZnVuY3Rpb24oZSx0LG4pe3JldHVybiBqbih0aGlzLGUsXG50LCEwLG4pfSxcIndyaXRlRG91YmxlTEVcIik7Zi5wcm90b3R5cGUud3JpdGVEb3VibGVCRT1hKGZ1bmN0aW9uKGUsdCxuKXtyZXR1cm4gam4oXG50aGlzLGUsdCwhMSxuKX0sXCJ3cml0ZURvdWJsZUJFXCIpO2YucHJvdG90eXBlLmNvcHk9YShmdW5jdGlvbihlLHQsbixpKXtpZighZi5pc0J1ZmZlcihcbmUpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJhcmd1bWVudCBzaG91bGQgYmUgYSBCdWZmZXJcIik7aWYobnx8KG49MCksIWkmJmkhPT0wJiYoaT1cbnRoaXMubGVuZ3RoKSx0Pj1lLmxlbmd0aCYmKHQ9ZS5sZW5ndGgpLHR8fCh0PTApLGk+MCYmaTxuJiYoaT1uKSxpPT09bnx8ZS5sZW5ndGg9PT1cbjB8fHRoaXMubGVuZ3RoPT09MClyZXR1cm4gMDtpZih0PDApdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJ0YXJnZXRTdGFydCBvdXQgb2YgYm91blxcXG5kc1wiKTtpZihuPDB8fG4+PXRoaXMubGVuZ3RoKXRocm93IG5ldyBSYW5nZUVycm9yKFwiSW5kZXggb3V0IG9mIHJhbmdlXCIpO2lmKGk8MCl0aHJvdyBuZXcgUmFuZ2VFcnJvcihcblwic291cmNlRW5kIG91dCBvZiBib3VuZHNcIik7aT50aGlzLmxlbmd0aCYmKGk9dGhpcy5sZW5ndGgpLGUubGVuZ3RoLXQ8aS1uJiYoaT1lLmxlbmd0aC1cbnQrbik7bGV0IHM9aS1uO3JldHVybiB0aGlzPT09ZSYmdHlwZW9mIFVpbnQ4QXJyYXkucHJvdG90eXBlLmNvcHlXaXRoaW49PVwiZnVuY3Rpb1xcXG5uXCI/dGhpcy5jb3B5V2l0aGluKHQsbixpKTpVaW50OEFycmF5LnByb3RvdHlwZS5zZXQuY2FsbChlLHRoaXMuc3ViYXJyYXkobixpKSx0KSxcbnN9LFwiY29weVwiKTtmLnByb3RvdHlwZS5maWxsPWEoZnVuY3Rpb24oZSx0LG4saSl7aWYodHlwZW9mIGU9PVwic3RyaW5nXCIpe2lmKHR5cGVvZiB0PT1cblwic3RyaW5nXCI/KGk9dCx0PTAsbj10aGlzLmxlbmd0aCk6dHlwZW9mIG49PVwic3RyaW5nXCImJihpPW4sbj10aGlzLmxlbmd0aCksaSE9PXZvaWQgMCYmXG50eXBlb2YgaSE9XCJzdHJpbmdcIil0aHJvdyBuZXcgVHlwZUVycm9yKFwiZW5jb2RpbmcgbXVzdCBiZSBhIHN0cmluZ1wiKTtpZih0eXBlb2YgaT09XG5cInN0cmluZ1wiJiYhZi5pc0VuY29kaW5nKGkpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJVbmtub3duIGVuY29kaW5nOiBcIitpKTtpZihlLmxlbmd0aD09PVxuMSl7bGV0IG89ZS5jaGFyQ29kZUF0KDApOyhpPT09XCJ1dGY4XCImJm88MTI4fHxpPT09XCJsYXRpbjFcIikmJihlPW8pfX1lbHNlIHR5cGVvZiBlPT1cblwibnVtYmVyXCI/ZT1lJjI1NTp0eXBlb2YgZT09XCJib29sZWFuXCImJihlPU51bWJlcihlKSk7aWYodDwwfHx0aGlzLmxlbmd0aDx0fHx0aGlzLlxubGVuZ3RoPG4pdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJPdXQgb2YgcmFuZ2UgaW5kZXhcIik7aWYobjw9dClyZXR1cm4gdGhpczt0PXQ+Pj4wLFxubj1uPT09dm9pZCAwP3RoaXMubGVuZ3RoOm4+Pj4wLGV8fChlPTApO2xldCBzO2lmKHR5cGVvZiBlPT1cIm51bWJlclwiKWZvcihzPXQ7czxuOysrcylcbnRoaXNbc109ZTtlbHNle2xldCBvPWYuaXNCdWZmZXIoZSk/ZTpmLmZyb20oZSxpKSx1PW8ubGVuZ3RoO2lmKHU9PT0wKXRocm93IG5ldyBUeXBlRXJyb3IoXG4nVGhlIHZhbHVlIFwiJytlKydcIiBpcyBpbnZhbGlkIGZvciBhcmd1bWVudCBcInZhbHVlXCInKTtmb3Iocz0wO3M8bi10Oysrcyl0aGlzW3MrdF09XG5vW3MldV19cmV0dXJuIHRoaXN9LFwiZmlsbFwiKTt2YXIgSWU9e307ZnVuY3Rpb24gVXQocixlLHQpe3ZhciBuO0llW3JdPShuPWNsYXNzIGV4dGVuZHMgdHtjb25zdHJ1Y3Rvcigpe1xuc3VwZXIoKSxPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcyxcIm1lc3NhZ2VcIix7dmFsdWU6ZS5hcHBseSh0aGlzLGFyZ3VtZW50cyksd3JpdGFibGU6ITAsXG5jb25maWd1cmFibGU6ITB9KSx0aGlzLm5hbWU9YCR7dGhpcy5uYW1lfSBbJHtyfV1gLHRoaXMuc3RhY2ssZGVsZXRlIHRoaXMubmFtZX1nZXQgY29kZSgpe1xucmV0dXJuIHJ9c2V0IGNvZGUocyl7T2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsXCJjb2RlXCIse2NvbmZpZ3VyYWJsZTohMCxlbnVtZXJhYmxlOiEwLFxudmFsdWU6cyx3cml0YWJsZTohMH0pfXRvU3RyaW5nKCl7cmV0dXJuYCR7dGhpcy5uYW1lfSBbJHtyfV06ICR7dGhpcy5tZXNzYWdlfWB9fSxcbmEobixcIk5vZGVFcnJvclwiKSxuKX1hKFV0LFwiRVwiKTtVdChcIkVSUl9CVUZGRVJfT1VUX09GX0JPVU5EU1wiLGZ1bmN0aW9uKHIpe3JldHVybiByP1xuYCR7cn0gaXMgb3V0c2lkZSBvZiBidWZmZXIgYm91bmRzYDpcIkF0dGVtcHQgdG8gYWNjZXNzIG1lbW9yeSBvdXRzaWRlIGJ1ZmZlciBib3VuXFxcbmRzXCJ9LFJhbmdlRXJyb3IpO1V0KFwiRVJSX0lOVkFMSURfQVJHX1RZUEVcIixmdW5jdGlvbihyLGUpe3JldHVybmBUaGUgXCIke3J9XCIgYXJndW1cXFxuZW50IG11c3QgYmUgb2YgdHlwZSBudW1iZXIuIFJlY2VpdmVkIHR5cGUgJHt0eXBlb2YgZX1gfSxUeXBlRXJyb3IpO1V0KFwiRVJSX09VVF9PXFxcbkZfUkFOR0VcIixmdW5jdGlvbihyLGUsdCl7bGV0IG49YFRoZSB2YWx1ZSBvZiBcIiR7cn1cIiBpcyBvdXQgb2YgcmFuZ2UuYCxpPXQ7cmV0dXJuIE51bWJlci5cbmlzSW50ZWdlcih0KSYmTWF0aC5hYnModCk+MioqMzI/aT1GbihTdHJpbmcodCkpOnR5cGVvZiB0PT1cImJpZ2ludFwiJiYoaT1TdHJpbmcodCksXG4odD5CaWdJbnQoMikqKkJpZ0ludCgzMil8fHQ8LShCaWdJbnQoMikqKkJpZ0ludCgzMikpKSYmKGk9Rm4oaSkpLGkrPVwiblwiKSxuKz1gIEl0XFxcbiBtdXN0IGJlICR7ZX0uIFJlY2VpdmVkICR7aX1gLG59LFJhbmdlRXJyb3IpO2Z1bmN0aW9uIEZuKHIpe2xldCBlPVwiXCIsdD1yLmxlbmd0aCxcbm49clswXT09PVwiLVwiPzE6MDtmb3IoO3Q+PW4rNDt0LT0zKWU9YF8ke3Iuc2xpY2UodC0zLHQpfSR7ZX1gO3JldHVybmAke3Iuc2xpY2UoMCxcbnQpfSR7ZX1gfWEoRm4sXCJhZGROdW1lcmljYWxTZXBhcmF0b3JcIik7ZnVuY3Rpb24gRm8ocixlLHQpe0JlKGUsXCJvZmZzZXRcIiksKHJbZV09PT1cbnZvaWQgMHx8cltlK3RdPT09dm9pZCAwKSYmV2UoZSxyLmxlbmd0aC0odCsxKSl9YShGbyxcImNoZWNrQm91bmRzXCIpO2Z1bmN0aW9uIEhuKHIsZSx0LG4saSxzKXtcbmlmKHI+dHx8cjxlKXtsZXQgbz10eXBlb2YgZT09XCJiaWdpbnRcIj9cIm5cIjpcIlwiLHU7dGhyb3cgcz4zP2U9PT0wfHxlPT09QmlnSW50KDApP3U9XG5gPj0gMCR7b30gYW5kIDwgMiR7b30gKiogJHsocysxKSo4fSR7b31gOnU9YD49IC0oMiR7b30gKiogJHsocysxKSo4LTF9JHtvfSkgYW5kIFxcXG48IDIgKiogJHsocysxKSo4LTF9JHtvfWA6dT1gPj0gJHtlfSR7b30gYW5kIDw9ICR7dH0ke299YCxuZXcgSWUuRVJSX09VVF9PRl9SQU5HRShcblwidmFsdWVcIix1LHIpfUZvKG4saSxzKX1hKEhuLFwiY2hlY2tJbnRCSVwiKTtmdW5jdGlvbiBCZShyLGUpe2lmKHR5cGVvZiByIT1cIm51bWJlclwiKVxudGhyb3cgbmV3IEllLkVSUl9JTlZBTElEX0FSR19UWVBFKGUsXCJudW1iZXJcIixyKX1hKEJlLFwidmFsaWRhdGVOdW1iZXJcIik7ZnVuY3Rpb24gV2UocixlLHQpe1xudGhyb3cgTWF0aC5mbG9vcihyKSE9PXI/KEJlKHIsdCksbmV3IEllLkVSUl9PVVRfT0ZfUkFOR0UodHx8XCJvZmZzZXRcIixcImFuIGludGVnZXJcIixcbnIpKTplPDA/bmV3IEllLkVSUl9CVUZGRVJfT1VUX09GX0JPVU5EUzpuZXcgSWUuRVJSX09VVF9PRl9SQU5HRSh0fHxcIm9mZnNldFwiLGA+PSAke3Q/XG4xOjB9IGFuZCA8PSAke2V9YCxyKX1hKFdlLFwiYm91bmRzRXJyb3JcIik7dmFyIE1vPS9bXisvMC05QS1aYS16LV9dL2c7ZnVuY3Rpb24gRG8ocil7XG5pZihyPXIuc3BsaXQoXCI9XCIpWzBdLHI9ci50cmltKCkucmVwbGFjZShNbyxcIlwiKSxyLmxlbmd0aDwyKXJldHVyblwiXCI7Zm9yKDtyLmxlbmd0aCVcbjQhPT0wOylyPXIrXCI9XCI7cmV0dXJuIHJ9YShEbyxcImJhc2U2NGNsZWFuXCIpO2Z1bmN0aW9uIE10KHIsZSl7ZT1lfHwxLzA7bGV0IHQsbj1yLlxubGVuZ3RoLGk9bnVsbCxzPVtdO2ZvcihsZXQgbz0wO288bjsrK28pe2lmKHQ9ci5jaGFyQ29kZUF0KG8pLHQ+NTUyOTUmJnQ8NTczNDQpe2lmKCFpKXtcbmlmKHQ+NTYzMTkpeyhlLT0zKT4tMSYmcy5wdXNoKDIzOSwxOTEsMTg5KTtjb250aW51ZX1lbHNlIGlmKG8rMT09PW4peyhlLT0zKT4tMSYmXG5zLnB1c2goMjM5LDE5MSwxODkpO2NvbnRpbnVlfWk9dDtjb250aW51ZX1pZih0PDU2MzIwKXsoZS09Myk+LTEmJnMucHVzaCgyMzksMTkxLFxuMTg5KSxpPXQ7Y29udGludWV9dD0oaS01NTI5Njw8MTB8dC01NjMyMCkrNjU1MzZ9ZWxzZSBpJiYoZS09Myk+LTEmJnMucHVzaCgyMzksMTkxLFxuMTg5KTtpZihpPW51bGwsdDwxMjgpe2lmKChlLT0xKTwwKWJyZWFrO3MucHVzaCh0KX1lbHNlIGlmKHQ8MjA0OCl7aWYoKGUtPTIpPDApYnJlYWs7XG5zLnB1c2godD4+NnwxOTIsdCY2M3wxMjgpfWVsc2UgaWYodDw2NTUzNil7aWYoKGUtPTMpPDApYnJlYWs7cy5wdXNoKHQ+PjEyfDIyNCx0Pj5cbjYmNjN8MTI4LHQmNjN8MTI4KX1lbHNlIGlmKHQ8MTExNDExMil7aWYoKGUtPTQpPDApYnJlYWs7cy5wdXNoKHQ+PjE4fDI0MCx0Pj4xMiY2M3xcbjEyOCx0Pj42JjYzfDEyOCx0JjYzfDEyOCl9ZWxzZSB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIGNvZGUgcG9pbnRcIil9cmV0dXJuIHN9YShcbk10LFwidXRmOFRvQnl0ZXNcIik7ZnVuY3Rpb24ga28ocil7bGV0IGU9W107Zm9yKGxldCB0PTA7dDxyLmxlbmd0aDsrK3QpZS5wdXNoKHIuY2hhckNvZGVBdChcbnQpJjI1NSk7cmV0dXJuIGV9YShrbyxcImFzY2lpVG9CeXRlc1wiKTtmdW5jdGlvbiBVbyhyLGUpe2xldCB0LG4saSxzPVtdO2ZvcihsZXQgbz0wO288XG5yLmxlbmd0aCYmISgoZS09Mik8MCk7KytvKXQ9ci5jaGFyQ29kZUF0KG8pLG49dD4+OCxpPXQlMjU2LHMucHVzaChpKSxzLnB1c2gobik7cmV0dXJuIHN9XG5hKFVvLFwidXRmMTZsZVRvQnl0ZXNcIik7ZnVuY3Rpb24gR24ocil7cmV0dXJuIEx0LnRvQnl0ZUFycmF5KERvKHIpKX1hKEduLFwiYmFzZTY0VFxcXG5vQnl0ZXNcIik7ZnVuY3Rpb24gc3QocixlLHQsbil7bGV0IGk7Zm9yKGk9MDtpPG4mJiEoaSt0Pj1lLmxlbmd0aHx8aT49ci5sZW5ndGgpOysraSlcbmVbaSt0XT1yW2ldO3JldHVybiBpfWEoc3QsXCJibGl0QnVmZmVyXCIpO2Z1bmN0aW9uIHVlKHIsZSl7cmV0dXJuIHIgaW5zdGFuY2VvZiBlfHxcbnIhPW51bGwmJnIuY29uc3RydWN0b3IhPW51bGwmJnIuY29uc3RydWN0b3IubmFtZSE9bnVsbCYmci5jb25zdHJ1Y3Rvci5uYW1lPT09ZS5uYW1lfVxuYSh1ZSxcImlzSW5zdGFuY2VcIik7ZnVuY3Rpb24gT3Qocil7cmV0dXJuIHIhPT1yfWEoT3QsXCJudW1iZXJJc05hTlwiKTt2YXIgT289ZnVuY3Rpb24oKXtcbmxldCByPVwiMDEyMzQ1Njc4OWFiY2RlZlwiLGU9bmV3IEFycmF5KDI1Nik7Zm9yKGxldCB0PTA7dDwxNjsrK3Qpe2xldCBuPXQqMTY7Zm9yKGxldCBpPTA7aTxcbjE2OysraSllW24raV09clt0XStyW2ldfXJldHVybiBlfSgpO2Z1bmN0aW9uIGdlKHIpe3JldHVybiB0eXBlb2YgQmlnSW50PlwidVwiP05vOnJ9XG5hKGdlLFwiZGVmaW5lQmlnSW50TWV0aG9kXCIpO2Z1bmN0aW9uIE5vKCl7dGhyb3cgbmV3IEVycm9yKFwiQmlnSW50IG5vdCBzdXBwb3J0ZWRcIil9XG5hKE5vLFwiQnVmZmVyQmlnSW50Tm90RGVmaW5lZFwiKX0pO3ZhciBTLHgsdixnLHksbSxwPXooKCk9PntcInVzZSBzdHJpY3RcIjtTPWdsb2JhbFRoaXMseD1nbG9iYWxUaGlzLnNldEltbWVkaWF0ZT8/KHI9PnNldFRpbWVvdXQoXG5yLDApKSx2PWdsb2JhbFRoaXMuY2xlYXJJbW1lZGlhdGU/PyhyPT5jbGVhclRpbWVvdXQocikpLGc9Z2xvYmFsVGhpcy5jcnlwdG8/P3t9O1xuZy5zdWJ0bGU/PyhnLnN1YnRsZT17fSk7eT10eXBlb2YgZ2xvYmFsVGhpcy5CdWZmZXI9PVwiZnVuY3Rpb25cIiYmdHlwZW9mIGdsb2JhbFRoaXMuXG5CdWZmZXIuYWxsb2NVbnNhZmU9PVwiZnVuY3Rpb25cIj9nbG9iYWxUaGlzLkJ1ZmZlcjokbigpLkJ1ZmZlcixtPWdsb2JhbFRoaXMucHJvY2Vzcz8/XG57fTttLmVudj8/KG0uZW52PXt9KTt0cnl7bS5uZXh0VGljaygoKT0+e30pfWNhdGNoe2xldCBlPVByb21pc2UucmVzb2x2ZSgpO20ubmV4dFRpY2s9XG5lLnRoZW4uYmluZChlKX19KTt2YXIgd2U9SSgoWGMsTnQpPT57XCJ1c2Ugc3RyaWN0XCI7cCgpO3ZhciBSZT10eXBlb2YgUmVmbGVjdD09XCJvYmplY3RcIj9SZWZsZWN0Om51bGwsXG5Wbj1SZSYmdHlwZW9mIFJlLmFwcGx5PT1cImZ1bmN0aW9uXCI/UmUuYXBwbHk6YShmdW5jdGlvbihlLHQsbil7cmV0dXJuIEZ1bmN0aW9uLnByb3RvdHlwZS5cbmFwcGx5LmNhbGwoZSx0LG4pfSxcIlJlZmxlY3RBcHBseVwiKSxvdDtSZSYmdHlwZW9mIFJlLm93bktleXM9PVwiZnVuY3Rpb25cIj9vdD1SZS5vd25LZXlzOlxuT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scz9vdD1hKGZ1bmN0aW9uKGUpe3JldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhcbmUpLmNvbmNhdChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKGUpKX0sXCJSZWZsZWN0T3duS2V5c1wiKTpvdD1hKGZ1bmN0aW9uKGUpe3JldHVybiBPYmplY3QuXG5nZXRPd25Qcm9wZXJ0eU5hbWVzKGUpfSxcIlJlZmxlY3RPd25LZXlzXCIpO2Z1bmN0aW9uIHFvKHIpe2NvbnNvbGUmJmNvbnNvbGUud2FybiYmXG5jb25zb2xlLndhcm4ocil9YShxbyxcIlByb2Nlc3NFbWl0V2FybmluZ1wiKTt2YXIgem49TnVtYmVyLmlzTmFOfHxhKGZ1bmN0aW9uKGUpe3JldHVybiBlIT09XG5lfSxcIk51bWJlcklzTmFOXCIpO2Z1bmN0aW9uIEwoKXtMLmluaXQuY2FsbCh0aGlzKX1hKEwsXCJFdmVudEVtaXR0ZXJcIik7TnQuZXhwb3J0cz1cbkw7TnQuZXhwb3J0cy5vbmNlPUhvO0wuRXZlbnRFbWl0dGVyPUw7TC5wcm90b3R5cGUuX2V2ZW50cz12b2lkIDA7TC5wcm90b3R5cGUuX2V2ZW50c0NvdW50PVxuMDtMLnByb3RvdHlwZS5fbWF4TGlzdGVuZXJzPXZvaWQgMDt2YXIgS249MTA7ZnVuY3Rpb24gYXQocil7aWYodHlwZW9mIHIhPVwiZnVuY3RpXFxcbm9uXCIpdGhyb3cgbmV3IFR5cGVFcnJvcignVGhlIFwibGlzdGVuZXJcIiBhcmd1bWVudCBtdXN0IGJlIG9mIHR5cGUgRnVuY3Rpb24uIFJlY2VpXFxcbnZlZCB0eXBlICcrdHlwZW9mIHIpfWEoYXQsXCJjaGVja0xpc3RlbmVyXCIpO09iamVjdC5kZWZpbmVQcm9wZXJ0eShMLFwiZGVmYXVsdE1heExpXFxcbnN0ZW5lcnNcIix7ZW51bWVyYWJsZTohMCxnZXQ6YShmdW5jdGlvbigpe3JldHVybiBLbn0sXCJnZXRcIiksc2V0OmEoZnVuY3Rpb24ocil7aWYodHlwZW9mIHIhPVxuXCJudW1iZXJcInx8cjwwfHx6bihyKSl0aHJvdyBuZXcgUmFuZ2VFcnJvcignVGhlIHZhbHVlIG9mIFwiZGVmYXVsdE1heExpc3RlbmVyc1wiIGlzXFxcbiBvdXQgb2YgcmFuZ2UuIEl0IG11c3QgYmUgYSBub24tbmVnYXRpdmUgbnVtYmVyLiBSZWNlaXZlZCAnK3IrXCIuXCIpO0tuPXJ9LFwic2V0XCIpfSk7XG5MLmluaXQ9ZnVuY3Rpb24oKXsodGhpcy5fZXZlbnRzPT09dm9pZCAwfHx0aGlzLl9ldmVudHM9PT1PYmplY3QuZ2V0UHJvdG90eXBlT2YodGhpcykuXG5fZXZlbnRzKSYmKHRoaXMuX2V2ZW50cz1PYmplY3QuY3JlYXRlKG51bGwpLHRoaXMuX2V2ZW50c0NvdW50PTApLHRoaXMuX21heExpc3RlbmVycz1cbnRoaXMuX21heExpc3RlbmVyc3x8dm9pZCAwfTtMLnByb3RvdHlwZS5zZXRNYXhMaXN0ZW5lcnM9YShmdW5jdGlvbihlKXtpZih0eXBlb2YgZSE9XG5cIm51bWJlclwifHxlPDB8fHpuKGUpKXRocm93IG5ldyBSYW5nZUVycm9yKCdUaGUgdmFsdWUgb2YgXCJuXCIgaXMgb3V0IG9mIHJhbmdlLiBJdCBcXFxubXVzdCBiZSBhIG5vbi1uZWdhdGl2ZSBudW1iZXIuIFJlY2VpdmVkICcrZStcIi5cIik7cmV0dXJuIHRoaXMuX21heExpc3RlbmVycz1lLHRoaXN9LFxuXCJzZXRNYXhMaXN0ZW5lcnNcIik7ZnVuY3Rpb24gWW4ocil7cmV0dXJuIHIuX21heExpc3RlbmVycz09PXZvaWQgMD9MLmRlZmF1bHRNYXhMaXN0ZW5lcnM6XG5yLl9tYXhMaXN0ZW5lcnN9YShZbixcIl9nZXRNYXhMaXN0ZW5lcnNcIik7TC5wcm90b3R5cGUuZ2V0TWF4TGlzdGVuZXJzPWEoZnVuY3Rpb24oKXtcbnJldHVybiBZbih0aGlzKX0sXCJnZXRNYXhMaXN0ZW5lcnNcIik7TC5wcm90b3R5cGUuZW1pdD1hKGZ1bmN0aW9uKGUpe2Zvcih2YXIgdD1bXSxcbm49MTtuPGFyZ3VtZW50cy5sZW5ndGg7bisrKXQucHVzaChhcmd1bWVudHNbbl0pO3ZhciBpPWU9PT1cImVycm9yXCIscz10aGlzLl9ldmVudHM7XG5pZihzIT09dm9pZCAwKWk9aSYmcy5lcnJvcj09PXZvaWQgMDtlbHNlIGlmKCFpKXJldHVybiExO2lmKGkpe3ZhciBvO2lmKHQubGVuZ3RoPlxuMCYmKG89dFswXSksbyBpbnN0YW5jZW9mIEVycm9yKXRocm93IG87dmFyIHU9bmV3IEVycm9yKFwiVW5oYW5kbGVkIGVycm9yLlwiKyhvP1wiIChcIitcbm8ubWVzc2FnZStcIilcIjpcIlwiKSk7dGhyb3cgdS5jb250ZXh0PW8sdX12YXIgYz1zW2VdO2lmKGM9PT12b2lkIDApcmV0dXJuITE7aWYodHlwZW9mIGM9PVxuXCJmdW5jdGlvblwiKVZuKGMsdGhpcyx0KTtlbHNlIGZvcih2YXIgaD1jLmxlbmd0aCxsPXRpKGMsaCksbj0wO248aDsrK24pVm4obFtuXSx0aGlzLFxudCk7cmV0dXJuITB9LFwiZW1pdFwiKTtmdW5jdGlvbiBabihyLGUsdCxuKXt2YXIgaSxzLG87aWYoYXQodCkscz1yLl9ldmVudHMscz09PXZvaWQgMD9cbihzPXIuX2V2ZW50cz1PYmplY3QuY3JlYXRlKG51bGwpLHIuX2V2ZW50c0NvdW50PTApOihzLm5ld0xpc3RlbmVyIT09dm9pZCAwJiYoci5lbWl0KFxuXCJuZXdMaXN0ZW5lclwiLGUsdC5saXN0ZW5lcj90Lmxpc3RlbmVyOnQpLHM9ci5fZXZlbnRzKSxvPXNbZV0pLG89PT12b2lkIDApbz1zW2VdPVxudCwrK3IuX2V2ZW50c0NvdW50O2Vsc2UgaWYodHlwZW9mIG89PVwiZnVuY3Rpb25cIj9vPXNbZV09bj9bdCxvXTpbbyx0XTpuP28udW5zaGlmdChcbnQpOm8ucHVzaCh0KSxpPVluKHIpLGk+MCYmby5sZW5ndGg+aSYmIW8ud2FybmVkKXtvLndhcm5lZD0hMDt2YXIgdT1uZXcgRXJyb3IoXCJQb1xcXG5zc2libGUgRXZlbnRFbWl0dGVyIG1lbW9yeSBsZWFrIGRldGVjdGVkLiBcIitvLmxlbmd0aCtcIiBcIitTdHJpbmcoZSkrXCIgbGlzdGVuZXJzIGFcXFxuZGRlZC4gVXNlIGVtaXR0ZXIuc2V0TWF4TGlzdGVuZXJzKCkgdG8gaW5jcmVhc2UgbGltaXRcIik7dS5uYW1lPVwiTWF4TGlzdGVuZXJzRXhjZVxcXG5lZGVkV2FybmluZ1wiLHUuZW1pdHRlcj1yLHUudHlwZT1lLHUuY291bnQ9by5sZW5ndGgscW8odSl9cmV0dXJuIHJ9YShabixcIl9hZGRMaXN0XFxcbmVuZXJcIik7TC5wcm90b3R5cGUuYWRkTGlzdGVuZXI9YShmdW5jdGlvbihlLHQpe3JldHVybiBabih0aGlzLGUsdCwhMSl9LFwiYWRkTGlzdGVcXFxubmVyXCIpO0wucHJvdG90eXBlLm9uPUwucHJvdG90eXBlLmFkZExpc3RlbmVyO0wucHJvdG90eXBlLnByZXBlbmRMaXN0ZW5lcj1hKGZ1bmN0aW9uKGUsdCl7XG5yZXR1cm4gWm4odGhpcyxlLHQsITApfSxcInByZXBlbmRMaXN0ZW5lclwiKTtmdW5jdGlvbiBRbygpe2lmKCF0aGlzLmZpcmVkKXJldHVybiB0aGlzLlxudGFyZ2V0LnJlbW92ZUxpc3RlbmVyKHRoaXMudHlwZSx0aGlzLndyYXBGbiksdGhpcy5maXJlZD0hMCxhcmd1bWVudHMubGVuZ3RoPT09MD9cbnRoaXMubGlzdGVuZXIuY2FsbCh0aGlzLnRhcmdldCk6dGhpcy5saXN0ZW5lci5hcHBseSh0aGlzLnRhcmdldCxhcmd1bWVudHMpfWEoUW8sXG5cIm9uY2VXcmFwcGVyXCIpO2Z1bmN0aW9uIEpuKHIsZSx0KXt2YXIgbj17ZmlyZWQ6ITEsd3JhcEZuOnZvaWQgMCx0YXJnZXQ6cix0eXBlOmUsXG5saXN0ZW5lcjp0fSxpPVFvLmJpbmQobik7cmV0dXJuIGkubGlzdGVuZXI9dCxuLndyYXBGbj1pLGl9YShKbixcIl9vbmNlV3JhcFwiKTtMLnByb3RvdHlwZS5cbm9uY2U9YShmdW5jdGlvbihlLHQpe3JldHVybiBhdCh0KSx0aGlzLm9uKGUsSm4odGhpcyxlLHQpKSx0aGlzfSxcIm9uY2VcIik7TC5wcm90b3R5cGUuXG5wcmVwZW5kT25jZUxpc3RlbmVyPWEoZnVuY3Rpb24oZSx0KXtyZXR1cm4gYXQodCksdGhpcy5wcmVwZW5kTGlzdGVuZXIoZSxKbih0aGlzLFxuZSx0KSksdGhpc30sXCJwcmVwZW5kT25jZUxpc3RlbmVyXCIpO0wucHJvdG90eXBlLnJlbW92ZUxpc3RlbmVyPWEoZnVuY3Rpb24oZSx0KXt2YXIgbixcbmkscyxvLHU7aWYoYXQodCksaT10aGlzLl9ldmVudHMsaT09PXZvaWQgMClyZXR1cm4gdGhpcztpZihuPWlbZV0sbj09PXZvaWQgMClyZXR1cm4gdGhpcztcbmlmKG49PT10fHxuLmxpc3RlbmVyPT09dCktLXRoaXMuX2V2ZW50c0NvdW50PT09MD90aGlzLl9ldmVudHM9T2JqZWN0LmNyZWF0ZShudWxsKTpcbihkZWxldGUgaVtlXSxpLnJlbW92ZUxpc3RlbmVyJiZ0aGlzLmVtaXQoXCJyZW1vdmVMaXN0ZW5lclwiLGUsbi5saXN0ZW5lcnx8dCkpO2Vsc2UgaWYodHlwZW9mIG4hPVxuXCJmdW5jdGlvblwiKXtmb3Iocz0tMSxvPW4ubGVuZ3RoLTE7bz49MDtvLS0paWYobltvXT09PXR8fG5bb10ubGlzdGVuZXI9PT10KXt1PW5bb10uXG5saXN0ZW5lcixzPW87YnJlYWt9aWYoczwwKXJldHVybiB0aGlzO3M9PT0wP24uc2hpZnQoKTpXbyhuLHMpLG4ubGVuZ3RoPT09MSYmKGlbZV09XG5uWzBdKSxpLnJlbW92ZUxpc3RlbmVyIT09dm9pZCAwJiZ0aGlzLmVtaXQoXCJyZW1vdmVMaXN0ZW5lclwiLGUsdXx8dCl9cmV0dXJuIHRoaXN9LFxuXCJyZW1vdmVMaXN0ZW5lclwiKTtMLnByb3RvdHlwZS5vZmY9TC5wcm90b3R5cGUucmVtb3ZlTGlzdGVuZXI7TC5wcm90b3R5cGUucmVtb3ZlQWxsTGlzdGVuZXJzPVxuYShmdW5jdGlvbihlKXt2YXIgdCxuLGk7aWYobj10aGlzLl9ldmVudHMsbj09PXZvaWQgMClyZXR1cm4gdGhpcztpZihuLnJlbW92ZUxpc3RlbmVyPT09XG52b2lkIDApcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGg9PT0wPyh0aGlzLl9ldmVudHM9T2JqZWN0LmNyZWF0ZShudWxsKSx0aGlzLl9ldmVudHNDb3VudD1cbjApOm5bZV0hPT12b2lkIDAmJigtLXRoaXMuX2V2ZW50c0NvdW50PT09MD90aGlzLl9ldmVudHM9T2JqZWN0LmNyZWF0ZShudWxsKTpkZWxldGUgbltlXSksXG50aGlzO2lmKGFyZ3VtZW50cy5sZW5ndGg9PT0wKXt2YXIgcz1PYmplY3Qua2V5cyhuKSxvO2ZvcihpPTA7aTxzLmxlbmd0aDsrK2kpbz1zW2ldLFxubyE9PVwicmVtb3ZlTGlzdGVuZXJcIiYmdGhpcy5yZW1vdmVBbGxMaXN0ZW5lcnMobyk7cmV0dXJuIHRoaXMucmVtb3ZlQWxsTGlzdGVuZXJzKFxuXCJyZW1vdmVMaXN0ZW5lclwiKSx0aGlzLl9ldmVudHM9T2JqZWN0LmNyZWF0ZShudWxsKSx0aGlzLl9ldmVudHNDb3VudD0wLHRoaXN9aWYodD1cbm5bZV0sdHlwZW9mIHQ9PVwiZnVuY3Rpb25cIil0aGlzLnJlbW92ZUxpc3RlbmVyKGUsdCk7ZWxzZSBpZih0IT09dm9pZCAwKWZvcihpPXQubGVuZ3RoLVxuMTtpPj0wO2ktLSl0aGlzLnJlbW92ZUxpc3RlbmVyKGUsdFtpXSk7cmV0dXJuIHRoaXN9LFwicmVtb3ZlQWxsTGlzdGVuZXJzXCIpO2Z1bmN0aW9uIFhuKHIsZSx0KXtcbnZhciBuPXIuX2V2ZW50cztpZihuPT09dm9pZCAwKXJldHVybltdO3ZhciBpPW5bZV07cmV0dXJuIGk9PT12b2lkIDA/W106dHlwZW9mIGk9PVxuXCJmdW5jdGlvblwiP3Q/W2kubGlzdGVuZXJ8fGldOltpXTp0P2pvKGkpOnRpKGksaS5sZW5ndGgpfWEoWG4sXCJfbGlzdGVuZXJzXCIpO0wucHJvdG90eXBlLlxubGlzdGVuZXJzPWEoZnVuY3Rpb24oZSl7cmV0dXJuIFhuKHRoaXMsZSwhMCl9LFwibGlzdGVuZXJzXCIpO0wucHJvdG90eXBlLnJhd0xpc3RlbmVycz1cbmEoZnVuY3Rpb24oZSl7cmV0dXJuIFhuKHRoaXMsZSwhMSl9LFwicmF3TGlzdGVuZXJzXCIpO0wubGlzdGVuZXJDb3VudD1mdW5jdGlvbihyLGUpe1xucmV0dXJuIHR5cGVvZiByLmxpc3RlbmVyQ291bnQ9PVwiZnVuY3Rpb25cIj9yLmxpc3RlbmVyQ291bnQoZSk6ZWkuY2FsbChyLGUpfTtMLnByb3RvdHlwZS5cbmxpc3RlbmVyQ291bnQ9ZWk7ZnVuY3Rpb24gZWkocil7dmFyIGU9dGhpcy5fZXZlbnRzO2lmKGUhPT12b2lkIDApe3ZhciB0PWVbcl07aWYodHlwZW9mIHQ9PVxuXCJmdW5jdGlvblwiKXJldHVybiAxO2lmKHQhPT12b2lkIDApcmV0dXJuIHQubGVuZ3RofXJldHVybiAwfWEoZWksXCJsaXN0ZW5lckNvdW50XCIpO1xuTC5wcm90b3R5cGUuZXZlbnROYW1lcz1hKGZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2V2ZW50c0NvdW50PjA/b3QodGhpcy5fZXZlbnRzKTpcbltdfSxcImV2ZW50TmFtZXNcIik7ZnVuY3Rpb24gdGkocixlKXtmb3IodmFyIHQ9bmV3IEFycmF5KGUpLG49MDtuPGU7KytuKXRbbl09cltuXTtcbnJldHVybiB0fWEodGksXCJhcnJheUNsb25lXCIpO2Z1bmN0aW9uIFdvKHIsZSl7Zm9yKDtlKzE8ci5sZW5ndGg7ZSsrKXJbZV09cltlKzFdO3IuXG5wb3AoKX1hKFdvLFwic3BsaWNlT25lXCIpO2Z1bmN0aW9uIGpvKHIpe2Zvcih2YXIgZT1uZXcgQXJyYXkoci5sZW5ndGgpLHQ9MDt0PGUubGVuZ3RoOysrdClcbmVbdF09clt0XS5saXN0ZW5lcnx8clt0XTtyZXR1cm4gZX1hKGpvLFwidW53cmFwTGlzdGVuZXJzXCIpO2Z1bmN0aW9uIEhvKHIsZSl7cmV0dXJuIG5ldyBQcm9taXNlKFxuZnVuY3Rpb24odCxuKXtmdW5jdGlvbiBpKG8pe3IucmVtb3ZlTGlzdGVuZXIoZSxzKSxuKG8pfWEoaSxcImVycm9yTGlzdGVuZXJcIik7ZnVuY3Rpb24gcygpe1xudHlwZW9mIHIucmVtb3ZlTGlzdGVuZXI9PVwiZnVuY3Rpb25cIiYmci5yZW1vdmVMaXN0ZW5lcihcImVycm9yXCIsaSksdChbXS5zbGljZS5jYWxsKFxuYXJndW1lbnRzKSl9YShzLFwicmVzb2x2ZXJcIikscmkocixlLHMse29uY2U6ITB9KSxlIT09XCJlcnJvclwiJiZHbyhyLGkse29uY2U6ITB9KX0pfVxuYShIbyxcIm9uY2VcIik7ZnVuY3Rpb24gR28ocixlLHQpe3R5cGVvZiByLm9uPT1cImZ1bmN0aW9uXCImJnJpKHIsXCJlcnJvclwiLGUsdCl9YShHbyxcblwiYWRkRXJyb3JIYW5kbGVySWZFdmVudEVtaXR0ZXJcIik7ZnVuY3Rpb24gcmkocixlLHQsbil7aWYodHlwZW9mIHIub249PVwiZnVuY3Rpb25cIilcbm4ub25jZT9yLm9uY2UoZSx0KTpyLm9uKGUsdCk7ZWxzZSBpZih0eXBlb2Ygci5hZGRFdmVudExpc3RlbmVyPT1cImZ1bmN0aW9uXCIpci5hZGRFdmVudExpc3RlbmVyKFxuZSxhKGZ1bmN0aW9uIGkocyl7bi5vbmNlJiZyLnJlbW92ZUV2ZW50TGlzdGVuZXIoZSxpKSx0KHMpfSxcIndyYXBMaXN0ZW5lclwiKSk7ZWxzZVxudGhyb3cgbmV3IFR5cGVFcnJvcignVGhlIFwiZW1pdHRlclwiIGFyZ3VtZW50IG11c3QgYmUgb2YgdHlwZSBFdmVudEVtaXR0ZXIuIFJlY2VpdlxcXG5lZCB0eXBlICcrdHlwZW9mIHIpfWEocmksXCJldmVudFRhcmdldEFnbm9zdGljQWRkTGlzdGVuZXJcIil9KTt2YXIgamU9e307aWUoamUse2RlZmF1bHQ6KCk9PiRvfSk7dmFyICRvLEhlPXooKCk9PntcInVzZSBzdHJpY3RcIjtwKCk7JG89e319KTtmdW5jdGlvbiBHZShyKXtsZXQgZT0xNzc5MDMzNzAzLHQ9MzE0NDEzNDI3NyxuPTEwMTM5MDQyNDIsaT0yNzczNDgwNzYyLHM9MTM1OTg5MzExOSxcbm89MjYwMDgyMjkyNCx1PTUyODczNDYzNSxjPTE1NDE0NTkyMjUsaD0wLGw9MCxkPVsxMTE2MzUyNDA4LDE4OTk0NDc0NDEsMzA0OTMyMzQ3MSxcbjM5MjEwMDk1NzMsOTYxOTg3MTYzLDE1MDg5NzA5OTMsMjQ1MzYzNTc0OCwyODcwNzYzMjIxLDM2MjQzODEwODAsMzEwNTk4NDAxLDYwNzIyNTI3OCxcbjE0MjY4ODE5ODcsMTkyNTA3ODM4OCwyMTYyMDc4MjA2LDI2MTQ4ODgxMDMsMzI0ODIyMjU4MCwzODM1MzkwNDAxLDQwMjIyMjQ3NzQsMjY0MzQ3MDc4LFxuNjA0ODA3NjI4LDc3MDI1NTk4MywxMjQ5MTUwMTIyLDE1NTUwODE2OTIsMTk5NjA2NDk4NiwyNTU0MjIwODgyLDI4MjE4MzQzNDksMjk1Mjk5NjgwOCxcbjMyMTAzMTM2NzEsMzMzNjU3MTg5MSwzNTg0NTI4NzExLDExMzkyNjk5MywzMzgyNDE4OTUsNjY2MzA3MjA1LDc3MzUyOTkxMiwxMjk0NzU3MzcyLFxuMTM5NjE4MjI5MSwxNjk1MTgzNzAwLDE5ODY2NjEwNTEsMjE3NzAyNjM1MCwyNDU2OTU2MDM3LDI3MzA0ODU5MjEsMjgyMDMwMjQxMSwzMjU5NzMwODAwLFxuMzM0NTc2NDc3MSwzNTE2MDY1ODE3LDM2MDAzNTI4MDQsNDA5NDU3MTkwOSwyNzU0MjMzNDQsNDMwMjI3NzM0LDUwNjk0ODYxNiw2NTkwNjA1NTYsXG44ODM5OTc4NzcsOTU4MTM5NTcxLDEzMjI4MjIyMTgsMTUzNzAwMjA2MywxNzQ3ODczNzc5LDE5NTU1NjIyMjIsMjAyNDEwNDgxNSwyMjI3NzMwNDUyLFxuMjM2MTg1MjQyNCwyNDI4NDM2NDc0LDI3NTY3MzQxODcsMzIwNDAzMTQ3OSwzMzI5MzI1Mjk4XSxiPWEoKEEsdyk9PkE+Pj53fEE8PDMyLXcsXG5cInJyb3RcIiksQz1uZXcgVWludDMyQXJyYXkoNjQpLEI9bmV3IFVpbnQ4QXJyYXkoNjQpLFc9YSgoKT0+e2ZvcihsZXQgUj0wLEc9MDtSPDE2O1IrKyxcbkcrPTQpQ1tSXT1CW0ddPDwyNHxCW0crMV08PDE2fEJbRysyXTw8OHxCW0crM107Zm9yKGxldCBSPTE2O1I8NjQ7UisrKXtsZXQgRz1iKENbUi1cbjE1XSw3KV5iKENbUi0xNV0sMTgpXkNbUi0xNV0+Pj4zLGhlPWIoQ1tSLTJdLDE3KV5iKENbUi0yXSwxOSleQ1tSLTJdPj4+MTA7Q1tSXT1DW1ItXG4xNl0rRytDW1ItN10raGV8MH1sZXQgQT1lLHc9dCxQPW4sVj1pLGs9cyxqPW8sY2U9dSxlZT1jO2ZvcihsZXQgUj0wO1I8NjQ7UisrKXtsZXQgRz1iKFxuayw2KV5iKGssMTEpXmIoaywyNSksaGU9ayZqXn5rJmNlLHllPWVlK0craGUrZFtSXStDW1JdfDAseGU9YihBLDIpXmIoQSwxMyleYihBLDIyKSxcbm1lPUEmd15BJlBedyZQLHNlPXhlK21lfDA7ZWU9Y2UsY2U9aixqPWssaz1WK3llfDAsVj1QLFA9dyx3PUEsQT15ZStzZXwwfWU9ZStBfDAsXG50PXQrd3wwLG49bitQfDAsaT1pK1Z8MCxzPXMra3wwLG89bytqfDAsdT11K2NlfDAsYz1jK2VlfDAsbD0wfSxcInByb2Nlc3NcIiksWD1hKEE9PntcbnR5cGVvZiBBPT1cInN0cmluZ1wiJiYoQT1uZXcgVGV4dEVuY29kZXIoKS5lbmNvZGUoQSkpO2ZvcihsZXQgdz0wO3c8QS5sZW5ndGg7dysrKUJbbCsrXT1cbkFbd10sbD09PTY0JiZXKCk7aCs9QS5sZW5ndGh9LFwiYWRkXCIpLGRlPWEoKCk9PntpZihCW2wrK109MTI4LGw9PTY0JiZXKCksbCs4PjY0KXtcbmZvcig7bDw2NDspQltsKytdPTA7VygpfWZvcig7bDw1ODspQltsKytdPTA7bGV0IEE9aCo4O0JbbCsrXT1BLzEwOTk1MTE2Mjc3NzYmMjU1LFxuQltsKytdPUEvNDI5NDk2NzI5NiYyNTUsQltsKytdPUE+Pj4yNCxCW2wrK109QT4+PjE2JjI1NSxCW2wrK109QT4+PjgmMjU1LEJbbCsrXT1cbkEmMjU1LFcoKTtsZXQgdz1uZXcgVWludDhBcnJheSgzMik7cmV0dXJuIHdbMF09ZT4+PjI0LHdbMV09ZT4+PjE2JjI1NSx3WzJdPWU+Pj44JlxuMjU1LHdbM109ZSYyNTUsd1s0XT10Pj4+MjQsd1s1XT10Pj4+MTYmMjU1LHdbNl09dD4+PjgmMjU1LHdbN109dCYyNTUsd1s4XT1uPj4+MjQsXG53WzldPW4+Pj4xNiYyNTUsd1sxMF09bj4+PjgmMjU1LHdbMTFdPW4mMjU1LHdbMTJdPWk+Pj4yNCx3WzEzXT1pPj4+MTYmMjU1LHdbMTRdPVxuaT4+PjgmMjU1LHdbMTVdPWkmMjU1LHdbMTZdPXM+Pj4yNCx3WzE3XT1zPj4+MTYmMjU1LHdbMThdPXM+Pj44JjI1NSx3WzE5XT1zJjI1NSxcbndbMjBdPW8+Pj4yNCx3WzIxXT1vPj4+MTYmMjU1LHdbMjJdPW8+Pj44JjI1NSx3WzIzXT1vJjI1NSx3WzI0XT11Pj4+MjQsd1syNV09dT4+PlxuMTYmMjU1LHdbMjZdPXU+Pj44JjI1NSx3WzI3XT11JjI1NSx3WzI4XT1jPj4+MjQsd1syOV09Yz4+PjE2JjI1NSx3WzMwXT1jPj4+OCYyNTUsXG53WzMxXT1jJjI1NSx3fSxcImRpZ2VzdFwiKTtyZXR1cm4gcj09PXZvaWQgMD97YWRkOlgsZGlnZXN0OmRlfTooWChyKSxkZSgpKX12YXIgbmk9eihcbigpPT57XCJ1c2Ugc3RyaWN0XCI7cCgpO2EoR2UsXCJzaGEyNTZcIil9KTt2YXIgTywkZSxpaT16KCgpPT57XCJ1c2Ugc3RyaWN0XCI7cCgpO089Y2xhc3MgT3tjb25zdHJ1Y3Rvcigpe18odGhpcyxcIl9kYXRhTGVuZ3RoXCIsXG4wKTtfKHRoaXMsXCJfYnVmZmVyTGVuZ3RoXCIsMCk7Xyh0aGlzLFwiX3N0YXRlXCIsbmV3IEludDMyQXJyYXkoNCkpO18odGhpcyxcIl9idWZmZXJcIixcbm5ldyBBcnJheUJ1ZmZlcig2OCkpO18odGhpcyxcIl9idWZmZXI4XCIpO18odGhpcyxcIl9idWZmZXIzMlwiKTt0aGlzLl9idWZmZXI4PW5ldyBVaW50OEFycmF5KFxudGhpcy5fYnVmZmVyLDAsNjgpLHRoaXMuX2J1ZmZlcjMyPW5ldyBVaW50MzJBcnJheSh0aGlzLl9idWZmZXIsMCwxNyksdGhpcy5zdGFydCgpfXN0YXRpYyBoYXNoQnl0ZUFycmF5KGUsdD0hMSl7XG5yZXR1cm4gdGhpcy5vbmVQYXNzSGFzaGVyLnN0YXJ0KCkuYXBwZW5kQnl0ZUFycmF5KGUpLmVuZCh0KX1zdGF0aWMgaGFzaFN0cihlLHQ9ITEpe1xucmV0dXJuIHRoaXMub25lUGFzc0hhc2hlci5zdGFydCgpLmFwcGVuZFN0cihlKS5lbmQodCl9c3RhdGljIGhhc2hBc2NpaVN0cihlLHQ9ITEpe1xucmV0dXJuIHRoaXMub25lUGFzc0hhc2hlci5zdGFydCgpLmFwcGVuZEFzY2lpU3RyKGUpLmVuZCh0KX1zdGF0aWMgX2hleChlKXtsZXQgdD1PLlxuaGV4Q2hhcnMsbj1PLmhleE91dCxpLHMsbyx1O2Zvcih1PTA7dTw0O3UrPTEpZm9yKHM9dSo4LGk9ZVt1XSxvPTA7bzw4O28rPTIpbltzKzErXG5vXT10LmNoYXJBdChpJjE1KSxpPj4+PTQsbltzKzArb109dC5jaGFyQXQoaSYxNSksaT4+Pj00O3JldHVybiBuLmpvaW4oXCJcIil9c3RhdGljIF9tZDVjeWNsZShlLHQpe1xubGV0IG49ZVswXSxpPWVbMV0scz1lWzJdLG89ZVszXTtuKz0oaSZzfH5pJm8pK3RbMF0tNjgwODc2OTM2fDAsbj0objw8N3xuPj4+MjUpK2l8XG4wLG8rPShuJml8fm4mcykrdFsxXS0zODk1NjQ1ODZ8MCxvPShvPDwxMnxvPj4+MjApK258MCxzKz0obyZufH5vJmkpK3RbMl0rNjA2MTA1ODE5fFxuMCxzPShzPDwxN3xzPj4+MTUpK298MCxpKz0ocyZvfH5zJm4pK3RbM10tMTA0NDUyNTMzMHwwLGk9KGk8PDIyfGk+Pj4xMCkrc3wwLG4rPShpJlxuc3x+aSZvKSt0WzRdLTE3NjQxODg5N3wwLG49KG48PDd8bj4+PjI1KStpfDAsbys9KG4maXx+biZzKSt0WzVdKzEyMDAwODA0MjZ8MCxvPShvPDxcbjEyfG8+Pj4yMCkrbnwwLHMrPShvJm58fm8maSkrdFs2XS0xNDczMjMxMzQxfDAscz0oczw8MTd8cz4+PjE1KStvfDAsaSs9KHMmb3x+cyZuKStcbnRbN10tNDU3MDU5ODN8MCxpPShpPDwyMnxpPj4+MTApK3N8MCxuKz0oaSZzfH5pJm8pK3RbOF0rMTc3MDAzNTQxNnwwLG49KG48PDd8bj4+PlxuMjUpK2l8MCxvKz0obiZpfH5uJnMpK3RbOV0tMTk1ODQxNDQxN3wwLG89KG88PDEyfG8+Pj4yMCkrbnwwLHMrPShvJm58fm8maSkrdFsxMF0tXG40MjA2M3wwLHM9KHM8PDE3fHM+Pj4xNSkrb3wwLGkrPShzJm98fnMmbikrdFsxMV0tMTk5MDQwNDE2MnwwLGk9KGk8PDIyfGk+Pj4xMCkrc3xcbjAsbis9KGkmc3x+aSZvKSt0WzEyXSsxODA0NjAzNjgyfDAsbj0objw8N3xuPj4+MjUpK2l8MCxvKz0obiZpfH5uJnMpK3RbMTNdLTQwMzQxMTAxfFxuMCxvPShvPDwxMnxvPj4+MjApK258MCxzKz0obyZufH5vJmkpK3RbMTRdLTE1MDIwMDIyOTB8MCxzPShzPDwxN3xzPj4+MTUpK298MCxpKz1cbihzJm98fnMmbikrdFsxNV0rMTIzNjUzNTMyOXwwLGk9KGk8PDIyfGk+Pj4xMCkrc3wwLG4rPShpJm98cyZ+bykrdFsxXS0xNjU3OTY1MTB8XG4wLG49KG48PDV8bj4+PjI3KStpfDAsbys9KG4mc3xpJn5zKSt0WzZdLTEwNjk1MDE2MzJ8MCxvPShvPDw5fG8+Pj4yMykrbnwwLHMrPShvJlxuaXxuJn5pKSt0WzExXSs2NDM3MTc3MTN8MCxzPShzPDwxNHxzPj4+MTgpK298MCxpKz0ocyZufG8mfm4pK3RbMF0tMzczODk3MzAyfDAsaT1cbihpPDwyMHxpPj4+MTIpK3N8MCxuKz0oaSZvfHMmfm8pK3RbNV0tNzAxNTU4NjkxfDAsbj0objw8NXxuPj4+MjcpK2l8MCxvKz0obiZzfGkmXG5+cykrdFsxMF0rMzgwMTYwODN8MCxvPShvPDw5fG8+Pj4yMykrbnwwLHMrPShvJml8biZ+aSkrdFsxNV0tNjYwNDc4MzM1fDAscz0oczw8MTR8XG5zPj4+MTgpK298MCxpKz0ocyZufG8mfm4pK3RbNF0tNDA1NTM3ODQ4fDAsaT0oaTw8MjB8aT4+PjEyKStzfDAsbis9KGkmb3xzJn5vKSt0WzldK1xuNTY4NDQ2NDM4fDAsbj0objw8NXxuPj4+MjcpK2l8MCxvKz0obiZzfGkmfnMpK3RbMTRdLTEwMTk4MDM2OTB8MCxvPShvPDw5fG8+Pj4yMykrXG5ufDAscys9KG8maXxuJn5pKSt0WzNdLTE4NzM2Mzk2MXwwLHM9KHM8PDE0fHM+Pj4xOCkrb3wwLGkrPShzJm58byZ+bikrdFs4XSsxMTYzNTMxNTAxfFxuMCxpPShpPDwyMHxpPj4+MTIpK3N8MCxuKz0oaSZvfHMmfm8pK3RbMTNdLTE0NDQ2ODE0Njd8MCxuPShuPDw1fG4+Pj4yNykraXwwLG8rPShuJlxuc3xpJn5zKSt0WzJdLTUxNDAzNzg0fDAsbz0obzw8OXxvPj4+MjMpK258MCxzKz0obyZpfG4mfmkpK3RbN10rMTczNTMyODQ3M3wwLHM9KHM8PFxuMTR8cz4+PjE4KStvfDAsaSs9KHMmbnxvJn5uKSt0WzEyXS0xOTI2NjA3NzM0fDAsaT0oaTw8MjB8aT4+PjEyKStzfDAsbis9KGlec15vKStcbnRbNV0tMzc4NTU4fDAsbj0objw8NHxuPj4+MjgpK2l8MCxvKz0obl5pXnMpK3RbOF0tMjAyMjU3NDQ2M3wwLG89KG88PDExfG8+Pj4yMSkrXG5ufDAscys9KG9ebl5pKSt0WzExXSsxODM5MDMwNTYyfDAscz0oczw8MTZ8cz4+PjE2KStvfDAsaSs9KHNeb15uKSt0WzE0XS0zNTMwOTU1NnxcbjAsaT0oaTw8MjN8aT4+PjkpK3N8MCxuKz0oaV5zXm8pK3RbMV0tMTUzMDk5MjA2MHwwLG49KG48PDR8bj4+PjI4KStpfDAsbys9KG5eaV5zKStcbnRbNF0rMTI3Mjg5MzM1M3wwLG89KG88PDExfG8+Pj4yMSkrbnwwLHMrPShvXm5eaSkrdFs3XS0xNTU0OTc2MzJ8MCxzPShzPDwxNnxzPj4+XG4xNikrb3wwLGkrPShzXm9ebikrdFsxMF0tMTA5NDczMDY0MHwwLGk9KGk8PDIzfGk+Pj45KStzfDAsbis9KGlec15vKSt0WzEzXSs2ODEyNzkxNzR8XG4wLG49KG48PDR8bj4+PjI4KStpfDAsbys9KG5eaV5zKSt0WzBdLTM1ODUzNzIyMnwwLG89KG88PDExfG8+Pj4yMSkrbnwwLHMrPShvXm5eaSkrXG50WzNdLTcyMjUyMTk3OXwwLHM9KHM8PDE2fHM+Pj4xNikrb3wwLGkrPShzXm9ebikrdFs2XSs3NjAyOTE4OXwwLGk9KGk8PDIzfGk+Pj45KStcbnN8MCxuKz0oaV5zXm8pK3RbOV0tNjQwMzY0NDg3fDAsbj0objw8NHxuPj4+MjgpK2l8MCxvKz0obl5pXnMpK3RbMTJdLTQyMTgxNTgzNXwwLFxubz0obzw8MTF8bz4+PjIxKStufDAscys9KG9ebl5pKSt0WzE1XSs1MzA3NDI1MjB8MCxzPShzPDwxNnxzPj4+MTYpK298MCxpKz0oc15vXm4pK1xudFsyXS05OTUzMzg2NTF8MCxpPShpPDwyM3xpPj4+OSkrc3wwLG4rPShzXihpfH5vKSkrdFswXS0xOTg2MzA4NDR8MCxuPShuPDw2fG4+Pj5cbjI2KStpfDAsbys9KGleKG58fnMpKSt0WzddKzExMjY4OTE0MTV8MCxvPShvPDwxMHxvPj4+MjIpK258MCxzKz0obl4ob3x+aSkpK3RbMTRdLVxuMTQxNjM1NDkwNXwwLHM9KHM8PDE1fHM+Pj4xNykrb3wwLGkrPShvXihzfH5uKSkrdFs1XS01NzQzNDA1NXwwLGk9KGk8PDIxfGk+Pj4xMSkrXG5zfDAsbis9KHNeKGl8fm8pKSt0WzEyXSsxNzAwNDg1NTcxfDAsbj0objw8NnxuPj4+MjYpK2l8MCxvKz0oaV4obnx+cykpK3RbM10tMTg5NDk4NjYwNnxcbjAsbz0obzw8MTB8bz4+PjIyKStufDAscys9KG5eKG98fmkpKSt0WzEwXS0xMDUxNTIzfDAscz0oczw8MTV8cz4+PjE3KStvfDAsaSs9KG9eXG4oc3x+bikpK3RbMV0tMjA1NDkyMjc5OXwwLGk9KGk8PDIxfGk+Pj4xMSkrc3wwLG4rPShzXihpfH5vKSkrdFs4XSsxODczMzEzMzU5fDAsbj1cbihuPDw2fG4+Pj4yNikraXwwLG8rPShpXihufH5zKSkrdFsxNV0tMzA2MTE3NDR8MCxvPShvPDwxMHxvPj4+MjIpK258MCxzKz0obl4ob3x+aSkpK1xudFs2XS0xNTYwMTk4MzgwfDAscz0oczw8MTV8cz4+PjE3KStvfDAsaSs9KG9eKHN8fm4pKSt0WzEzXSsxMzA5MTUxNjQ5fDAsaT0oaTw8MjF8XG5pPj4+MTEpK3N8MCxuKz0oc14oaXx+bykpK3RbNF0tMTQ1NTIzMDcwfDAsbj0objw8NnxuPj4+MjYpK2l8MCxvKz0oaV4obnx+cykpK3RbMTFdLVxuMTEyMDIxMDM3OXwwLG89KG88PDEwfG8+Pj4yMikrbnwwLHMrPShuXihvfH5pKSkrdFsyXSs3MTg3ODcyNTl8MCxzPShzPDwxNXxzPj4+MTcpK1xub3wwLGkrPShvXihzfH5uKSkrdFs5XS0zNDM0ODU1NTF8MCxpPShpPDwyMXxpPj4+MTEpK3N8MCxlWzBdPW4rZVswXXwwLGVbMV09aStlWzFdfFxuMCxlWzJdPXMrZVsyXXwwLGVbM109bytlWzNdfDB9c3RhcnQoKXtyZXR1cm4gdGhpcy5fZGF0YUxlbmd0aD0wLHRoaXMuX2J1ZmZlckxlbmd0aD1cbjAsdGhpcy5fc3RhdGUuc2V0KE8uc3RhdGVJZGVudGl0eSksdGhpc31hcHBlbmRTdHIoZSl7bGV0IHQ9dGhpcy5fYnVmZmVyOCxuPXRoaXMuXG5fYnVmZmVyMzIsaT10aGlzLl9idWZmZXJMZW5ndGgscyxvO2ZvcihvPTA7bzxlLmxlbmd0aDtvKz0xKXtpZihzPWUuY2hhckNvZGVBdChvKSxcbnM8MTI4KXRbaSsrXT1zO2Vsc2UgaWYoczwyMDQ4KXRbaSsrXT0ocz4+PjYpKzE5Mix0W2krK109cyY2M3wxMjg7ZWxzZSBpZihzPDU1Mjk2fHxcbnM+NTYzMTkpdFtpKytdPShzPj4+MTIpKzIyNCx0W2krK109cz4+PjYmNjN8MTI4LHRbaSsrXT1zJjYzfDEyODtlbHNle2lmKHM9KHMtNTUyOTYpKlxuMTAyNCsoZS5jaGFyQ29kZUF0KCsrbyktNTYzMjApKzY1NTM2LHM+MTExNDExMSl0aHJvdyBuZXcgRXJyb3IoXCJVbmljb2RlIHN0YW5kYXJkXFxcbiBzdXBwb3J0cyBjb2RlIHBvaW50cyB1cCB0byBVKzEwRkZGRlwiKTt0W2krK109KHM+Pj4xOCkrMjQwLHRbaSsrXT1zPj4+MTImNjN8MTI4LFxudFtpKytdPXM+Pj42JjYzfDEyOCx0W2krK109cyY2M3wxMjh9aT49NjQmJih0aGlzLl9kYXRhTGVuZ3RoKz02NCxPLl9tZDVjeWNsZSh0aGlzLlxuX3N0YXRlLG4pLGktPTY0LG5bMF09blsxNl0pfXJldHVybiB0aGlzLl9idWZmZXJMZW5ndGg9aSx0aGlzfWFwcGVuZEFzY2lpU3RyKGUpe2xldCB0PXRoaXMuXG5fYnVmZmVyOCxuPXRoaXMuX2J1ZmZlcjMyLGk9dGhpcy5fYnVmZmVyTGVuZ3RoLHMsbz0wO2Zvcig7Oyl7Zm9yKHM9TWF0aC5taW4oZS5sZW5ndGgtXG5vLDY0LWkpO3MtLTspdFtpKytdPWUuY2hhckNvZGVBdChvKyspO2lmKGk8NjQpYnJlYWs7dGhpcy5fZGF0YUxlbmd0aCs9NjQsTy5fbWQ1Y3ljbGUoXG50aGlzLl9zdGF0ZSxuKSxpPTB9cmV0dXJuIHRoaXMuX2J1ZmZlckxlbmd0aD1pLHRoaXN9YXBwZW5kQnl0ZUFycmF5KGUpe2xldCB0PXRoaXMuXG5fYnVmZmVyOCxuPXRoaXMuX2J1ZmZlcjMyLGk9dGhpcy5fYnVmZmVyTGVuZ3RoLHMsbz0wO2Zvcig7Oyl7Zm9yKHM9TWF0aC5taW4oZS5sZW5ndGgtXG5vLDY0LWkpO3MtLTspdFtpKytdPWVbbysrXTtpZihpPDY0KWJyZWFrO3RoaXMuX2RhdGFMZW5ndGgrPTY0LE8uX21kNWN5Y2xlKHRoaXMuX3N0YXRlLFxubiksaT0wfXJldHVybiB0aGlzLl9idWZmZXJMZW5ndGg9aSx0aGlzfWdldFN0YXRlKCl7bGV0IGU9dGhpcy5fc3RhdGU7cmV0dXJue2J1ZmZlcjpTdHJpbmcuXG5mcm9tQ2hhckNvZGUuYXBwbHkobnVsbCxBcnJheS5mcm9tKHRoaXMuX2J1ZmZlcjgpKSxidWZsZW46dGhpcy5fYnVmZmVyTGVuZ3RoLGxlbmd0aDp0aGlzLlxuX2RhdGFMZW5ndGgsc3RhdGU6W2VbMF0sZVsxXSxlWzJdLGVbM11dfX1zZXRTdGF0ZShlKXtsZXQgdD1lLmJ1ZmZlcixuPWUuc3RhdGUsaT10aGlzLlxuX3N0YXRlLHM7Zm9yKHRoaXMuX2RhdGFMZW5ndGg9ZS5sZW5ndGgsdGhpcy5fYnVmZmVyTGVuZ3RoPWUuYnVmbGVuLGlbMF09blswXSxpWzFdPVxublsxXSxpWzJdPW5bMl0saVszXT1uWzNdLHM9MDtzPHQubGVuZ3RoO3MrPTEpdGhpcy5fYnVmZmVyOFtzXT10LmNoYXJDb2RlQXQocyl9ZW5kKGU9ITEpe1xubGV0IHQ9dGhpcy5fYnVmZmVyTGVuZ3RoLG49dGhpcy5fYnVmZmVyOCxpPXRoaXMuX2J1ZmZlcjMyLHM9KHQ+PjIpKzE7dGhpcy5fZGF0YUxlbmd0aCs9XG50O2xldCBvPXRoaXMuX2RhdGFMZW5ndGgqODtpZihuW3RdPTEyOCxuW3QrMV09blt0KzJdPW5bdCszXT0wLGkuc2V0KE8uYnVmZmVyMzJJZGVudGl0eS5cbnN1YmFycmF5KHMpLHMpLHQ+NTUmJihPLl9tZDVjeWNsZSh0aGlzLl9zdGF0ZSxpKSxpLnNldChPLmJ1ZmZlcjMySWRlbnRpdHkpKSxvPD00Mjk0OTY3Mjk1KVxuaVsxNF09bztlbHNle2xldCB1PW8udG9TdHJpbmcoMTYpLm1hdGNoKC8oLio/KSguezAsOH0pJC8pO2lmKHU9PT1udWxsKXJldHVybjtsZXQgYz1wYXJzZUludChcbnVbMl0sMTYpLGg9cGFyc2VJbnQodVsxXSwxNil8fDA7aVsxNF09YyxpWzE1XT1ofXJldHVybiBPLl9tZDVjeWNsZSh0aGlzLl9zdGF0ZSxpKSxcbmU/dGhpcy5fc3RhdGU6Ty5faGV4KHRoaXMuX3N0YXRlKX19O2EoTyxcIk1kNVwiKSxfKE8sXCJzdGF0ZUlkZW50aXR5XCIsbmV3IEludDMyQXJyYXkoXG5bMTczMjU4NDE5MywtMjcxNzMzODc5LC0xNzMyNTg0MTk0LDI3MTczMzg3OF0pKSxfKE8sXCJidWZmZXIzMklkZW50aXR5XCIsbmV3IEludDMyQXJyYXkoXG5bMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMF0pKSxfKE8sXCJoZXhDaGFyc1wiLFwiMDEyMzQ1Njc4OWFiY2RlZlwiKSxfKE8sXCJoZXhPXFxcbnV0XCIsW10pLF8oTyxcIm9uZVBhc3NIYXNoZXJcIixuZXcgTyk7JGU9T30pO3ZhciBxdD17fTtpZShxdCx7Y3JlYXRlSGFzaDooKT0+S28sY3JlYXRlSG1hYzooKT0+em8scmFuZG9tQnl0ZXM6KCk9PlZvfSk7ZnVuY3Rpb24gVm8ocil7XG5yZXR1cm4gZy5nZXRSYW5kb21WYWx1ZXMoeS5hbGxvYyhyKSl9ZnVuY3Rpb24gS28ocil7aWYocj09PVwic2hhMjU2XCIpcmV0dXJue3VwZGF0ZTphKFxuZnVuY3Rpb24oZSl7cmV0dXJue2RpZ2VzdDphKGZ1bmN0aW9uKCl7cmV0dXJuIHkuZnJvbShHZShlKSl9LFwiZGlnZXN0XCIpfX0sXCJ1cGRhdGVcIil9O1xuaWYocj09PVwibWQ1XCIpcmV0dXJue3VwZGF0ZTphKGZ1bmN0aW9uKGUpe3JldHVybntkaWdlc3Q6YShmdW5jdGlvbigpe3JldHVybiB0eXBlb2YgZT09XG5cInN0cmluZ1wiPyRlLmhhc2hTdHIoZSk6JGUuaGFzaEJ5dGVBcnJheShlKX0sXCJkaWdlc3RcIil9fSxcInVwZGF0ZVwiKX07dGhyb3cgbmV3IEVycm9yKFxuYEhhc2ggdHlwZSAnJHtyfScgbm90IHN1cHBvcnRlZGApfWZ1bmN0aW9uIHpvKHIsZSl7aWYociE9PVwic2hhMjU2XCIpdGhyb3cgbmV3IEVycm9yKFxuYE9ubHkgc2hhMjU2IGlzIHN1cHBvcnRlZCAocmVxdWVzdGVkOiAnJHtyfScpYCk7cmV0dXJue3VwZGF0ZTphKGZ1bmN0aW9uKHQpe3JldHVybntcbmRpZ2VzdDphKGZ1bmN0aW9uKCl7dHlwZW9mIGU9PVwic3RyaW5nXCImJihlPW5ldyBUZXh0RW5jb2RlcigpLmVuY29kZShlKSksdHlwZW9mIHQ9PVxuXCJzdHJpbmdcIiYmKHQ9bmV3IFRleHRFbmNvZGVyKCkuZW5jb2RlKHQpKTtsZXQgbj1lLmxlbmd0aDtpZihuPjY0KWU9R2UoZSk7ZWxzZSBpZihuPFxuNjQpe2xldCBjPW5ldyBVaW50OEFycmF5KDY0KTtjLnNldChlKSxlPWN9bGV0IGk9bmV3IFVpbnQ4QXJyYXkoNjQpLHM9bmV3IFVpbnQ4QXJyYXkoXG42NCk7Zm9yKGxldCBjPTA7Yzw2NDtjKyspaVtjXT01NF5lW2NdLHNbY109OTJeZVtjXTtsZXQgbz1uZXcgVWludDhBcnJheSh0Lmxlbmd0aCtcbjY0KTtvLnNldChpLDApLG8uc2V0KHQsNjQpO2xldCB1PW5ldyBVaW50OEFycmF5KDk2KTtyZXR1cm4gdS5zZXQocywwKSx1LnNldChHZShvKSxcbjY0KSx5LmZyb20oR2UodSkpfSxcImRpZ2VzdFwiKX19LFwidXBkYXRlXCIpfX12YXIgUXQ9eigoKT0+e1widXNlIHN0cmljdFwiO3AoKTtuaSgpO2lpKCk7XG5hKFZvLFwicmFuZG9tQnl0ZXNcIik7YShLbyxcImNyZWF0ZUhhc2hcIik7YSh6byxcImNyZWF0ZUhtYWNcIil9KTt2YXIganQ9SShzaT0+e1widXNlIHN0cmljdFwiO3AoKTtzaS5wYXJzZT1mdW5jdGlvbihyLGUpe3JldHVybiBuZXcgV3QocixlKS5wYXJzZSgpfTtcbnZhciB1dD1jbGFzcyB1dHtjb25zdHJ1Y3RvcihlLHQpe3RoaXMuc291cmNlPWUsdGhpcy50cmFuc2Zvcm09dHx8WW8sdGhpcy5wb3NpdGlvbj1cbjAsdGhpcy5lbnRyaWVzPVtdLHRoaXMucmVjb3JkZWQ9W10sdGhpcy5kaW1lbnNpb249MH1pc0VvZigpe3JldHVybiB0aGlzLnBvc2l0aW9uPj1cbnRoaXMuc291cmNlLmxlbmd0aH1uZXh0Q2hhcmFjdGVyKCl7dmFyIGU9dGhpcy5zb3VyY2VbdGhpcy5wb3NpdGlvbisrXTtyZXR1cm4gZT09PVxuXCJcXFxcXCI/e3ZhbHVlOnRoaXMuc291cmNlW3RoaXMucG9zaXRpb24rK10sZXNjYXBlZDohMH06e3ZhbHVlOmUsZXNjYXBlZDohMX19cmVjb3JkKGUpe1xudGhpcy5yZWNvcmRlZC5wdXNoKGUpfW5ld0VudHJ5KGUpe3ZhciB0Oyh0aGlzLnJlY29yZGVkLmxlbmd0aD4wfHxlKSYmKHQ9dGhpcy5yZWNvcmRlZC5cbmpvaW4oXCJcIiksdD09PVwiTlVMTFwiJiYhZSYmKHQ9bnVsbCksdCE9PW51bGwmJih0PXRoaXMudHJhbnNmb3JtKHQpKSx0aGlzLmVudHJpZXMucHVzaChcbnQpLHRoaXMucmVjb3JkZWQ9W10pfWNvbnN1bWVEaW1lbnNpb25zKCl7aWYodGhpcy5zb3VyY2VbMF09PT1cIltcIilmb3IoOyF0aGlzLmlzRW9mKCk7KXtcbnZhciBlPXRoaXMubmV4dENoYXJhY3RlcigpO2lmKGUudmFsdWU9PT1cIj1cIilicmVha319cGFyc2UoZSl7dmFyIHQsbixpO2Zvcih0aGlzLmNvbnN1bWVEaW1lbnNpb25zKCk7IXRoaXMuXG5pc0VvZigpOylpZih0PXRoaXMubmV4dENoYXJhY3RlcigpLHQudmFsdWU9PT1cIntcIiYmIWkpdGhpcy5kaW1lbnNpb24rKyx0aGlzLmRpbWVuc2lvbj5cbjEmJihuPW5ldyB1dCh0aGlzLnNvdXJjZS5zdWJzdHIodGhpcy5wb3NpdGlvbi0xKSx0aGlzLnRyYW5zZm9ybSksdGhpcy5lbnRyaWVzLnB1c2goXG5uLnBhcnNlKCEwKSksdGhpcy5wb3NpdGlvbis9bi5wb3NpdGlvbi0yKTtlbHNlIGlmKHQudmFsdWU9PT1cIn1cIiYmIWkpe2lmKHRoaXMuZGltZW5zaW9uLS0sXG4hdGhpcy5kaW1lbnNpb24mJih0aGlzLm5ld0VudHJ5KCksZSkpcmV0dXJuIHRoaXMuZW50cmllc31lbHNlIHQudmFsdWU9PT0nXCInJiYhdC5cbmVzY2FwZWQ/KGkmJnRoaXMubmV3RW50cnkoITApLGk9IWkpOnQudmFsdWU9PT1cIixcIiYmIWk/dGhpcy5uZXdFbnRyeSgpOnRoaXMucmVjb3JkKFxudC52YWx1ZSk7aWYodGhpcy5kaW1lbnNpb24hPT0wKXRocm93IG5ldyBFcnJvcihcImFycmF5IGRpbWVuc2lvbiBub3QgYmFsYW5jZWRcIik7cmV0dXJuIHRoaXMuXG5lbnRyaWVzfX07YSh1dCxcIkFycmF5UGFyc2VyXCIpO3ZhciBXdD11dDtmdW5jdGlvbiBZbyhyKXtyZXR1cm4gcn1hKFlvLFwiaWRlbnRpdHlcIil9KTt2YXIgSHQ9SSgobWgsb2kpPT57cCgpO3ZhciBabz1qdCgpO29pLmV4cG9ydHM9e2NyZWF0ZTphKGZ1bmN0aW9uKHIsZSl7cmV0dXJue3BhcnNlOmEoXG5mdW5jdGlvbigpe3JldHVybiBaby5wYXJzZShyLGUpfSxcInBhcnNlXCIpfX0sXCJjcmVhdGVcIil9fSk7dmFyIGNpPUkoKGJoLHVpKT0+e1widXNlIHN0cmljdFwiO3AoKTt2YXIgSm89LyhcXGR7MSx9KS0oXFxkezJ9KS0oXFxkezJ9KSAoXFxkezJ9KTooXFxkezJ9KTooXFxkezJ9KShcXC5cXGR7MSx9KT8uKj8oIEJDKT8kLyxcblhvPS9eKFxcZHsxLH0pLShcXGR7Mn0pLShcXGR7Mn0pKCBCQyk/JC8sZWE9LyhbWistXSkoXFxkezJ9KT86PyhcXGR7Mn0pPzo/KFxcZHsyfSk/Lyx0YT0vXi0/aW5maW5pdHkkLztcbnVpLmV4cG9ydHM9YShmdW5jdGlvbihlKXtpZih0YS50ZXN0KGUpKXJldHVybiBOdW1iZXIoZS5yZXBsYWNlKFwiaVwiLFwiSVwiKSk7dmFyIHQ9Sm8uXG5leGVjKGUpO2lmKCF0KXJldHVybiByYShlKXx8bnVsbDt2YXIgbj0hIXRbOF0saT1wYXJzZUludCh0WzFdLDEwKTtuJiYoaT1haShpKSk7dmFyIHM9cGFyc2VJbnQoXG50WzJdLDEwKS0xLG89dFszXSx1PXBhcnNlSW50KHRbNF0sMTApLGM9cGFyc2VJbnQodFs1XSwxMCksaD1wYXJzZUludCh0WzZdLDEwKSxsPXRbN107XG5sPWw/MWUzKnBhcnNlRmxvYXQobCk6MDt2YXIgZCxiPW5hKGUpO3JldHVybiBiIT1udWxsPyhkPW5ldyBEYXRlKERhdGUuVVRDKGkscyxvLFxudSxjLGgsbCkpLEd0KGkpJiZkLnNldFVUQ0Z1bGxZZWFyKGkpLGIhPT0wJiZkLnNldFRpbWUoZC5nZXRUaW1lKCktYikpOihkPW5ldyBEYXRlKFxuaSxzLG8sdSxjLGgsbCksR3QoaSkmJmQuc2V0RnVsbFllYXIoaSkpLGR9LFwicGFyc2VEYXRlXCIpO2Z1bmN0aW9uIHJhKHIpe3ZhciBlPVhvLlxuZXhlYyhyKTtpZihlKXt2YXIgdD1wYXJzZUludChlWzFdLDEwKSxuPSEhZVs0XTtuJiYodD1haSh0KSk7dmFyIGk9cGFyc2VJbnQoZVsyXSxcbjEwKS0xLHM9ZVszXSxvPW5ldyBEYXRlKHQsaSxzKTtyZXR1cm4gR3QodCkmJm8uc2V0RnVsbFllYXIodCksb319YShyYSxcImdldERhdGVcIik7XG5mdW5jdGlvbiBuYShyKXtpZihyLmVuZHNXaXRoKFwiKzAwXCIpKXJldHVybiAwO3ZhciBlPWVhLmV4ZWMoci5zcGxpdChcIiBcIilbMV0pO2lmKGUpe1xudmFyIHQ9ZVsxXTtpZih0PT09XCJaXCIpcmV0dXJuIDA7dmFyIG49dD09PVwiLVwiPy0xOjEsaT1wYXJzZUludChlWzJdLDEwKSozNjAwK3BhcnNlSW50KFxuZVszXXx8MCwxMCkqNjArcGFyc2VJbnQoZVs0XXx8MCwxMCk7cmV0dXJuIGkqbioxZTN9fWEobmEsXCJ0aW1lWm9uZU9mZnNldFwiKTtmdW5jdGlvbiBhaShyKXtcbnJldHVybi0oci0xKX1hKGFpLFwiYmNZZWFyVG9OZWdhdGl2ZVllYXJcIik7ZnVuY3Rpb24gR3Qocil7cmV0dXJuIHI+PTAmJnI8MTAwfWEoR3QsXG5cImlzMFRvOTlcIil9KTt2YXIgbGk9SSgodmgsaGkpPT57cCgpO2hpLmV4cG9ydHM9c2E7dmFyIGlhPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7ZnVuY3Rpb24gc2Eocil7XG5mb3IodmFyIGU9MTtlPGFyZ3VtZW50cy5sZW5ndGg7ZSsrKXt2YXIgdD1hcmd1bWVudHNbZV07Zm9yKHZhciBuIGluIHQpaWEuY2FsbCh0LFxubikmJihyW25dPXRbbl0pfXJldHVybiByfWEoc2EsXCJleHRlbmRcIil9KTt2YXIgZGk9SSgoQWgscGkpPT57XCJ1c2Ugc3RyaWN0XCI7cCgpO3ZhciBvYT1saSgpO3BpLmV4cG9ydHM9RmU7ZnVuY3Rpb24gRmUocil7aWYoISh0aGlzIGluc3RhbmNlb2ZcbkZlKSlyZXR1cm4gbmV3IEZlKHIpO29hKHRoaXMsd2EocikpfWEoRmUsXCJQb3N0Z3Jlc0ludGVydmFsXCIpO3ZhciBhYT1bXCJzZWNvbmRzXCIsXCJcXFxubWludXRlc1wiLFwiaG91cnNcIixcImRheXNcIixcIm1vbnRoc1wiLFwieWVhcnNcIl07RmUucHJvdG90eXBlLnRvUG9zdGdyZXM9ZnVuY3Rpb24oKXt2YXIgcj1hYS5cbmZpbHRlcih0aGlzLmhhc093blByb3BlcnR5LHRoaXMpO3JldHVybiB0aGlzLm1pbGxpc2Vjb25kcyYmci5pbmRleE9mKFwic2Vjb25kc1wiKTxcbjAmJnIucHVzaChcInNlY29uZHNcIiksci5sZW5ndGg9PT0wP1wiMFwiOnIubWFwKGZ1bmN0aW9uKGUpe3ZhciB0PXRoaXNbZV18fDA7cmV0dXJuIGU9PT1cblwic2Vjb25kc1wiJiZ0aGlzLm1pbGxpc2Vjb25kcyYmKHQ9KHQrdGhpcy5taWxsaXNlY29uZHMvMWUzKS50b0ZpeGVkKDYpLnJlcGxhY2UoL1xcLj8wKyQvLFxuXCJcIikpLHQrXCIgXCIrZX0sdGhpcykuam9pbihcIiBcIil9O3ZhciB1YT17eWVhcnM6XCJZXCIsbW9udGhzOlwiTVwiLGRheXM6XCJEXCIsaG91cnM6XCJIXCIsbWludXRlczpcIlxcXG5NXCIsc2Vjb25kczpcIlNcIn0sY2E9W1wieWVhcnNcIixcIm1vbnRoc1wiLFwiZGF5c1wiXSxoYT1bXCJob3Vyc1wiLFwibWludXRlc1wiLFwic2Vjb25kc1wiXTtGZS5cbnByb3RvdHlwZS50b0lTT1N0cmluZz1GZS5wcm90b3R5cGUudG9JU089ZnVuY3Rpb24oKXt2YXIgcj1jYS5tYXAodCx0aGlzKS5qb2luKFwiXCIpLFxuZT1oYS5tYXAodCx0aGlzKS5qb2luKFwiXCIpO3JldHVyblwiUFwiK3IrXCJUXCIrZTtmdW5jdGlvbiB0KG4pe3ZhciBpPXRoaXNbbl18fDA7cmV0dXJuIG49PT1cblwic2Vjb25kc1wiJiZ0aGlzLm1pbGxpc2Vjb25kcyYmKGk9KGkrdGhpcy5taWxsaXNlY29uZHMvMWUzKS50b0ZpeGVkKDYpLnJlcGxhY2UoLzArJC8sXG5cIlwiKSksaSt1YVtuXX19O3ZhciAkdD1cIihbKy1dP1xcXFxkKylcIixsYT0kdCtcIlxcXFxzK3llYXJzP1wiLGZhPSR0K1wiXFxcXHMrbW9ucz9cIixwYT0kdCtcIlxcXG5cXFxccytkYXlzP1wiLGRhPVwiKFsrLV0pPyhbXFxcXGRdKik6KFxcXFxkXFxcXGQpOihcXFxcZFxcXFxkKVxcXFwuPyhcXFxcZHsxLDZ9KT9cIix5YT1uZXcgUmVnRXhwKFtcbmxhLGZhLHBhLGRhXS5tYXAoZnVuY3Rpb24ocil7cmV0dXJuXCIoXCIrcitcIik/XCJ9KS5qb2luKFwiXFxcXHMqXCIpKSxmaT17eWVhcnM6Mixtb250aHM6NCxcbmRheXM6Nixob3Vyczo5LG1pbnV0ZXM6MTAsc2Vjb25kczoxMSxtaWxsaXNlY29uZHM6MTJ9LG1hPVtcImhvdXJzXCIsXCJtaW51dGVzXCIsXCJzZWNcXFxub25kc1wiLFwibWlsbGlzZWNvbmRzXCJdO2Z1bmN0aW9uIGdhKHIpe3ZhciBlPXIrXCIwMDAwMDBcIi5zbGljZShyLmxlbmd0aCk7cmV0dXJuIHBhcnNlSW50KFxuZSwxMCkvMWUzfWEoZ2EsXCJwYXJzZU1pbGxpc2Vjb25kc1wiKTtmdW5jdGlvbiB3YShyKXtpZighcilyZXR1cm57fTt2YXIgZT15YS5leGVjKFxuciksdD1lWzhdPT09XCItXCI7cmV0dXJuIE9iamVjdC5rZXlzKGZpKS5yZWR1Y2UoZnVuY3Rpb24obixpKXt2YXIgcz1maVtpXSxvPWVbc107cmV0dXJuIW98fFxuKG89aT09PVwibWlsbGlzZWNvbmRzXCI/Z2Eobyk6cGFyc2VJbnQobywxMCksIW8pfHwodCYmfm1hLmluZGV4T2YoaSkmJihvKj0tMSksbltpXT1cbm8pLG59LHt9KX1hKHdhLFwicGFyc2VcIil9KTt2YXIgbWk9SSgoSWgseWkpPT57XCJ1c2Ugc3RyaWN0XCI7cCgpO3lpLmV4cG9ydHM9YShmdW5jdGlvbihlKXtpZigvXlxcXFx4Ly50ZXN0KGUpKXJldHVybiBuZXcgeShcbmUuc3Vic3RyKDIpLFwiaGV4XCIpO2Zvcih2YXIgdD1cIlwiLG49MDtuPGUubGVuZ3RoOylpZihlW25dIT09XCJcXFxcXCIpdCs9ZVtuXSwrK247ZWxzZSBpZigvWzAtN117M30vLlxudGVzdChlLnN1YnN0cihuKzEsMykpKXQrPVN0cmluZy5mcm9tQ2hhckNvZGUocGFyc2VJbnQoZS5zdWJzdHIobisxLDMpLDgpKSxuKz00O2Vsc2V7XG5mb3IodmFyIGk9MTtuK2k8ZS5sZW5ndGgmJmVbbitpXT09PVwiXFxcXFwiOylpKys7Zm9yKHZhciBzPTA7czxNYXRoLmZsb29yKGkvMik7KytzKXQrPVxuXCJcXFxcXCI7bis9TWF0aC5mbG9vcihpLzIpKjJ9cmV0dXJuIG5ldyB5KHQsXCJiaW5hcnlcIil9LFwicGFyc2VCeXRlYVwiKX0pO3ZhciBFaT1JKChMaCx2aSk9PntwKCk7dmFyIFZlPWp0KCksS2U9SHQoKSxjdD1jaSgpLHdpPWRpKCksYmk9bWkoKTtmdW5jdGlvbiBodChyKXtcbnJldHVybiBhKGZ1bmN0aW9uKHQpe3JldHVybiB0PT09bnVsbD90OnIodCl9LFwibnVsbEFsbG93ZWRcIil9YShodCxcImFsbG93TnVsbFwiKTtmdW5jdGlvbiBTaShyKXtcbnJldHVybiByPT09bnVsbD9yOnI9PT1cIlRSVUVcInx8cj09PVwidFwifHxyPT09XCJ0cnVlXCJ8fHI9PT1cInlcInx8cj09PVwieWVzXCJ8fHI9PT1cIm9uXCJ8fFxucj09PVwiMVwifWEoU2ksXCJwYXJzZUJvb2xcIik7ZnVuY3Rpb24gYmEocil7cmV0dXJuIHI/VmUucGFyc2UocixTaSk6bnVsbH1hKGJhLFwicGFyc1xcXG5lQm9vbEFycmF5XCIpO2Z1bmN0aW9uIFNhKHIpe3JldHVybiBwYXJzZUludChyLDEwKX1hKFNhLFwicGFyc2VCYXNlVGVuSW50XCIpO2Z1bmN0aW9uIFZ0KHIpe1xucmV0dXJuIHI/VmUucGFyc2UocixodChTYSkpOm51bGx9YShWdCxcInBhcnNlSW50ZWdlckFycmF5XCIpO2Z1bmN0aW9uIHhhKHIpe3JldHVybiByP1xuVmUucGFyc2UocixodChmdW5jdGlvbihlKXtyZXR1cm4geGkoZSkudHJpbSgpfSkpOm51bGx9YSh4YSxcInBhcnNlQmlnSW50ZWdlckFycmF5XCIpO1xudmFyIHZhPWEoZnVuY3Rpb24ocil7aWYoIXIpcmV0dXJuIG51bGw7dmFyIGU9S2UuY3JlYXRlKHIsZnVuY3Rpb24odCl7cmV0dXJuIHQhPT1cbm51bGwmJih0PVp0KHQpKSx0fSk7cmV0dXJuIGUucGFyc2UoKX0sXCJwYXJzZVBvaW50QXJyYXlcIiksS3Q9YShmdW5jdGlvbihyKXtpZighcilcbnJldHVybiBudWxsO3ZhciBlPUtlLmNyZWF0ZShyLGZ1bmN0aW9uKHQpe3JldHVybiB0IT09bnVsbCYmKHQ9cGFyc2VGbG9hdCh0KSksdH0pO1xucmV0dXJuIGUucGFyc2UoKX0sXCJwYXJzZUZsb2F0QXJyYXlcIikscmU9YShmdW5jdGlvbihyKXtpZighcilyZXR1cm4gbnVsbDt2YXIgZT1LZS5cbmNyZWF0ZShyKTtyZXR1cm4gZS5wYXJzZSgpfSxcInBhcnNlU3RyaW5nQXJyYXlcIiksenQ9YShmdW5jdGlvbihyKXtpZighcilyZXR1cm4gbnVsbDtcbnZhciBlPUtlLmNyZWF0ZShyLGZ1bmN0aW9uKHQpe3JldHVybiB0IT09bnVsbCYmKHQ9Y3QodCkpLHR9KTtyZXR1cm4gZS5wYXJzZSgpfSxcIlxcXG5wYXJzZURhdGVBcnJheVwiKSxFYT1hKGZ1bmN0aW9uKHIpe2lmKCFyKXJldHVybiBudWxsO3ZhciBlPUtlLmNyZWF0ZShyLGZ1bmN0aW9uKHQpe1xucmV0dXJuIHQhPT1udWxsJiYodD13aSh0KSksdH0pO3JldHVybiBlLnBhcnNlKCl9LFwicGFyc2VJbnRlcnZhbEFycmF5XCIpLF9hPWEoZnVuY3Rpb24ocil7XG5yZXR1cm4gcj9WZS5wYXJzZShyLGh0KGJpKSk6bnVsbH0sXCJwYXJzZUJ5dGVBQXJyYXlcIiksWXQ9YShmdW5jdGlvbihyKXtyZXR1cm4gcGFyc2VJbnQoXG5yLDEwKX0sXCJwYXJzZUludGVnZXJcIikseGk9YShmdW5jdGlvbihyKXt2YXIgZT1TdHJpbmcocik7cmV0dXJuL15cXGQrJC8udGVzdChlKT9lOlxucn0sXCJwYXJzZUJpZ0ludGVnZXJcIiksZ2k9YShmdW5jdGlvbihyKXtyZXR1cm4gcj9WZS5wYXJzZShyLGh0KEpTT04ucGFyc2UpKTpudWxsfSxcblwicGFyc2VKc29uQXJyYXlcIiksWnQ9YShmdW5jdGlvbihyKXtyZXR1cm4gclswXSE9PVwiKFwiP251bGw6KHI9ci5zdWJzdHJpbmcoMSxyLmxlbmd0aC1cbjEpLnNwbGl0KFwiLFwiKSx7eDpwYXJzZUZsb2F0KHJbMF0pLHk6cGFyc2VGbG9hdChyWzFdKX0pfSxcInBhcnNlUG9pbnRcIiksQWE9YShmdW5jdGlvbihyKXtcbmlmKHJbMF0hPT1cIjxcIiYmclsxXSE9PVwiKFwiKXJldHVybiBudWxsO2Zvcih2YXIgZT1cIihcIix0PVwiXCIsbj0hMSxpPTI7aTxyLmxlbmd0aC0xO2krKyl7XG5pZihufHwoZSs9cltpXSkscltpXT09PVwiKVwiKXtuPSEwO2NvbnRpbnVlfWVsc2UgaWYoIW4pY29udGludWU7cltpXSE9PVwiLFwiJiYodCs9cltpXSl9XG52YXIgcz1adChlKTtyZXR1cm4gcy5yYWRpdXM9cGFyc2VGbG9hdCh0KSxzfSxcInBhcnNlQ2lyY2xlXCIpLENhPWEoZnVuY3Rpb24ocil7cigyMCxcbnhpKSxyKDIxLFl0KSxyKDIzLFl0KSxyKDI2LFl0KSxyKDcwMCxwYXJzZUZsb2F0KSxyKDcwMSxwYXJzZUZsb2F0KSxyKDE2LFNpKSxyKDEwODIsXG5jdCkscigxMTE0LGN0KSxyKDExODQsY3QpLHIoNjAwLFp0KSxyKDY1MSxyZSkscig3MTgsQWEpLHIoMWUzLGJhKSxyKDEwMDEsX2EpLHIoMTAwNSxcblZ0KSxyKDEwMDcsVnQpLHIoMTAyOCxWdCkscigxMDE2LHhhKSxyKDEwMTcsdmEpLHIoMTAyMSxLdCkscigxMDIyLEt0KSxyKDEyMzEsS3QpLFxucigxMDE0LHJlKSxyKDEwMTUscmUpLHIoMTAwOCxyZSkscigxMDA5LHJlKSxyKDEwNDAscmUpLHIoMTA0MSxyZSkscigxMTE1LHp0KSxyKDExODIsXG56dCkscigxMTg1LHp0KSxyKDExODYsd2kpLHIoMTE4NyxFYSkscigxNyxiaSkscigxMTQsSlNPTi5wYXJzZS5iaW5kKEpTT04pKSxyKDM4MDIsXG5KU09OLnBhcnNlLmJpbmQoSlNPTikpLHIoMTk5LGdpKSxyKDM4MDcsZ2kpLHIoMzkwNyxyZSkscigyOTUxLHJlKSxyKDc5MSxyZSkscigxMTgzLFxucmUpLHIoMTI3MCxyZSl9LFwiaW5pdFwiKTt2aS5leHBvcnRzPXtpbml0OkNhfX0pO3ZhciBBaT1JKChNaCxfaSk9PntcInVzZSBzdHJpY3RcIjtwKCk7dmFyIFo9MWU2O2Z1bmN0aW9uIFRhKHIpe3ZhciBlPXIucmVhZEludDMyQkUoXG4wKSx0PXIucmVhZFVJbnQzMkJFKDQpLG49XCJcIjtlPDAmJihlPX5lKyh0PT09MCksdD1+dCsxPj4+MCxuPVwiLVwiKTt2YXIgaT1cIlwiLHMsbyx1LFxuYyxoLGw7e2lmKHM9ZSVaLGU9ZS9aPj4+MCxvPTQyOTQ5NjcyOTYqcyt0LHQ9by9aPj4+MCx1PVwiXCIrKG8tWip0KSx0PT09MCYmZT09PTApcmV0dXJuIG4rXG51K2k7Zm9yKGM9XCJcIixoPTYtdS5sZW5ndGgsbD0wO2w8aDtsKyspYys9XCIwXCI7aT1jK3UraX17aWYocz1lJVosZT1lL1o+Pj4wLG89NDI5NDk2NzI5NipcbnMrdCx0PW8vWj4+PjAsdT1cIlwiKyhvLVoqdCksdD09PTAmJmU9PT0wKXJldHVybiBuK3UraTtmb3IoYz1cIlwiLGg9Ni11Lmxlbmd0aCxsPTA7bDxcbmg7bCsrKWMrPVwiMFwiO2k9Yyt1K2l9e2lmKHM9ZSVaLGU9ZS9aPj4+MCxvPTQyOTQ5NjcyOTYqcyt0LHQ9by9aPj4+MCx1PVwiXCIrKG8tWip0KSxcbnQ9PT0wJiZlPT09MClyZXR1cm4gbit1K2k7Zm9yKGM9XCJcIixoPTYtdS5sZW5ndGgsbD0wO2w8aDtsKyspYys9XCIwXCI7aT1jK3UraX1yZXR1cm4gcz1cbmUlWixvPTQyOTQ5NjcyOTYqcyt0LHU9XCJcIitvJVosbit1K2l9YShUYSxcInJlYWRJbnQ4XCIpO19pLmV4cG9ydHM9VGF9KTt2YXIgQmk9SSgoVWgsUGkpPT57cCgpO3ZhciBJYT1BaSgpLEY9YShmdW5jdGlvbihyLGUsdCxuLGkpe3Q9dHx8MCxuPW58fCExLGk9aXx8ZnVuY3Rpb24oQyxCLFcpe1xucmV0dXJuIEMqTWF0aC5wb3coMixXKStCfTt2YXIgcz10Pj4zLG89YShmdW5jdGlvbihDKXtyZXR1cm4gbj9+QyYyNTU6Q30sXCJpbnZcIiksdT0yNTUsXG5jPTgtdCU4O2U8YyYmKHU9MjU1PDw4LWUmMjU1LGM9ZSksdCYmKHU9dT4+dCU4KTt2YXIgaD0wO3QlOCtlPj04JiYoaD1pKDAsbyhyW3NdKSZcbnUsYykpO2Zvcih2YXIgbD1lK3Q+PjMsZD1zKzE7ZDxsO2QrKyloPWkoaCxvKHJbZF0pLDgpO3ZhciBiPShlK3QpJTg7cmV0dXJuIGI+MCYmXG4oaD1pKGgsbyhyW2xdKT4+OC1iLGIpKSxofSxcInBhcnNlQml0c1wiKSxJaT1hKGZ1bmN0aW9uKHIsZSx0KXt2YXIgbj1NYXRoLnBvdygyLHQtXG4xKS0xLGk9RihyLDEpLHM9RihyLHQsMSk7aWYocz09PTApcmV0dXJuIDA7dmFyIG89MSx1PWEoZnVuY3Rpb24oaCxsLGQpe2g9PT0wJiYoaD1cbjEpO2Zvcih2YXIgYj0xO2I8PWQ7YisrKW8vPTIsKGwmMTw8ZC1iKT4wJiYoaCs9byk7cmV0dXJuIGh9LFwicGFyc2VQcmVjaXNpb25CaXRzXCIpLFxuYz1GKHIsZSx0KzEsITEsdSk7cmV0dXJuIHM9PU1hdGgucG93KDIsdCsxKS0xP2M9PT0wP2k9PT0wPzEvMDotMS8wOk5hTjooaT09PTA/MTpcbi0xKSpNYXRoLnBvdygyLHMtbikqY30sXCJwYXJzZUZsb2F0RnJvbUJpdHNcIiksUGE9YShmdW5jdGlvbihyKXtyZXR1cm4gRihyLDEpPT0xPy0xKlxuKEYociwxNSwxLCEwKSsxKTpGKHIsMTUsMSl9LFwicGFyc2VJbnQxNlwiKSxDaT1hKGZ1bmN0aW9uKHIpe3JldHVybiBGKHIsMSk9PTE/LTEqKEYoXG5yLDMxLDEsITApKzEpOkYociwzMSwxKX0sXCJwYXJzZUludDMyXCIpLEJhPWEoZnVuY3Rpb24ocil7cmV0dXJuIElpKHIsMjMsOCl9LFwicGFyc1xcXG5lRmxvYXQzMlwiKSxMYT1hKGZ1bmN0aW9uKHIpe3JldHVybiBJaShyLDUyLDExKX0sXCJwYXJzZUZsb2F0NjRcIiksUmE9YShmdW5jdGlvbihyKXtcbnZhciBlPUYociwxNiwzMik7aWYoZT09NDkxNTIpcmV0dXJuIE5hTjtmb3IodmFyIHQ9TWF0aC5wb3coMWU0LEYociwxNiwxNikpLG49MCxpPVtdLFxucz1GKHIsMTYpLG89MDtvPHM7bysrKW4rPUYociwxNiw2NCsxNipvKSp0LHQvPTFlNDt2YXIgdT1NYXRoLnBvdygxMCxGKHIsMTYsNDgpKTtcbnJldHVybihlPT09MD8xOi0xKSpNYXRoLnJvdW5kKG4qdSkvdX0sXCJwYXJzZU51bWVyaWNcIiksVGk9YShmdW5jdGlvbihyLGUpe3ZhciB0PUYoXG5lLDEpLG49RihlLDYzLDEpLGk9bmV3IERhdGUoKHQ9PT0wPzE6LTEpKm4vMWUzKzk0NjY4NDhlNSk7cmV0dXJuIHJ8fGkuc2V0VGltZShpLlxuZ2V0VGltZSgpK2kuZ2V0VGltZXpvbmVPZmZzZXQoKSo2ZTQpLGkudXNlYz1uJTFlMyxpLmdldE1pY3JvU2Vjb25kcz1mdW5jdGlvbigpe3JldHVybiB0aGlzLlxudXNlY30saS5zZXRNaWNyb1NlY29uZHM9ZnVuY3Rpb24ocyl7dGhpcy51c2VjPXN9LGkuZ2V0VVRDTWljcm9TZWNvbmRzPWZ1bmN0aW9uKCl7XG5yZXR1cm4gdGhpcy51c2VjfSxpfSxcInBhcnNlRGF0ZVwiKSx6ZT1hKGZ1bmN0aW9uKHIpe2Zvcih2YXIgZT1GKHIsMzIpLHQ9RihyLDMyLDMyKSxcbm49RihyLDMyLDY0KSxpPTk2LHM9W10sbz0wO288ZTtvKyspc1tvXT1GKHIsMzIsaSksaSs9MzIsaSs9MzI7dmFyIHU9YShmdW5jdGlvbihoKXtcbnZhciBsPUYociwzMixpKTtpZihpKz0zMixsPT00Mjk0OTY3Mjk1KXJldHVybiBudWxsO3ZhciBkO2lmKGg9PTIzfHxoPT0yMClyZXR1cm4gZD1cbkYocixsKjgsaSksaSs9bCo4LGQ7aWYoaD09MjUpcmV0dXJuIGQ9ci50b1N0cmluZyh0aGlzLmVuY29kaW5nLGk+PjMsKGkrPWw8PDMpPj4zKSxcbmQ7Y29uc29sZS5sb2coXCJFUlJPUjogRWxlbWVudFR5cGUgbm90IGltcGxlbWVudGVkOiBcIitoKX0sXCJwYXJzZUVsZW1lbnRcIiksYz1hKGZ1bmN0aW9uKGgsbCl7XG52YXIgZD1bXSxiO2lmKGgubGVuZ3RoPjEpe3ZhciBDPWguc2hpZnQoKTtmb3IoYj0wO2I8QztiKyspZFtiXT1jKGgsbCk7aC51bnNoaWZ0KFxuQyl9ZWxzZSBmb3IoYj0wO2I8aFswXTtiKyspZFtiXT11KGwpO3JldHVybiBkfSxcInBhcnNlXCIpO3JldHVybiBjKHMsbil9LFwicGFyc2VBcnJcXFxuYXlcIiksRmE9YShmdW5jdGlvbihyKXtyZXR1cm4gci50b1N0cmluZyhcInV0ZjhcIil9LFwicGFyc2VUZXh0XCIpLE1hPWEoZnVuY3Rpb24ocil7cmV0dXJuIHI9PT1cbm51bGw/bnVsbDpGKHIsOCk+MH0sXCJwYXJzZUJvb2xcIiksRGE9YShmdW5jdGlvbihyKXtyKDIwLElhKSxyKDIxLFBhKSxyKDIzLENpKSxyKDI2LFxuQ2kpLHIoMTcwMCxSYSkscig3MDAsQmEpLHIoNzAxLExhKSxyKDE2LE1hKSxyKDExMTQsVGkuYmluZChudWxsLCExKSkscigxMTg0LFRpLmJpbmQoXG5udWxsLCEwKSkscigxZTMsemUpLHIoMTAwNyx6ZSkscigxMDE2LHplKSxyKDEwMDgsemUpLHIoMTAwOSx6ZSkscigyNSxGYSl9LFwiaW5pdFwiKTtcblBpLmV4cG9ydHM9e2luaXQ6RGF9fSk7dmFyIFJpPUkoKHFoLExpKT0+e3AoKTtMaS5leHBvcnRzPXtCT09MOjE2LEJZVEVBOjE3LENIQVI6MTgsSU5UODoyMCxJTlQyOjIxLElOVDQ6MjMsXG5SRUdQUk9DOjI0LFRFWFQ6MjUsT0lEOjI2LFRJRDoyNyxYSUQ6MjgsQ0lEOjI5LEpTT046MTE0LFhNTDoxNDIsUEdfTk9ERV9UUkVFOjE5NCxcblNNR1I6MjEwLFBBVEg6NjAyLFBPTFlHT046NjA0LENJRFI6NjUwLEZMT0FUNDo3MDAsRkxPQVQ4OjcwMSxBQlNUSU1FOjcwMixSRUxUSU1FOjcwMyxcblRJTlRFUlZBTDo3MDQsQ0lSQ0xFOjcxOCxNQUNBRERSODo3NzQsTU9ORVk6NzkwLE1BQ0FERFI6ODI5LElORVQ6ODY5LEFDTElURU06MTAzMyxcbkJQQ0hBUjoxMDQyLFZBUkNIQVI6MTA0MyxEQVRFOjEwODIsVElNRToxMDgzLFRJTUVTVEFNUDoxMTE0LFRJTUVTVEFNUFRaOjExODQsSU5URVJWQUw6MTE4NixcblRJTUVUWjoxMjY2LEJJVDoxNTYwLFZBUkJJVDoxNTYyLE5VTUVSSUM6MTcwMCxSRUZDVVJTT1I6MTc5MCxSRUdQUk9DRURVUkU6MjIwMixSRUdPUEVSOjIyMDMsXG5SRUdPUEVSQVRPUjoyMjA0LFJFR0NMQVNTOjIyMDUsUkVHVFlQRToyMjA2LFVVSUQ6Mjk1MCxUWElEX1NOQVBTSE9UOjI5NzAsUEdfTFNOOjMyMjAsXG5QR19ORElTVElOQ1Q6MzM2MSxQR19ERVBFTkRFTkNJRVM6MzQwMixUU1ZFQ1RPUjozNjE0LFRTUVVFUlk6MzYxNSxHVFNWRUNUT1I6MzY0MixcblJFR0NPTkZJRzozNzM0LFJFR0RJQ1RJT05BUlk6Mzc2OSxKU09OQjozODAyLFJFR05BTUVTUEFDRTo0MDg5LFJFR1JPTEU6NDA5Nn19KTt2YXIgSmU9SShaZT0+e3AoKTt2YXIga2E9RWkoKSxVYT1CaSgpLE9hPUh0KCksTmE9UmkoKTtaZS5nZXRUeXBlUGFyc2VyPXFhO1plLnNldFR5cGVQYXJzZXI9XG5RYTtaZS5hcnJheVBhcnNlcj1PYTtaZS5idWlsdGlucz1OYTt2YXIgWWU9e3RleHQ6e30sYmluYXJ5Ont9fTtmdW5jdGlvbiBGaShyKXtyZXR1cm4gU3RyaW5nKFxucil9YShGaSxcIm5vUGFyc2VcIik7ZnVuY3Rpb24gcWEocixlKXtyZXR1cm4gZT1lfHxcInRleHRcIixZZVtlXSYmWWVbZV1bcl18fEZpfWEocWEsXG5cImdldFR5cGVQYXJzZXJcIik7ZnVuY3Rpb24gUWEocixlLHQpe3R5cGVvZiBlPT1cImZ1bmN0aW9uXCImJih0PWUsZT1cInRleHRcIiksWWVbZV1bcl09XG50fWEoUWEsXCJzZXRUeXBlUGFyc2VyXCIpO2thLmluaXQoZnVuY3Rpb24ocixlKXtZZS50ZXh0W3JdPWV9KTtVYS5pbml0KGZ1bmN0aW9uKHIsZSl7XG5ZZS5iaW5hcnlbcl09ZX0pfSk7dmFyIFhlPUkoKEdoLEp0KT0+e1widXNlIHN0cmljdFwiO3AoKTtKdC5leHBvcnRzPXtob3N0OlwibG9jYWxob3N0XCIsdXNlcjptLnBsYXRmb3JtPT09XG5cIndpbjMyXCI/bS5lbnYuVVNFUk5BTUU6bS5lbnYuVVNFUixkYXRhYmFzZTp2b2lkIDAscGFzc3dvcmQ6bnVsbCxjb25uZWN0aW9uU3RyaW5nOnZvaWQgMCxcbnBvcnQ6NTQzMixyb3dzOjAsYmluYXJ5OiExLG1heDoxMCxpZGxlVGltZW91dE1pbGxpczozZTQsY2xpZW50X2VuY29kaW5nOlwiXCIsc3NsOiExLFxuYXBwbGljYXRpb25fbmFtZTp2b2lkIDAsZmFsbGJhY2tfYXBwbGljYXRpb25fbmFtZTp2b2lkIDAsb3B0aW9uczp2b2lkIDAscGFyc2VJbnB1dERhdGVzQXNVVEM6ITEsXG5zdGF0ZW1lbnRfdGltZW91dDohMSxsb2NrX3RpbWVvdXQ6ITEsaWRsZV9pbl90cmFuc2FjdGlvbl9zZXNzaW9uX3RpbWVvdXQ6ITEscXVlcnlfdGltZW91dDohMSxcbmNvbm5lY3RfdGltZW91dDowLGtlZXBhbGl2ZXM6MSxrZWVwYWxpdmVzX2lkbGU6MH07dmFyIE1lPUplKCksV2E9TWUuZ2V0VHlwZVBhcnNlcihcbjIwLFwidGV4dFwiKSxqYT1NZS5nZXRUeXBlUGFyc2VyKDEwMTYsXCJ0ZXh0XCIpO0p0LmV4cG9ydHMuX19kZWZpbmVTZXR0ZXJfXyhcInBhcnNlSW5cXFxudDhcIixmdW5jdGlvbihyKXtNZS5zZXRUeXBlUGFyc2VyKDIwLFwidGV4dFwiLHI/TWUuZ2V0VHlwZVBhcnNlcigyMyxcInRleHRcIik6V2EpLE1lLlxuc2V0VHlwZVBhcnNlcigxMDE2LFwidGV4dFwiLHI/TWUuZ2V0VHlwZVBhcnNlcigxMDA3LFwidGV4dFwiKTpqYSl9KX0pO3ZhciBldD1JKChWaCxEaSk9PntcInVzZSBzdHJpY3RcIjtwKCk7dmFyIEhhPShRdCgpLE4ocXQpKSxHYT1YZSgpO2Z1bmN0aW9uICRhKHIpe3ZhciBlPXIuXG5yZXBsYWNlKC9cXFxcL2csXCJcXFxcXFxcXFwiKS5yZXBsYWNlKC9cIi9nLCdcXFxcXCInKTtyZXR1cm4nXCInK2UrJ1wiJ31hKCRhLFwiZXNjYXBlRWxlbWVudFwiKTtcbmZ1bmN0aW9uIE1pKHIpe2Zvcih2YXIgZT1cIntcIix0PTA7dDxyLmxlbmd0aDt0KyspdD4wJiYoZT1lK1wiLFwiKSxyW3RdPT09bnVsbHx8dHlwZW9mIHJbdF0+XG5cInVcIj9lPWUrXCJOVUxMXCI6QXJyYXkuaXNBcnJheShyW3RdKT9lPWUrTWkoclt0XSk6clt0XWluc3RhbmNlb2YgeT9lKz1cIlxcXFxcXFxceFwiK3JbdF0uXG50b1N0cmluZyhcImhleFwiKTplKz0kYShsdChyW3RdKSk7cmV0dXJuIGU9ZStcIn1cIixlfWEoTWksXCJhcnJheVN0cmluZ1wiKTt2YXIgbHQ9YShmdW5jdGlvbihyLGUpe1xuaWYocj09bnVsbClyZXR1cm4gbnVsbDtpZihyIGluc3RhbmNlb2YgeSlyZXR1cm4gcjtpZihBcnJheUJ1ZmZlci5pc1ZpZXcocikpe3ZhciB0PXkuXG5mcm9tKHIuYnVmZmVyLHIuYnl0ZU9mZnNldCxyLmJ5dGVMZW5ndGgpO3JldHVybiB0Lmxlbmd0aD09PXIuYnl0ZUxlbmd0aD90OnQuc2xpY2UoXG5yLmJ5dGVPZmZzZXQsci5ieXRlT2Zmc2V0K3IuYnl0ZUxlbmd0aCl9cmV0dXJuIHIgaW5zdGFuY2VvZiBEYXRlP0dhLnBhcnNlSW5wdXREYXRlc0FzVVRDP1xuemEocik6S2Eocik6QXJyYXkuaXNBcnJheShyKT9NaShyKTp0eXBlb2Ygcj09XCJvYmplY3RcIj9WYShyLGUpOnIudG9TdHJpbmcoKX0sXCJwcmVcXFxucGFyZVZhbHVlXCIpO2Z1bmN0aW9uIFZhKHIsZSl7aWYociYmdHlwZW9mIHIudG9Qb3N0Z3Jlcz09XCJmdW5jdGlvblwiKXtpZihlPWV8fFtdLGUuXG5pbmRleE9mKHIpIT09LTEpdGhyb3cgbmV3IEVycm9yKCdjaXJjdWxhciByZWZlcmVuY2UgZGV0ZWN0ZWQgd2hpbGUgcHJlcGFyaW5nIFwiJytcbnIrJ1wiIGZvciBxdWVyeScpO3JldHVybiBlLnB1c2gociksbHQoci50b1Bvc3RncmVzKGx0KSxlKX1yZXR1cm4gSlNPTi5zdHJpbmdpZnkocil9XG5hKFZhLFwicHJlcGFyZU9iamVjdFwiKTtmdW5jdGlvbiBIKHIsZSl7Zm9yKHI9XCJcIityO3IubGVuZ3RoPGU7KXI9XCIwXCIrcjtyZXR1cm4gcn1hKFxuSCxcInBhZFwiKTtmdW5jdGlvbiBLYShyKXt2YXIgZT0tci5nZXRUaW1lem9uZU9mZnNldCgpLHQ9ci5nZXRGdWxsWWVhcigpLG49dDwxO24mJlxuKHQ9TWF0aC5hYnModCkrMSk7dmFyIGk9SCh0LDQpK1wiLVwiK0goci5nZXRNb250aCgpKzEsMikrXCItXCIrSChyLmdldERhdGUoKSwyKStcIlRcIitcbkgoci5nZXRIb3VycygpLDIpK1wiOlwiK0goci5nZXRNaW51dGVzKCksMikrXCI6XCIrSChyLmdldFNlY29uZHMoKSwyKStcIi5cIitIKHIuZ2V0TWlsbGlzZWNvbmRzKCksXG4zKTtyZXR1cm4gZTwwPyhpKz1cIi1cIixlKj0tMSk6aSs9XCIrXCIsaSs9SChNYXRoLmZsb29yKGUvNjApLDIpK1wiOlwiK0goZSU2MCwyKSxuJiYoaSs9XG5cIiBCQ1wiKSxpfWEoS2EsXCJkYXRlVG9TdHJpbmdcIik7ZnVuY3Rpb24gemEocil7dmFyIGU9ci5nZXRVVENGdWxsWWVhcigpLHQ9ZTwxO3QmJihlPVxuTWF0aC5hYnMoZSkrMSk7dmFyIG49SChlLDQpK1wiLVwiK0goci5nZXRVVENNb250aCgpKzEsMikrXCItXCIrSChyLmdldFVUQ0RhdGUoKSwyKStcIlxcXG5UXCIrSChyLmdldFVUQ0hvdXJzKCksMikrXCI6XCIrSChyLmdldFVUQ01pbnV0ZXMoKSwyKStcIjpcIitIKHIuZ2V0VVRDU2Vjb25kcygpLDIpK1wiLlwiK1xuSChyLmdldFVUQ01pbGxpc2Vjb25kcygpLDMpO3JldHVybiBuKz1cIiswMDowMFwiLHQmJihuKz1cIiBCQ1wiKSxufWEoemEsXCJkYXRlVG9TdHJpblxcXG5nVVRDXCIpO2Z1bmN0aW9uIFlhKHIsZSx0KXtyZXR1cm4gcj10eXBlb2Ygcj09XCJzdHJpbmdcIj97dGV4dDpyfTpyLGUmJih0eXBlb2YgZT09XCJcXFxuZnVuY3Rpb25cIj9yLmNhbGxiYWNrPWU6ci52YWx1ZXM9ZSksdCYmKHIuY2FsbGJhY2s9dCkscn1hKFlhLFwibm9ybWFsaXplUXVlcnlDb25maVxcXG5nXCIpO3ZhciBYdD1hKGZ1bmN0aW9uKHIpe3JldHVybiBIYS5jcmVhdGVIYXNoKFwibWQ1XCIpLnVwZGF0ZShyLFwidXRmLThcIikuZGlnZXN0KFwiaFxcXG5leFwiKX0sXCJtZDVcIiksWmE9YShmdW5jdGlvbihyLGUsdCl7dmFyIG49WHQoZStyKSxpPVh0KHkuY29uY2F0KFt5LmZyb20obiksdF0pKTtyZXR1cm5cIlxcXG5tZDVcIitpfSxcInBvc3RncmVzTWQ1UGFzc3dvcmRIYXNoXCIpO0RpLmV4cG9ydHM9e3ByZXBhcmVWYWx1ZTphKGZ1bmN0aW9uKGUpe3JldHVybiBsdChcbmUpfSxcInByZXBhcmVWYWx1ZVdyYXBwZXJcIiksbm9ybWFsaXplUXVlcnlDb25maWc6WWEscG9zdGdyZXNNZDVQYXNzd29yZEhhc2g6WmEsbWQ1Olh0fX0pO3ZhciBxaT1JKChZaCxOaSk9PntcInVzZSBzdHJpY3RcIjtwKCk7dmFyIGVyPShRdCgpLE4ocXQpKTtmdW5jdGlvbiBKYShyKXtpZihyLmluZGV4T2YoXG5cIlNDUkFNLVNIQS0yNTZcIik9PT0tMSl0aHJvdyBuZXcgRXJyb3IoXCJTQVNMOiBPbmx5IG1lY2hhbmlzbSBTQ1JBTS1TSEEtMjU2IGlzIGN1clxcXG5yZW50bHkgc3VwcG9ydGVkXCIpO2xldCBlPWVyLnJhbmRvbUJ5dGVzKDE4KS50b1N0cmluZyhcImJhc2U2NFwiKTtyZXR1cm57bWVjaGFuaXNtOlwiXFxcblNDUkFNLVNIQS0yNTZcIixjbGllbnROb25jZTplLHJlc3BvbnNlOlwibiwsbj0qLHI9XCIrZSxtZXNzYWdlOlwiU0FTTEluaXRpYWxSZXNwb25zZVwifX1cbmEoSmEsXCJzdGFydFNlc3Npb25cIik7ZnVuY3Rpb24gWGEocixlLHQpe2lmKHIubWVzc2FnZSE9PVwiU0FTTEluaXRpYWxSZXNwb25zZVwiKXRocm93IG5ldyBFcnJvcihcblwiU0FTTDogTGFzdCBtZXNzYWdlIHdhcyBub3QgU0FTTEluaXRpYWxSZXNwb25zZVwiKTtpZih0eXBlb2YgZSE9XCJzdHJpbmdcIil0aHJvdyBuZXcgRXJyb3IoXG5cIlNBU0w6IFNDUkFNLVNFUlZFUi1GSVJTVC1NRVNTQUdFOiBjbGllbnQgcGFzc3dvcmQgbXVzdCBiZSBhIHN0cmluZ1wiKTtpZih0eXBlb2YgdCE9XG5cInN0cmluZ1wiKXRocm93IG5ldyBFcnJvcihcIlNBU0w6IFNDUkFNLVNFUlZFUi1GSVJTVC1NRVNTQUdFOiBzZXJ2ZXJEYXRhIG11c3QgYmUgYVxcXG4gc3RyaW5nXCIpO2xldCBuPXJ1KHQpO2lmKG4ubm9uY2Uuc3RhcnRzV2l0aChyLmNsaWVudE5vbmNlKSl7aWYobi5ub25jZS5sZW5ndGg9PT1cbnIuY2xpZW50Tm9uY2UubGVuZ3RoKXRocm93IG5ldyBFcnJvcihcIlNBU0w6IFNDUkFNLVNFUlZFUi1GSVJTVC1NRVNTQUdFOiBzZXJ2ZXIgblxcXG5vbmNlIGlzIHRvbyBzaG9ydFwiKX1lbHNlIHRocm93IG5ldyBFcnJvcihcIlNBU0w6IFNDUkFNLVNFUlZFUi1GSVJTVC1NRVNTQUdFOiBzZXJ2XFxcbmVyIG5vbmNlIGRvZXMgbm90IHN0YXJ0IHdpdGggY2xpZW50IG5vbmNlXCIpO3ZhciBpPXkuZnJvbShuLnNhbHQsXCJiYXNlNjRcIikscz1zdShlLFxuaSxuLml0ZXJhdGlvbiksbz1EZShzLFwiQ2xpZW50IEtleVwiKSx1PWl1KG8pLGM9XCJuPSoscj1cIityLmNsaWVudE5vbmNlLGg9XCJyPVwiK24ubm9uY2UrXG5cIixzPVwiK24uc2FsdCtcIixpPVwiK24uaXRlcmF0aW9uLGw9XCJjPWJpd3Mscj1cIituLm5vbmNlLGQ9YytcIixcIitoK1wiLFwiK2wsYj1EZSh1LGQpLEM9T2koXG5vLGIpLEI9Qy50b1N0cmluZyhcImJhc2U2NFwiKSxXPURlKHMsXCJTZXJ2ZXIgS2V5XCIpLFg9RGUoVyxkKTtyLm1lc3NhZ2U9XCJTQVNMUmVzcG9uXFxcbnNlXCIsci5zZXJ2ZXJTaWduYXR1cmU9WC50b1N0cmluZyhcImJhc2U2NFwiKSxyLnJlc3BvbnNlPWwrXCIscD1cIitCfWEoWGEsXCJjb250aW51ZVNlXFxcbnNzaW9uXCIpO2Z1bmN0aW9uIGV1KHIsZSl7aWYoci5tZXNzYWdlIT09XCJTQVNMUmVzcG9uc2VcIil0aHJvdyBuZXcgRXJyb3IoXCJTQVNMOiBMYVxcXG5zdCBtZXNzYWdlIHdhcyBub3QgU0FTTFJlc3BvbnNlXCIpO2lmKHR5cGVvZiBlIT1cInN0cmluZ1wiKXRocm93IG5ldyBFcnJvcihcIlNBU0w6IFNcXFxuQ1JBTS1TRVJWRVItRklOQUwtTUVTU0FHRTogc2VydmVyRGF0YSBtdXN0IGJlIGEgc3RyaW5nXCIpO2xldHtzZXJ2ZXJTaWduYXR1cmU6dH09bnUoXG5lKTtpZih0IT09ci5zZXJ2ZXJTaWduYXR1cmUpdGhyb3cgbmV3IEVycm9yKFwiU0FTTDogU0NSQU0tU0VSVkVSLUZJTkFMLU1FU1NBR0U6IHNcXFxuZXJ2ZXIgc2lnbmF0dXJlIGRvZXMgbm90IG1hdGNoXCIpfWEoZXUsXCJmaW5hbGl6ZVNlc3Npb25cIik7ZnVuY3Rpb24gdHUocil7aWYodHlwZW9mIHIhPVxuXCJzdHJpbmdcIil0aHJvdyBuZXcgVHlwZUVycm9yKFwiU0FTTDogdGV4dCBtdXN0IGJlIGEgc3RyaW5nXCIpO3JldHVybiByLnNwbGl0KFwiXCIpLm1hcChcbihlLHQpPT5yLmNoYXJDb2RlQXQodCkpLmV2ZXJ5KGU9PmU+PTMzJiZlPD00M3x8ZT49NDUmJmU8PTEyNil9YSh0dSxcImlzUHJpbnRhYmxlQ1xcXG5oYXJzXCIpO2Z1bmN0aW9uIGtpKHIpe3JldHVybi9eKD86W2EtekEtWjAtOSsvXXs0fSkqKD86W2EtekEtWjAtOSsvXXsyfT09fFthLXpBLVowLTkrL117M309KT8kLy5cbnRlc3Qocil9YShraSxcImlzQmFzZTY0XCIpO2Z1bmN0aW9uIFVpKHIpe2lmKHR5cGVvZiByIT1cInN0cmluZ1wiKXRocm93IG5ldyBUeXBlRXJyb3IoXG5cIlNBU0w6IGF0dHJpYnV0ZSBwYWlycyB0ZXh0IG11c3QgYmUgYSBzdHJpbmdcIik7cmV0dXJuIG5ldyBNYXAoci5zcGxpdChcIixcIikubWFwKGU9PntcbmlmKCEvXi49Ly50ZXN0KGUpKXRocm93IG5ldyBFcnJvcihcIlNBU0w6IEludmFsaWQgYXR0cmlidXRlIHBhaXIgZW50cnlcIik7bGV0IHQ9ZVswXSxcbm49ZS5zdWJzdHJpbmcoMik7cmV0dXJuW3Qsbl19KSl9YShVaSxcInBhcnNlQXR0cmlidXRlUGFpcnNcIik7ZnVuY3Rpb24gcnUocil7bGV0IGU9VWkoXG5yKSx0PWUuZ2V0KFwiclwiKTtpZih0KXtpZighdHUodCkpdGhyb3cgbmV3IEVycm9yKFwiU0FTTDogU0NSQU0tU0VSVkVSLUZJUlNULU1FU1NBR1xcXG5FOiBub25jZSBtdXN0IG9ubHkgY29udGFpbiBwcmludGFibGUgY2hhcmFjdGVyc1wiKX1lbHNlIHRocm93IG5ldyBFcnJvcihcIlNBU0w6IFNDXFxcblJBTS1TRVJWRVItRklSU1QtTUVTU0FHRTogbm9uY2UgbWlzc2luZ1wiKTtsZXQgbj1lLmdldChcInNcIik7aWYobil7aWYoIWtpKG4pKXRocm93IG5ldyBFcnJvcihcblwiU0FTTDogU0NSQU0tU0VSVkVSLUZJUlNULU1FU1NBR0U6IHNhbHQgbXVzdCBiZSBiYXNlNjRcIil9ZWxzZSB0aHJvdyBuZXcgRXJyb3IoXCJTXFxcbkFTTDogU0NSQU0tU0VSVkVSLUZJUlNULU1FU1NBR0U6IHNhbHQgbWlzc2luZ1wiKTtsZXQgaT1lLmdldChcImlcIik7aWYoaSl7aWYoIS9eWzEtOV1bMC05XSokLy5cbnRlc3QoaSkpdGhyb3cgbmV3IEVycm9yKFwiU0FTTDogU0NSQU0tU0VSVkVSLUZJUlNULU1FU1NBR0U6IGludmFsaWQgaXRlcmF0aW9uIGNvdVxcXG5udFwiKX1lbHNlIHRocm93IG5ldyBFcnJvcihcIlNBU0w6IFNDUkFNLVNFUlZFUi1GSVJTVC1NRVNTQUdFOiBpdGVyYXRpb24gbWlzc2luZ1wiKTtcbmxldCBzPXBhcnNlSW50KGksMTApO3JldHVybntub25jZTp0LHNhbHQ6bixpdGVyYXRpb246c319YShydSxcInBhcnNlU2VydmVyRmlyc3RNZVxcXG5zc2FnZVwiKTtmdW5jdGlvbiBudShyKXtsZXQgdD1VaShyKS5nZXQoXCJ2XCIpO2lmKHQpe2lmKCFraSh0KSl0aHJvdyBuZXcgRXJyb3IoXCJTQVNcXFxuTDogU0NSQU0tU0VSVkVSLUZJTkFMLU1FU1NBR0U6IHNlcnZlciBzaWduYXR1cmUgbXVzdCBiZSBiYXNlNjRcIil9ZWxzZSB0aHJvdyBuZXcgRXJyb3IoXG5cIlNBU0w6IFNDUkFNLVNFUlZFUi1GSU5BTC1NRVNTQUdFOiBzZXJ2ZXIgc2lnbmF0dXJlIGlzIG1pc3NpbmdcIik7cmV0dXJue3NlcnZlclNpZ25hdHVyZTp0fX1cbmEobnUsXCJwYXJzZVNlcnZlckZpbmFsTWVzc2FnZVwiKTtmdW5jdGlvbiBPaShyLGUpe2lmKCF5LmlzQnVmZmVyKHIpKXRocm93IG5ldyBUeXBlRXJyb3IoXG5cImZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBCdWZmZXJcIik7aWYoIXkuaXNCdWZmZXIoZSkpdGhyb3cgbmV3IFR5cGVFcnJvcihcInNlY29uZFxcXG4gYXJndW1lbnQgbXVzdCBiZSBhIEJ1ZmZlclwiKTtpZihyLmxlbmd0aCE9PWUubGVuZ3RoKXRocm93IG5ldyBFcnJvcihcIkJ1ZmZlciBsZW5nXFxcbnRocyBtdXN0IG1hdGNoXCIpO2lmKHIubGVuZ3RoPT09MCl0aHJvdyBuZXcgRXJyb3IoXCJCdWZmZXJzIGNhbm5vdCBiZSBlbXB0eVwiKTtyZXR1cm4geS5cbmZyb20oci5tYXAoKHQsbik9PnJbbl1eZVtuXSkpfWEoT2ksXCJ4b3JCdWZmZXJzXCIpO2Z1bmN0aW9uIGl1KHIpe3JldHVybiBlci5jcmVhdGVIYXNoKFxuXCJzaGEyNTZcIikudXBkYXRlKHIpLmRpZ2VzdCgpfWEoaXUsXCJzaGEyNTZcIik7ZnVuY3Rpb24gRGUocixlKXtyZXR1cm4gZXIuY3JlYXRlSG1hYyhcblwic2hhMjU2XCIscikudXBkYXRlKGUpLmRpZ2VzdCgpfWEoRGUsXCJobWFjU2hhMjU2XCIpO2Z1bmN0aW9uIHN1KHIsZSx0KXtmb3IodmFyIG49RGUoXG5yLHkuY29uY2F0KFtlLHkuZnJvbShbMCwwLDAsMV0pXSkpLGk9bixzPTA7czx0LTE7cysrKW49RGUocixuKSxpPU9pKGksbik7cmV0dXJuIGl9XG5hKHN1LFwiSGlcIik7TmkuZXhwb3J0cz17c3RhcnRTZXNzaW9uOkphLGNvbnRpbnVlU2Vzc2lvbjpYYSxmaW5hbGl6ZVNlc3Npb246ZXV9fSk7dmFyIHRyPXt9O2llKHRyLHtqb2luOigpPT5vdX0pO2Z1bmN0aW9uIG91KC4uLnIpe3JldHVybiByLmpvaW4oXCIvXCIpfXZhciBycj16KCgpPT57XG5cInVzZSBzdHJpY3RcIjtwKCk7YShvdSxcImpvaW5cIil9KTt2YXIgbnI9e307aWUobnIse3N0YXQ6KCk9PmF1fSk7ZnVuY3Rpb24gYXUocixlKXtlKG5ldyBFcnJvcihcIk5vIGZpbGVzeXN0ZW1cIikpfXZhciBpcj16KFxuKCk9PntcInVzZSBzdHJpY3RcIjtwKCk7YShhdSxcInN0YXRcIil9KTt2YXIgc3I9e307aWUoc3Ise2RlZmF1bHQ6KCk9PnV1fSk7dmFyIHV1LG9yPXooKCk9PntcInVzZSBzdHJpY3RcIjtwKCk7dXU9e319KTt2YXIgUWk9e307aWUoUWkse1N0cmluZ0RlY29kZXI6KCk9PmFyfSk7dmFyIHVyLGFyLFdpPXooKCk9PntcInVzZSBzdHJpY3RcIjtwKCk7dXI9XG5jbGFzcyB1cntjb25zdHJ1Y3RvcihlKXtfKHRoaXMsXCJ0ZFwiKTt0aGlzLnRkPW5ldyBUZXh0RGVjb2RlcihlKX13cml0ZShlKXtyZXR1cm4gdGhpcy5cbnRkLmRlY29kZShlLHtzdHJlYW06ITB9KX1lbmQoZSl7cmV0dXJuIHRoaXMudGQuZGVjb2RlKGUpfX07YSh1cixcIlN0cmluZ0RlY29kZXJcIik7XG5hcj11cn0pO3ZhciAkaT1JKChvbCxHaSk9PntcInVzZSBzdHJpY3RcIjtwKCk7dmFye1RyYW5zZm9ybTpjdX09KG9yKCksTihzcikpLHtTdHJpbmdEZWNvZGVyOmh1fT0oV2koKSxOKFFpKSksXG5iZT1TeW1ib2woXCJsYXN0XCIpLGZ0PVN5bWJvbChcImRlY29kZXJcIik7ZnVuY3Rpb24gbHUocixlLHQpe2xldCBuO2lmKHRoaXMub3ZlcmZsb3cpe1xuaWYobj10aGlzW2Z0XS53cml0ZShyKS5zcGxpdCh0aGlzLm1hdGNoZXIpLG4ubGVuZ3RoPT09MSlyZXR1cm4gdCgpO24uc2hpZnQoKSx0aGlzLlxub3ZlcmZsb3c9ITF9ZWxzZSB0aGlzW2JlXSs9dGhpc1tmdF0ud3JpdGUociksbj10aGlzW2JlXS5zcGxpdCh0aGlzLm1hdGNoZXIpO3RoaXNbYmVdPVxubi5wb3AoKTtmb3IobGV0IGk9MDtpPG4ubGVuZ3RoO2krKyl0cnl7SGkodGhpcyx0aGlzLm1hcHBlcihuW2ldKSl9Y2F0Y2gocyl7cmV0dXJuIHQoXG5zKX1pZih0aGlzLm92ZXJmbG93PXRoaXNbYmVdLmxlbmd0aD50aGlzLm1heExlbmd0aCx0aGlzLm92ZXJmbG93JiYhdGhpcy5za2lwT3ZlcmZsb3cpe1xudChuZXcgRXJyb3IoXCJtYXhpbXVtIGJ1ZmZlciByZWFjaGVkXCIpKTtyZXR1cm59dCgpfWEobHUsXCJ0cmFuc2Zvcm1cIik7ZnVuY3Rpb24gZnUocil7XG5pZih0aGlzW2JlXSs9dGhpc1tmdF0uZW5kKCksdGhpc1tiZV0pdHJ5e0hpKHRoaXMsdGhpcy5tYXBwZXIodGhpc1tiZV0pKX1jYXRjaChlKXtcbnJldHVybiByKGUpfXIoKX1hKGZ1LFwiZmx1c2hcIik7ZnVuY3Rpb24gSGkocixlKXtlIT09dm9pZCAwJiZyLnB1c2goZSl9YShIaSxcInB1c2hcIik7XG5mdW5jdGlvbiBqaShyKXtyZXR1cm4gcn1hKGppLFwibm9vcFwiKTtmdW5jdGlvbiBwdShyLGUsdCl7c3dpdGNoKHI9cnx8L1xccj9cXG4vLGU9ZXx8XG5qaSx0PXR8fHt9LGFyZ3VtZW50cy5sZW5ndGgpe2Nhc2UgMTp0eXBlb2Ygcj09XCJmdW5jdGlvblwiPyhlPXIscj0vXFxyP1xcbi8pOnR5cGVvZiByPT1cblwib2JqZWN0XCImJiEociBpbnN0YW5jZW9mIFJlZ0V4cCkmJiFyW1N5bWJvbC5zcGxpdF0mJih0PXIscj0vXFxyP1xcbi8pO2JyZWFrO2Nhc2UgMjpcbnR5cGVvZiByPT1cImZ1bmN0aW9uXCI/KHQ9ZSxlPXIscj0vXFxyP1xcbi8pOnR5cGVvZiBlPT1cIm9iamVjdFwiJiYodD1lLGU9amkpfXQ9T2JqZWN0LlxuYXNzaWduKHt9LHQpLHQuYXV0b0Rlc3Ryb3k9ITAsdC50cmFuc2Zvcm09bHUsdC5mbHVzaD1mdSx0LnJlYWRhYmxlT2JqZWN0TW9kZT0hMDtcbmxldCBuPW5ldyBjdSh0KTtyZXR1cm4gbltiZV09XCJcIixuW2Z0XT1uZXcgaHUoXCJ1dGY4XCIpLG4ubWF0Y2hlcj1yLG4ubWFwcGVyPWUsbi5tYXhMZW5ndGg9XG50Lm1heExlbmd0aCxuLnNraXBPdmVyZmxvdz10LnNraXBPdmVyZmxvd3x8ITEsbi5vdmVyZmxvdz0hMSxuLl9kZXN0cm95PWZ1bmN0aW9uKGkscyl7XG50aGlzLl93cml0YWJsZVN0YXRlLmVycm9yRW1pdHRlZD0hMSxzKGkpfSxufWEocHUsXCJzcGxpdFwiKTtHaS5leHBvcnRzPXB1fSk7dmFyIHppPUkoKGNsLHBlKT0+e1widXNlIHN0cmljdFwiO3AoKTt2YXIgVmk9KHJyKCksTih0cikpLGR1PShvcigpLE4oc3IpKS5TdHJlYW0seXU9JGkoKSxcbktpPShIZSgpLE4oamUpKSxtdT01NDMyLHB0PW0ucGxhdGZvcm09PT1cIndpbjMyXCIsdHQ9bS5zdGRlcnIsZ3U9NTYsd3U9NyxidT02MTQ0MCxcblN1PTMyNzY4O2Z1bmN0aW9uIHh1KHIpe3JldHVybihyJmJ1KT09U3V9YSh4dSxcImlzUmVnRmlsZVwiKTt2YXIga2U9W1wiaG9zdFwiLFwicG9ydFwiLFxuXCJkYXRhYmFzZVwiLFwidXNlclwiLFwicGFzc3dvcmRcIl0sY3I9a2UubGVuZ3RoLHZ1PWtlW2NyLTFdO2Z1bmN0aW9uIGhyKCl7dmFyIHI9dHQgaW5zdGFuY2VvZlxuZHUmJnR0LndyaXRhYmxlPT09ITA7aWYocil7dmFyIGU9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKS5jb25jYXQoYFxuYCk7dHQud3JpdGUoS2kuZm9ybWF0LmFwcGx5KEtpLGUpKX19YShocixcIndhcm5cIik7T2JqZWN0LmRlZmluZVByb3BlcnR5KHBlLmV4cG9ydHMsXG5cImlzV2luXCIse2dldDphKGZ1bmN0aW9uKCl7cmV0dXJuIHB0fSxcImdldFwiKSxzZXQ6YShmdW5jdGlvbihyKXtwdD1yfSxcInNldFwiKX0pO3BlLlxuZXhwb3J0cy53YXJuVG89ZnVuY3Rpb24ocil7dmFyIGU9dHQ7cmV0dXJuIHR0PXIsZX07cGUuZXhwb3J0cy5nZXRGaWxlTmFtZT1mdW5jdGlvbihyKXtcbnZhciBlPXJ8fG0uZW52LHQ9ZS5QR1BBU1NGSUxFfHwocHQ/Vmkuam9pbihlLkFQUERBVEF8fFwiLi9cIixcInBvc3RncmVzcWxcIixcInBncGFzcy5cXFxuY29uZlwiKTpWaS5qb2luKGUuSE9NRXx8XCIuL1wiLFwiLnBncGFzc1wiKSk7cmV0dXJuIHR9O3BlLmV4cG9ydHMudXNlUGdQYXNzPWZ1bmN0aW9uKHIsZSl7XG5yZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG0uZW52LFwiUEdQQVNTV09SRFwiKT8hMTpwdD8hMDooZT1lfHxcIlxcXG48dW5rbj5cIix4dShyLm1vZGUpP3IubW9kZSYoZ3V8d3UpPyhocignV0FSTklORzogcGFzc3dvcmQgZmlsZSBcIiVzXCIgaGFzIGdyb3VwIG9yIFxcXG53b3JsZCBhY2Nlc3M7IHBlcm1pc3Npb25zIHNob3VsZCBiZSB1PXJ3ICgwNjAwKSBvciBsZXNzJyxlKSwhMSk6ITA6KGhyKCdXQVJOSU5HOlxcXG4gcGFzc3dvcmQgZmlsZSBcIiVzXCIgaXMgbm90IGEgcGxhaW4gZmlsZScsZSksITEpKX07dmFyIEV1PXBlLmV4cG9ydHMubWF0Y2g9ZnVuY3Rpb24ocixlKXtcbnJldHVybiBrZS5zbGljZSgwLC0xKS5yZWR1Y2UoZnVuY3Rpb24odCxuLGkpe3JldHVybiBpPT0xJiZOdW1iZXIocltuXXx8bXUpPT09TnVtYmVyKFxuZVtuXSk/dCYmITA6dCYmKGVbbl09PT1cIipcInx8ZVtuXT09PXJbbl0pfSwhMCl9O3BlLmV4cG9ydHMuZ2V0UGFzc3dvcmQ9ZnVuY3Rpb24ocixlLHQpe1xudmFyIG4saT1lLnBpcGUoeXUoKSk7ZnVuY3Rpb24gcyhjKXt2YXIgaD1fdShjKTtoJiZBdShoKSYmRXUocixoKSYmKG49aFt2dV0saS5lbmQoKSl9XG5hKHMsXCJvbkxpbmVcIik7dmFyIG89YShmdW5jdGlvbigpe2UuZGVzdHJveSgpLHQobil9LFwib25FbmRcIiksdT1hKGZ1bmN0aW9uKGMpe2UuZGVzdHJveSgpLFxuaHIoXCJXQVJOSU5HOiBlcnJvciBvbiByZWFkaW5nIGZpbGU6ICVzXCIsYyksdCh2b2lkIDApfSxcIm9uRXJyXCIpO2Uub24oXCJlcnJvclwiLHUpLGkuXG5vbihcImRhdGFcIixzKS5vbihcImVuZFwiLG8pLm9uKFwiZXJyb3JcIix1KX07dmFyIF91PXBlLmV4cG9ydHMucGFyc2VMaW5lPWZ1bmN0aW9uKHIpe1xuaWYoci5sZW5ndGg8MTF8fHIubWF0Y2goL15cXHMrIy8pKXJldHVybiBudWxsO2Zvcih2YXIgZT1cIlwiLHQ9XCJcIixuPTAsaT0wLHM9MCxvPXt9LFxudT0hMSxjPWEoZnVuY3Rpb24obCxkLGIpe3ZhciBDPXIuc3Vic3RyaW5nKGQsYik7T2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwobS5lbnYsXG5cIlBHUEFTU19OT19ERUVTQ0FQRVwiKXx8KEM9Qy5yZXBsYWNlKC9cXFxcKFs6XFxcXF0pL2csXCIkMVwiKSksb1trZVtsXV09Q30sXCJhZGRUb09ialwiKSxcbmg9MDtoPHIubGVuZ3RoLTE7aCs9MSl7aWYoZT1yLmNoYXJBdChoKzEpLHQ9ci5jaGFyQXQoaCksdT1uPT1jci0xLHUpe2MobixpKTticmVha31cbmg+PTAmJmU9PVwiOlwiJiZ0IT09XCJcXFxcXCImJihjKG4saSxoKzEpLGk9aCsyLG4rPTEpfXJldHVybiBvPU9iamVjdC5rZXlzKG8pLmxlbmd0aD09PVxuY3I/bzpudWxsLG99LEF1PXBlLmV4cG9ydHMuaXNWYWxpZEVudHJ5PWZ1bmN0aW9uKHIpe2Zvcih2YXIgZT17MDpmdW5jdGlvbihvKXtyZXR1cm4gby5cbmxlbmd0aD4wfSwxOmZ1bmN0aW9uKG8pe3JldHVybiBvPT09XCIqXCI/ITA6KG89TnVtYmVyKG8pLGlzRmluaXRlKG8pJiZvPjAmJm88OTAwNzE5OTI1NDc0MDk5MiYmXG5NYXRoLmZsb29yKG8pPT09byl9LDI6ZnVuY3Rpb24obyl7cmV0dXJuIG8ubGVuZ3RoPjB9LDM6ZnVuY3Rpb24obyl7cmV0dXJuIG8ubGVuZ3RoPlxuMH0sNDpmdW5jdGlvbihvKXtyZXR1cm4gby5sZW5ndGg+MH19LHQ9MDt0PGtlLmxlbmd0aDt0Kz0xKXt2YXIgbj1lW3RdLGk9cltrZVt0XV18fFxuXCJcIixzPW4oaSk7aWYoIXMpcmV0dXJuITF9cmV0dXJuITB9fSk7dmFyIFppPUkoKHBsLGxyKT0+e1widXNlIHN0cmljdFwiO3AoKTt2YXIgZmw9KHJyKCksTih0cikpLFlpPShpcigpLE4obnIpKSxkdD16aSgpO1xubHIuZXhwb3J0cz1mdW5jdGlvbihyLGUpe3ZhciB0PWR0LmdldEZpbGVOYW1lKCk7WWkuc3RhdCh0LGZ1bmN0aW9uKG4saSl7aWYobnx8IWR0LlxudXNlUGdQYXNzKGksdCkpcmV0dXJuIGUodm9pZCAwKTt2YXIgcz1ZaS5jcmVhdGVSZWFkU3RyZWFtKHQpO2R0LmdldFBhc3N3b3JkKHIscyxcbmUpfSl9O2xyLmV4cG9ydHMud2FyblRvPWR0Lndhcm5Ub30pO3ZhciBtdD1JKCh5bCxKaSk9PntcInVzZSBzdHJpY3RcIjtwKCk7dmFyIEN1PUplKCk7ZnVuY3Rpb24geXQocil7dGhpcy5fdHlwZXM9cnx8Q3UsXG50aGlzLnRleHQ9e30sdGhpcy5iaW5hcnk9e319YSh5dCxcIlR5cGVPdmVycmlkZXNcIik7eXQucHJvdG90eXBlLmdldE92ZXJyaWRlcz1mdW5jdGlvbihyKXtcbnN3aXRjaChyKXtjYXNlXCJ0ZXh0XCI6cmV0dXJuIHRoaXMudGV4dDtjYXNlXCJiaW5hcnlcIjpyZXR1cm4gdGhpcy5iaW5hcnk7ZGVmYXVsdDpyZXR1cm57fX19O1xueXQucHJvdG90eXBlLnNldFR5cGVQYXJzZXI9ZnVuY3Rpb24ocixlLHQpe3R5cGVvZiBlPT1cImZ1bmN0aW9uXCImJih0PWUsZT1cInRleHRcIiksXG50aGlzLmdldE92ZXJyaWRlcyhlKVtyXT10fTt5dC5wcm90b3R5cGUuZ2V0VHlwZVBhcnNlcj1mdW5jdGlvbihyLGUpe3JldHVybiBlPWV8fFxuXCJ0ZXh0XCIsdGhpcy5nZXRPdmVycmlkZXMoZSlbcl18fHRoaXMuX3R5cGVzLmdldFR5cGVQYXJzZXIocixlKX07SmkuZXhwb3J0cz15dH0pO3ZhciBYaT17fTtpZShYaSx7ZGVmYXVsdDooKT0+VHV9KTt2YXIgVHUsZXM9eigoKT0+e1widXNlIHN0cmljdFwiO3AoKTtUdT17fX0pO3ZhciB0cz17fTtpZSh0cyx7cGFyc2U6KCk9PmZyfSk7ZnVuY3Rpb24gZnIocixlPSExKXtsZXR7cHJvdG9jb2w6dH09bmV3IFVSTChyKSxuPVwiXFxcbmh0dHA6XCIrci5zdWJzdHJpbmcodC5sZW5ndGgpLHt1c2VybmFtZTppLHBhc3N3b3JkOnMsaG9zdDpvLGhvc3RuYW1lOnUscG9ydDpjLHBhdGhuYW1lOmgsXG5zZWFyY2g6bCxzZWFyY2hQYXJhbXM6ZCxoYXNoOmJ9PW5ldyBVUkwobik7cz1kZWNvZGVVUklDb21wb25lbnQocyksaT1kZWNvZGVVUklDb21wb25lbnQoXG5pKSxoPWRlY29kZVVSSUNvbXBvbmVudChoKTtsZXQgQz1pK1wiOlwiK3MsQj1lP09iamVjdC5mcm9tRW50cmllcyhkLmVudHJpZXMoKSk6bDtyZXR1cm57XG5ocmVmOnIscHJvdG9jb2w6dCxhdXRoOkMsdXNlcm5hbWU6aSxwYXNzd29yZDpzLGhvc3Q6byxob3N0bmFtZTp1LHBvcnQ6YyxwYXRobmFtZTpoLFxuc2VhcmNoOmwscXVlcnk6QixoYXNoOmJ9fXZhciBwcj16KCgpPT57XCJ1c2Ugc3RyaWN0XCI7cCgpO2EoZnIsXCJwYXJzZVwiKX0pO3ZhciBucz1JKCh4bCxycyk9PntcInVzZSBzdHJpY3RcIjtwKCk7dmFyIEl1PShwcigpLE4odHMpKSxkcj0oaXIoKSxOKG5yKSk7ZnVuY3Rpb24geXIocil7XG5pZihyLmNoYXJBdCgwKT09PVwiL1wiKXt2YXIgdD1yLnNwbGl0KFwiIFwiKTtyZXR1cm57aG9zdDp0WzBdLGRhdGFiYXNlOnRbMV19fXZhciBlPUl1LlxucGFyc2UoLyB8JVteYS1mMC05XXwlW2EtZjAtOV1bXmEtZjAtOV0vaS50ZXN0KHIpP2VuY29kZVVSSShyKS5yZXBsYWNlKC9cXCUyNShcXGRcXGQpL2csXG5cIiUkMVwiKTpyLCEwKSx0PWUucXVlcnk7Zm9yKHZhciBuIGluIHQpQXJyYXkuaXNBcnJheSh0W25dKSYmKHRbbl09dFtuXVt0W25dLmxlbmd0aC1cbjFdKTt2YXIgaT0oZS5hdXRofHxcIjpcIikuc3BsaXQoXCI6XCIpO2lmKHQudXNlcj1pWzBdLHQucGFzc3dvcmQ9aS5zcGxpY2UoMSkuam9pbihcIjpcIiksXG50LnBvcnQ9ZS5wb3J0LGUucHJvdG9jb2w9PVwic29ja2V0OlwiKXJldHVybiB0Lmhvc3Q9ZGVjb2RlVVJJKGUucGF0aG5hbWUpLHQuZGF0YWJhc2U9XG5lLnF1ZXJ5LmRiLHQuY2xpZW50X2VuY29kaW5nPWUucXVlcnkuZW5jb2RpbmcsdDt0Lmhvc3R8fCh0Lmhvc3Q9ZS5ob3N0bmFtZSk7dmFyIHM9ZS5cbnBhdGhuYW1lO2lmKCF0Lmhvc3QmJnMmJi9eJTJmL2kudGVzdChzKSl7dmFyIG89cy5zcGxpdChcIi9cIik7dC5ob3N0PWRlY29kZVVSSUNvbXBvbmVudChcbm9bMF0pLHM9by5zcGxpY2UoMSkuam9pbihcIi9cIil9c3dpdGNoKHMmJnMuY2hhckF0KDApPT09XCIvXCImJihzPXMuc2xpY2UoMSl8fG51bGwpLFxudC5kYXRhYmFzZT1zJiZkZWNvZGVVUkkocyksKHQuc3NsPT09XCJ0cnVlXCJ8fHQuc3NsPT09XCIxXCIpJiYodC5zc2w9ITApLHQuc3NsPT09XCIwXCImJlxuKHQuc3NsPSExKSwodC5zc2xjZXJ0fHx0LnNzbGtleXx8dC5zc2xyb290Y2VydHx8dC5zc2xtb2RlKSYmKHQuc3NsPXt9KSx0LnNzbGNlcnQmJlxuKHQuc3NsLmNlcnQ9ZHIucmVhZEZpbGVTeW5jKHQuc3NsY2VydCkudG9TdHJpbmcoKSksdC5zc2xrZXkmJih0LnNzbC5rZXk9ZHIucmVhZEZpbGVTeW5jKFxudC5zc2xrZXkpLnRvU3RyaW5nKCkpLHQuc3Nscm9vdGNlcnQmJih0LnNzbC5jYT1kci5yZWFkRmlsZVN5bmModC5zc2xyb290Y2VydCkudG9TdHJpbmcoKSksXG50LnNzbG1vZGUpe2Nhc2VcImRpc2FibGVcIjp7dC5zc2w9ITE7YnJlYWt9Y2FzZVwicHJlZmVyXCI6Y2FzZVwicmVxdWlyZVwiOmNhc2VcInZlcmlmeS1cXFxuY2FcIjpjYXNlXCJ2ZXJpZnktZnVsbFwiOmJyZWFrO2Nhc2VcIm5vLXZlcmlmeVwiOnt0LnNzbC5yZWplY3RVbmF1dGhvcml6ZWQ9ITE7YnJlYWt9fVxucmV0dXJuIHR9YSh5cixcInBhcnNlXCIpO3JzLmV4cG9ydHM9eXI7eXIucGFyc2U9eXJ9KTt2YXIgZ3Q9SSgoX2wsb3MpPT57XCJ1c2Ugc3RyaWN0XCI7cCgpO3ZhciBQdT0oZXMoKSxOKFhpKSksc3M9WGUoKSxpcz1ucygpLnBhcnNlLCQ9YShcbmZ1bmN0aW9uKHIsZSx0KXtyZXR1cm4gdD09PXZvaWQgMD90PW0uZW52W1wiUEdcIityLnRvVXBwZXJDYXNlKCldOnQ9PT0hMXx8KHQ9bS5lbnZbdF0pLFxuZVtyXXx8dHx8c3Nbcl19LFwidmFsXCIpLEJ1PWEoZnVuY3Rpb24oKXtzd2l0Y2gobS5lbnYuUEdTU0xNT0RFKXtjYXNlXCJkaXNhYmxlXCI6cmV0dXJuITE7Y2FzZVwiXFxcbnByZWZlclwiOmNhc2VcInJlcXVpcmVcIjpjYXNlXCJ2ZXJpZnktY2FcIjpjYXNlXCJ2ZXJpZnktZnVsbFwiOnJldHVybiEwO2Nhc2VcIm5vLXZlcmlmeVwiOlxucmV0dXJue3JlamVjdFVuYXV0aG9yaXplZDohMX19cmV0dXJuIHNzLnNzbH0sXCJyZWFkU1NMQ29uZmlnRnJvbUVudmlyb25tZW50XCIpLFVlPWEoXG5mdW5jdGlvbihyKXtyZXR1cm5cIidcIisoXCJcIityKS5yZXBsYWNlKC9cXFxcL2csXCJcXFxcXFxcXFwiKS5yZXBsYWNlKC8nL2csXCJcXFxcJ1wiKStcIidcIn0sXCJxdW9cXFxudGVQYXJhbVZhbHVlXCIpLG5lPWEoZnVuY3Rpb24ocixlLHQpe3ZhciBuPWVbdF07biE9bnVsbCYmci5wdXNoKHQrXCI9XCIrVWUobikpfSxcImFkXFxcbmRcIiksZ3I9Y2xhc3MgZ3J7Y29uc3RydWN0b3IoZSl7ZT10eXBlb2YgZT09XCJzdHJpbmdcIj9pcyhlKTplfHx7fSxlLmNvbm5lY3Rpb25TdHJpbmcmJlxuKGU9T2JqZWN0LmFzc2lnbih7fSxlLGlzKGUuY29ubmVjdGlvblN0cmluZykpKSx0aGlzLnVzZXI9JChcInVzZXJcIixlKSx0aGlzLmRhdGFiYXNlPVxuJChcImRhdGFiYXNlXCIsZSksdGhpcy5kYXRhYmFzZT09PXZvaWQgMCYmKHRoaXMuZGF0YWJhc2U9dGhpcy51c2VyKSx0aGlzLnBvcnQ9cGFyc2VJbnQoXG4kKFwicG9ydFwiLGUpLDEwKSx0aGlzLmhvc3Q9JChcImhvc3RcIixlKSxPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcyxcInBhc3N3b3JkXCIse2NvbmZpZ3VyYWJsZTohMCxcbmVudW1lcmFibGU6ITEsd3JpdGFibGU6ITAsdmFsdWU6JChcInBhc3N3b3JkXCIsZSl9KSx0aGlzLmJpbmFyeT0kKFwiYmluYXJ5XCIsZSksdGhpcy5cbm9wdGlvbnM9JChcIm9wdGlvbnNcIixlKSx0aGlzLnNzbD10eXBlb2YgZS5zc2w+XCJ1XCI/QnUoKTplLnNzbCx0eXBlb2YgdGhpcy5zc2w9PVwic3RcXFxucmluZ1wiJiZ0aGlzLnNzbD09PVwidHJ1ZVwiJiYodGhpcy5zc2w9ITApLHRoaXMuc3NsPT09XCJuby12ZXJpZnlcIiYmKHRoaXMuc3NsPXtyZWplY3RVbmF1dGhvcml6ZWQ6ITF9KSxcbnRoaXMuc3NsJiZ0aGlzLnNzbC5rZXkmJk9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLnNzbCxcImtleVwiLHtlbnVtZXJhYmxlOiExfSksdGhpcy5cbmNsaWVudF9lbmNvZGluZz0kKFwiY2xpZW50X2VuY29kaW5nXCIsZSksdGhpcy5yZXBsaWNhdGlvbj0kKFwicmVwbGljYXRpb25cIixlKSx0aGlzLlxuaXNEb21haW5Tb2NrZXQ9ISh0aGlzLmhvc3R8fFwiXCIpLmluZGV4T2YoXCIvXCIpLHRoaXMuYXBwbGljYXRpb25fbmFtZT0kKFwiYXBwbGljYXRpb1xcXG5uX25hbWVcIixlLFwiUEdBUFBOQU1FXCIpLHRoaXMuZmFsbGJhY2tfYXBwbGljYXRpb25fbmFtZT0kKFwiZmFsbGJhY2tfYXBwbGljYXRpb25fbmFcXFxubWVcIixlLCExKSx0aGlzLnN0YXRlbWVudF90aW1lb3V0PSQoXCJzdGF0ZW1lbnRfdGltZW91dFwiLGUsITEpLHRoaXMubG9ja190aW1lb3V0PSQoXG5cImxvY2tfdGltZW91dFwiLGUsITEpLHRoaXMuaWRsZV9pbl90cmFuc2FjdGlvbl9zZXNzaW9uX3RpbWVvdXQ9JChcImlkbGVfaW5fdHJhbnNhY1xcXG50aW9uX3Nlc3Npb25fdGltZW91dFwiLGUsITEpLHRoaXMucXVlcnlfdGltZW91dD0kKFwicXVlcnlfdGltZW91dFwiLGUsITEpLGUuY29ubmVjdGlvblRpbWVvdXRNaWxsaXM9PT1cbnZvaWQgMD90aGlzLmNvbm5lY3RfdGltZW91dD1tLmVudi5QR0NPTk5FQ1RfVElNRU9VVHx8MDp0aGlzLmNvbm5lY3RfdGltZW91dD1NYXRoLlxuZmxvb3IoZS5jb25uZWN0aW9uVGltZW91dE1pbGxpcy8xZTMpLGUua2VlcEFsaXZlPT09ITE/dGhpcy5rZWVwYWxpdmVzPTA6ZS5rZWVwQWxpdmU9PT1cbiEwJiYodGhpcy5rZWVwYWxpdmVzPTEpLHR5cGVvZiBlLmtlZXBBbGl2ZUluaXRpYWxEZWxheU1pbGxpcz09XCJudW1iZXJcIiYmKHRoaXMua2VlcGFsaXZlc19pZGxlPVxuTWF0aC5mbG9vcihlLmtlZXBBbGl2ZUluaXRpYWxEZWxheU1pbGxpcy8xZTMpKX1nZXRMaWJwcUNvbm5lY3Rpb25TdHJpbmcoZSl7dmFyIHQ9W107XG5uZSh0LHRoaXMsXCJ1c2VyXCIpLG5lKHQsdGhpcyxcInBhc3N3b3JkXCIpLG5lKHQsdGhpcyxcInBvcnRcIiksbmUodCx0aGlzLFwiYXBwbGljYXRpb25cXFxuX25hbWVcIiksbmUodCx0aGlzLFwiZmFsbGJhY2tfYXBwbGljYXRpb25fbmFtZVwiKSxuZSh0LHRoaXMsXCJjb25uZWN0X3RpbWVvdXRcIiksbmUodCxcbnRoaXMsXCJvcHRpb25zXCIpO3ZhciBuPXR5cGVvZiB0aGlzLnNzbD09XCJvYmplY3RcIj90aGlzLnNzbDp0aGlzLnNzbD97c3NsbW9kZTp0aGlzLlxuc3NsfTp7fTtpZihuZSh0LG4sXCJzc2xtb2RlXCIpLG5lKHQsbixcInNzbGNhXCIpLG5lKHQsbixcInNzbGtleVwiKSxuZSh0LG4sXCJzc2xjZXJ0XCIpLFxubmUodCxuLFwic3Nscm9vdGNlcnRcIiksdGhpcy5kYXRhYmFzZSYmdC5wdXNoKFwiZGJuYW1lPVwiK1VlKHRoaXMuZGF0YWJhc2UpKSx0aGlzLnJlcGxpY2F0aW9uJiZcbnQucHVzaChcInJlcGxpY2F0aW9uPVwiK1VlKHRoaXMucmVwbGljYXRpb24pKSx0aGlzLmhvc3QmJnQucHVzaChcImhvc3Q9XCIrVWUodGhpcy5ob3N0KSksXG50aGlzLmlzRG9tYWluU29ja2V0KXJldHVybiBlKG51bGwsdC5qb2luKFwiIFwiKSk7dGhpcy5jbGllbnRfZW5jb2RpbmcmJnQucHVzaChcImNsaVxcXG5lbnRfZW5jb2Rpbmc9XCIrVWUodGhpcy5jbGllbnRfZW5jb2RpbmcpKSxQdS5sb29rdXAodGhpcy5ob3N0LGZ1bmN0aW9uKGkscyl7cmV0dXJuIGk/XG5lKGksbnVsbCk6KHQucHVzaChcImhvc3RhZGRyPVwiK1VlKHMpKSxlKG51bGwsdC5qb2luKFwiIFwiKSkpfSl9fTthKGdyLFwiQ29ubmVjdGlvblBhXFxcbnJhbWV0ZXJzXCIpO3ZhciBtcj1ncjtvcy5leHBvcnRzPW1yfSk7dmFyIGNzPUkoKFRsLHVzKT0+e1widXNlIHN0cmljdFwiO3AoKTt2YXIgTHU9SmUoKSxhcz0vXihbQS1aYS16XSspKD86IChcXGQrKSk/KD86IChcXGQrKSk/LyxcbmJyPWNsYXNzIGJye2NvbnN0cnVjdG9yKGUsdCl7dGhpcy5jb21tYW5kPW51bGwsdGhpcy5yb3dDb3VudD1udWxsLHRoaXMub2lkPW51bGwsXG50aGlzLnJvd3M9W10sdGhpcy5maWVsZHM9W10sdGhpcy5fcGFyc2Vycz12b2lkIDAsdGhpcy5fdHlwZXM9dCx0aGlzLlJvd0N0b3I9bnVsbCxcbnRoaXMucm93QXNBcnJheT1lPT09XCJhcnJheVwiLHRoaXMucm93QXNBcnJheSYmKHRoaXMucGFyc2VSb3c9dGhpcy5fcGFyc2VSb3dBc0FycmF5KX1hZGRDb21tYW5kQ29tcGxldGUoZSl7XG52YXIgdDtlLnRleHQ/dD1hcy5leGVjKGUudGV4dCk6dD1hcy5leGVjKGUuY29tbWFuZCksdCYmKHRoaXMuY29tbWFuZD10WzFdLHRbM10/KHRoaXMuXG5vaWQ9cGFyc2VJbnQodFsyXSwxMCksdGhpcy5yb3dDb3VudD1wYXJzZUludCh0WzNdLDEwKSk6dFsyXSYmKHRoaXMucm93Q291bnQ9cGFyc2VJbnQoXG50WzJdLDEwKSkpfV9wYXJzZVJvd0FzQXJyYXkoZSl7Zm9yKHZhciB0PW5ldyBBcnJheShlLmxlbmd0aCksbj0wLGk9ZS5sZW5ndGg7bjxpO24rKyl7XG52YXIgcz1lW25dO3MhPT1udWxsP3Rbbl09dGhpcy5fcGFyc2Vyc1tuXShzKTp0W25dPW51bGx9cmV0dXJuIHR9cGFyc2VSb3coZSl7Zm9yKHZhciB0PXt9LFxubj0wLGk9ZS5sZW5ndGg7bjxpO24rKyl7dmFyIHM9ZVtuXSxvPXRoaXMuZmllbGRzW25dLm5hbWU7cyE9PW51bGw/dFtvXT10aGlzLl9wYXJzZXJzW25dKFxucyk6dFtvXT1udWxsfXJldHVybiB0fWFkZFJvdyhlKXt0aGlzLnJvd3MucHVzaChlKX1hZGRGaWVsZHMoZSl7dGhpcy5maWVsZHM9ZSx0aGlzLlxuZmllbGRzLmxlbmd0aCYmKHRoaXMuX3BhcnNlcnM9bmV3IEFycmF5KGUubGVuZ3RoKSk7Zm9yKHZhciB0PTA7dDxlLmxlbmd0aDt0Kyspe3ZhciBuPWVbdF07XG50aGlzLl90eXBlcz90aGlzLl9wYXJzZXJzW3RdPXRoaXMuX3R5cGVzLmdldFR5cGVQYXJzZXIobi5kYXRhVHlwZUlELG4uZm9ybWF0fHxcInRcXFxuZXh0XCIpOnRoaXMuX3BhcnNlcnNbdF09THUuZ2V0VHlwZVBhcnNlcihuLmRhdGFUeXBlSUQsbi5mb3JtYXR8fFwidGV4dFwiKX19fTthKGJyLFwiXFxcblJlc3VsdFwiKTt2YXIgd3I9YnI7dXMuZXhwb3J0cz13cn0pO3ZhciBwcz1JKChCbCxmcyk9PntcInVzZSBzdHJpY3RcIjtwKCk7dmFye0V2ZW50RW1pdHRlcjpSdX09d2UoKSxocz1jcygpLGxzPWV0KCkseHI9Y2xhc3MgeHIgZXh0ZW5kcyBSdXtjb25zdHJ1Y3RvcihlLHQsbil7XG5zdXBlcigpLGU9bHMubm9ybWFsaXplUXVlcnlDb25maWcoZSx0LG4pLHRoaXMudGV4dD1lLnRleHQsdGhpcy52YWx1ZXM9ZS52YWx1ZXMsdGhpcy5cbnJvd3M9ZS5yb3dzLHRoaXMudHlwZXM9ZS50eXBlcyx0aGlzLm5hbWU9ZS5uYW1lLHRoaXMuYmluYXJ5PWUuYmluYXJ5LHRoaXMucG9ydGFsPVxuZS5wb3J0YWx8fFwiXCIsdGhpcy5jYWxsYmFjaz1lLmNhbGxiYWNrLHRoaXMuX3Jvd01vZGU9ZS5yb3dNb2RlLG0uZG9tYWluJiZlLmNhbGxiYWNrJiZcbih0aGlzLmNhbGxiYWNrPW0uZG9tYWluLmJpbmQoZS5jYWxsYmFjaykpLHRoaXMuX3Jlc3VsdD1uZXcgaHModGhpcy5fcm93TW9kZSx0aGlzLlxudHlwZXMpLHRoaXMuX3Jlc3VsdHM9dGhpcy5fcmVzdWx0LHRoaXMuaXNQcmVwYXJlZFN0YXRlbWVudD0hMSx0aGlzLl9jYW5jZWxlZER1ZVRvRXJyb3I9XG4hMSx0aGlzLl9wcm9taXNlPW51bGx9cmVxdWlyZXNQcmVwYXJhdGlvbigpe3JldHVybiB0aGlzLm5hbWV8fHRoaXMucm93cz8hMDohdGhpcy5cbnRleHR8fCF0aGlzLnZhbHVlcz8hMTp0aGlzLnZhbHVlcy5sZW5ndGg+MH1fY2hlY2tGb3JNdWx0aXJvdygpe3RoaXMuX3Jlc3VsdC5jb21tYW5kJiZcbihBcnJheS5pc0FycmF5KHRoaXMuX3Jlc3VsdHMpfHwodGhpcy5fcmVzdWx0cz1bdGhpcy5fcmVzdWx0XSksdGhpcy5fcmVzdWx0PW5ldyBocyhcbnRoaXMuX3Jvd01vZGUsdGhpcy50eXBlcyksdGhpcy5fcmVzdWx0cy5wdXNoKHRoaXMuX3Jlc3VsdCkpfWhhbmRsZVJvd0Rlc2NyaXB0aW9uKGUpe1xudGhpcy5fY2hlY2tGb3JNdWx0aXJvdygpLHRoaXMuX3Jlc3VsdC5hZGRGaWVsZHMoZS5maWVsZHMpLHRoaXMuX2FjY3VtdWxhdGVSb3dzPXRoaXMuXG5jYWxsYmFja3x8IXRoaXMubGlzdGVuZXJzKFwicm93XCIpLmxlbmd0aH1oYW5kbGVEYXRhUm93KGUpe2xldCB0O2lmKCF0aGlzLl9jYW5jZWxlZER1ZVRvRXJyb3Ipe1xudHJ5e3Q9dGhpcy5fcmVzdWx0LnBhcnNlUm93KGUuZmllbGRzKX1jYXRjaChuKXt0aGlzLl9jYW5jZWxlZER1ZVRvRXJyb3I9bjtyZXR1cm59XG50aGlzLmVtaXQoXCJyb3dcIix0LHRoaXMuX3Jlc3VsdCksdGhpcy5fYWNjdW11bGF0ZVJvd3MmJnRoaXMuX3Jlc3VsdC5hZGRSb3codCl9fWhhbmRsZUNvbW1hbmRDb21wbGV0ZShlLHQpe1xudGhpcy5fY2hlY2tGb3JNdWx0aXJvdygpLHRoaXMuX3Jlc3VsdC5hZGRDb21tYW5kQ29tcGxldGUoZSksdGhpcy5yb3dzJiZ0LnN5bmMoKX1oYW5kbGVFbXB0eVF1ZXJ5KGUpe1xudGhpcy5yb3dzJiZlLnN5bmMoKX1oYW5kbGVFcnJvcihlLHQpe2lmKHRoaXMuX2NhbmNlbGVkRHVlVG9FcnJvciYmKGU9dGhpcy5fY2FuY2VsZWREdWVUb0Vycm9yLFxudGhpcy5fY2FuY2VsZWREdWVUb0Vycm9yPSExKSx0aGlzLmNhbGxiYWNrKXJldHVybiB0aGlzLmNhbGxiYWNrKGUpO3RoaXMuZW1pdChcImVyXFxcbnJvclwiLGUpfWhhbmRsZVJlYWR5Rm9yUXVlcnkoZSl7aWYodGhpcy5fY2FuY2VsZWREdWVUb0Vycm9yKXJldHVybiB0aGlzLmhhbmRsZUVycm9yKFxudGhpcy5fY2FuY2VsZWREdWVUb0Vycm9yLGUpO2lmKHRoaXMuY2FsbGJhY2spdHJ5e3RoaXMuY2FsbGJhY2sobnVsbCx0aGlzLl9yZXN1bHRzKX1jYXRjaCh0KXtcbm0ubmV4dFRpY2soKCk9Pnt0aHJvdyB0fSl9dGhpcy5lbWl0KFwiZW5kXCIsdGhpcy5fcmVzdWx0cyl9c3VibWl0KGUpe2lmKHR5cGVvZiB0aGlzLlxudGV4dCE9XCJzdHJpbmdcIiYmdHlwZW9mIHRoaXMubmFtZSE9XCJzdHJpbmdcIilyZXR1cm4gbmV3IEVycm9yKFwiQSBxdWVyeSBtdXN0IGhhdmUgZVxcXG5pdGhlciB0ZXh0IG9yIGEgbmFtZS4gU3VwcGx5aW5nIG5laXRoZXIgaXMgdW5zdXBwb3J0ZWQuXCIpO2xldCB0PWUucGFyc2VkU3RhdGVtZW50c1t0aGlzLlxubmFtZV07cmV0dXJuIHRoaXMudGV4dCYmdCYmdGhpcy50ZXh0IT09dD9uZXcgRXJyb3IoYFByZXBhcmVkIHN0YXRlbWVudHMgbXVzdCBiZSBcXFxudW5pcXVlIC0gJyR7dGhpcy5uYW1lfScgd2FzIHVzZWQgZm9yIGEgZGlmZmVyZW50IHN0YXRlbWVudGApOnRoaXMudmFsdWVzJiYhQXJyYXkuXG5pc0FycmF5KHRoaXMudmFsdWVzKT9uZXcgRXJyb3IoXCJRdWVyeSB2YWx1ZXMgbXVzdCBiZSBhbiBhcnJheVwiKToodGhpcy5yZXF1aXJlc1ByZXBhcmF0aW9uKCk/XG50aGlzLnByZXBhcmUoZSk6ZS5xdWVyeSh0aGlzLnRleHQpLG51bGwpfWhhc0JlZW5QYXJzZWQoZSl7cmV0dXJuIHRoaXMubmFtZSYmZS5wYXJzZWRTdGF0ZW1lbnRzW3RoaXMuXG5uYW1lXX1oYW5kbGVQb3J0YWxTdXNwZW5kZWQoZSl7dGhpcy5fZ2V0Um93cyhlLHRoaXMucm93cyl9X2dldFJvd3MoZSx0KXtlLmV4ZWN1dGUoXG57cG9ydGFsOnRoaXMucG9ydGFsLHJvd3M6dH0pLHQ/ZS5mbHVzaCgpOmUuc3luYygpfXByZXBhcmUoZSl7dGhpcy5pc1ByZXBhcmVkU3RhdGVtZW50PVxuITAsdGhpcy5oYXNCZWVuUGFyc2VkKGUpfHxlLnBhcnNlKHt0ZXh0OnRoaXMudGV4dCxuYW1lOnRoaXMubmFtZSx0eXBlczp0aGlzLnR5cGVzfSk7XG50cnl7ZS5iaW5kKHtwb3J0YWw6dGhpcy5wb3J0YWwsc3RhdGVtZW50OnRoaXMubmFtZSx2YWx1ZXM6dGhpcy52YWx1ZXMsYmluYXJ5OnRoaXMuXG5iaW5hcnksdmFsdWVNYXBwZXI6bHMucHJlcGFyZVZhbHVlfSl9Y2F0Y2godCl7dGhpcy5oYW5kbGVFcnJvcih0LGUpO3JldHVybn1lLmRlc2NyaWJlKFxue3R5cGU6XCJQXCIsbmFtZTp0aGlzLnBvcnRhbHx8XCJcIn0pLHRoaXMuX2dldFJvd3MoZSx0aGlzLnJvd3MpfWhhbmRsZUNvcHlJblJlc3BvbnNlKGUpe1xuZS5zZW5kQ29weUZhaWwoXCJObyBzb3VyY2Ugc3RyZWFtIGRlZmluZWRcIil9aGFuZGxlQ29weURhdGEoZSx0KXt9fTthKHhyLFwiUXVlcnlcIik7XG52YXIgU3I9eHI7ZnMuZXhwb3J0cz1Tcn0pO3ZhciB5cz17fTtpZSh5cyx7U29ja2V0OigpPT5fZSxpc0lQOigpPT5GdX0pO2Z1bmN0aW9uIEZ1KHIpe3JldHVybiAwfXZhciBkcyxNdSxFLFxuX2Usd3Q9eigoKT0+e1widXNlIHN0cmljdFwiO3AoKTtkcz1UZSh3ZSgpLDEpO2EoRnUsXCJpc0lQXCIpO011PWEocj0+ci5yZXBsYWNlKC9eW14uXStcXC4vLFxuXCJhcGkuXCIpLFwidHJhbnNmb3JtSG9zdFwiKSxFPWNsYXNzIEUgZXh0ZW5kcyBkcy5FdmVudEVtaXR0ZXJ7Y29uc3RydWN0b3IoKXtzdXBlciguLi5hcmd1bWVudHMpO1xuXyh0aGlzLFwib3B0c1wiLHt9KTtfKHRoaXMsXCJjb25uZWN0aW5nXCIsITEpO18odGhpcyxcInBlbmRpbmdcIiwhMCk7Xyh0aGlzLFwid3JpdGFibGVcIixcbiEwKTtfKHRoaXMsXCJlbmNyeXB0ZWRcIiwhMSk7Xyh0aGlzLFwiYXV0aG9yaXplZFwiLCExKTtfKHRoaXMsXCJkZXN0cm95ZWRcIiwhMSk7Xyh0aGlzLFxuXCJ3c1wiLG51bGwpO18odGhpcyxcIndyaXRlQnVmZmVyXCIpO18odGhpcyxcInRsc1N0YXRlXCIsMCk7Xyh0aGlzLFwidGxzUmVhZFwiKTtfKHRoaXMsXCJcXFxudGxzV3JpdGVcIil9c3RhdGljIGdldCBwb29sUXVlcnlWaWFGZXRjaCgpe3JldHVybiBFLm9wdHMucG9vbFF1ZXJ5VmlhRmV0Y2g/P0UuZGVmYXVsdHMuXG5wb29sUXVlcnlWaWFGZXRjaH1zdGF0aWMgc2V0IHBvb2xRdWVyeVZpYUZldGNoKHQpe0Uub3B0cy5wb29sUXVlcnlWaWFGZXRjaD10fXN0YXRpYyBnZXQgZmV0Y2hFbmRwb2ludCgpe1xucmV0dXJuIEUub3B0cy5mZXRjaEVuZHBvaW50Pz9FLmRlZmF1bHRzLmZldGNoRW5kcG9pbnR9c3RhdGljIHNldCBmZXRjaEVuZHBvaW50KHQpe1xuRS5vcHRzLmZldGNoRW5kcG9pbnQ9dH1zdGF0aWMgZ2V0IGZldGNoQ29ubmVjdGlvbkNhY2hlKCl7cmV0dXJuITB9c3RhdGljIHNldCBmZXRjaENvbm5lY3Rpb25DYWNoZSh0KXtcbmNvbnNvbGUud2FybihcIlRoZSBgZmV0Y2hDb25uZWN0aW9uQ2FjaGVgIG9wdGlvbiBpcyBkZXByZWNhdGVkIChub3cgYWx3YXlzIGB0cnVlYFxcXG4pXCIpfXN0YXRpYyBnZXQgZmV0Y2hGdW5jdGlvbigpe3JldHVybiBFLm9wdHMuZmV0Y2hGdW5jdGlvbj8/RS5kZWZhdWx0cy5mZXRjaEZ1bmN0aW9ufXN0YXRpYyBzZXQgZmV0Y2hGdW5jdGlvbih0KXtcbkUub3B0cy5mZXRjaEZ1bmN0aW9uPXR9c3RhdGljIGdldCB3ZWJTb2NrZXRDb25zdHJ1Y3Rvcigpe3JldHVybiBFLm9wdHMud2ViU29ja2V0Q29uc3RydWN0b3I/P1xuRS5kZWZhdWx0cy53ZWJTb2NrZXRDb25zdHJ1Y3Rvcn1zdGF0aWMgc2V0IHdlYlNvY2tldENvbnN0cnVjdG9yKHQpe0Uub3B0cy53ZWJTb2NrZXRDb25zdHJ1Y3Rvcj1cbnR9Z2V0IHdlYlNvY2tldENvbnN0cnVjdG9yKCl7cmV0dXJuIHRoaXMub3B0cy53ZWJTb2NrZXRDb25zdHJ1Y3Rvcj8/RS53ZWJTb2NrZXRDb25zdHJ1Y3Rvcn1zZXQgd2ViU29ja2V0Q29uc3RydWN0b3IodCl7XG50aGlzLm9wdHMud2ViU29ja2V0Q29uc3RydWN0b3I9dH1zdGF0aWMgZ2V0IHdzUHJveHkoKXtyZXR1cm4gRS5vcHRzLndzUHJveHk/P0UuZGVmYXVsdHMuXG53c1Byb3h5fXN0YXRpYyBzZXQgd3NQcm94eSh0KXtFLm9wdHMud3NQcm94eT10fWdldCB3c1Byb3h5KCl7cmV0dXJuIHRoaXMub3B0cy53c1Byb3h5Pz9cbkUud3NQcm94eX1zZXQgd3NQcm94eSh0KXt0aGlzLm9wdHMud3NQcm94eT10fXN0YXRpYyBnZXQgY29hbGVzY2VXcml0ZXMoKXtyZXR1cm4gRS5cbm9wdHMuY29hbGVzY2VXcml0ZXM/P0UuZGVmYXVsdHMuY29hbGVzY2VXcml0ZXN9c3RhdGljIHNldCBjb2FsZXNjZVdyaXRlcyh0KXtFLm9wdHMuXG5jb2FsZXNjZVdyaXRlcz10fWdldCBjb2FsZXNjZVdyaXRlcygpe3JldHVybiB0aGlzLm9wdHMuY29hbGVzY2VXcml0ZXM/P0UuY29hbGVzY2VXcml0ZXN9c2V0IGNvYWxlc2NlV3JpdGVzKHQpe1xudGhpcy5vcHRzLmNvYWxlc2NlV3JpdGVzPXR9c3RhdGljIGdldCB1c2VTZWN1cmVXZWJTb2NrZXQoKXtyZXR1cm4gRS5vcHRzLnVzZVNlY3VyZVdlYlNvY2tldD8/XG5FLmRlZmF1bHRzLnVzZVNlY3VyZVdlYlNvY2tldH1zdGF0aWMgc2V0IHVzZVNlY3VyZVdlYlNvY2tldCh0KXtFLm9wdHMudXNlU2VjdXJlV2ViU29ja2V0PVxudH1nZXQgdXNlU2VjdXJlV2ViU29ja2V0KCl7cmV0dXJuIHRoaXMub3B0cy51c2VTZWN1cmVXZWJTb2NrZXQ/P0UudXNlU2VjdXJlV2ViU29ja2V0fXNldCB1c2VTZWN1cmVXZWJTb2NrZXQodCl7XG50aGlzLm9wdHMudXNlU2VjdXJlV2ViU29ja2V0PXR9c3RhdGljIGdldCBmb3JjZURpc2FibGVQZ1NTTCgpe3JldHVybiBFLm9wdHMuZm9yY2VEaXNhYmxlUGdTU0w/P1xuRS5kZWZhdWx0cy5mb3JjZURpc2FibGVQZ1NTTH1zdGF0aWMgc2V0IGZvcmNlRGlzYWJsZVBnU1NMKHQpe0Uub3B0cy5mb3JjZURpc2FibGVQZ1NTTD1cbnR9Z2V0IGZvcmNlRGlzYWJsZVBnU1NMKCl7cmV0dXJuIHRoaXMub3B0cy5mb3JjZURpc2FibGVQZ1NTTD8/RS5mb3JjZURpc2FibGVQZ1NTTH1zZXQgZm9yY2VEaXNhYmxlUGdTU0wodCl7XG50aGlzLm9wdHMuZm9yY2VEaXNhYmxlUGdTU0w9dH1zdGF0aWMgZ2V0IGRpc2FibGVTTkkoKXtyZXR1cm4gRS5vcHRzLmRpc2FibGVTTkk/P1xuRS5kZWZhdWx0cy5kaXNhYmxlU05JfXN0YXRpYyBzZXQgZGlzYWJsZVNOSSh0KXtFLm9wdHMuZGlzYWJsZVNOST10fWdldCBkaXNhYmxlU05JKCl7XG5yZXR1cm4gdGhpcy5vcHRzLmRpc2FibGVTTkk/P0UuZGlzYWJsZVNOSX1zZXQgZGlzYWJsZVNOSSh0KXt0aGlzLm9wdHMuZGlzYWJsZVNOST1cbnR9c3RhdGljIGdldCBwaXBlbGluZUNvbm5lY3QoKXtyZXR1cm4gRS5vcHRzLnBpcGVsaW5lQ29ubmVjdD8/RS5kZWZhdWx0cy5waXBlbGluZUNvbm5lY3R9c3RhdGljIHNldCBwaXBlbGluZUNvbm5lY3QodCl7XG5FLm9wdHMucGlwZWxpbmVDb25uZWN0PXR9Z2V0IHBpcGVsaW5lQ29ubmVjdCgpe3JldHVybiB0aGlzLm9wdHMucGlwZWxpbmVDb25uZWN0Pz9cbkUucGlwZWxpbmVDb25uZWN0fXNldCBwaXBlbGluZUNvbm5lY3QodCl7dGhpcy5vcHRzLnBpcGVsaW5lQ29ubmVjdD10fXN0YXRpYyBnZXQgc3VidGxzKCl7XG5yZXR1cm4gRS5vcHRzLnN1YnRscz8/RS5kZWZhdWx0cy5zdWJ0bHN9c3RhdGljIHNldCBzdWJ0bHModCl7RS5vcHRzLnN1YnRscz10fWdldCBzdWJ0bHMoKXtcbnJldHVybiB0aGlzLm9wdHMuc3VidGxzPz9FLnN1YnRsc31zZXQgc3VidGxzKHQpe3RoaXMub3B0cy5zdWJ0bHM9dH1zdGF0aWMgZ2V0IHBpcGVsaW5lVExTKCl7XG5yZXR1cm4gRS5vcHRzLnBpcGVsaW5lVExTPz9FLmRlZmF1bHRzLnBpcGVsaW5lVExTfXN0YXRpYyBzZXQgcGlwZWxpbmVUTFModCl7RS5vcHRzLlxucGlwZWxpbmVUTFM9dH1nZXQgcGlwZWxpbmVUTFMoKXtyZXR1cm4gdGhpcy5vcHRzLnBpcGVsaW5lVExTPz9FLnBpcGVsaW5lVExTfXNldCBwaXBlbGluZVRMUyh0KXtcbnRoaXMub3B0cy5waXBlbGluZVRMUz10fXN0YXRpYyBnZXQgcm9vdENlcnRzKCl7cmV0dXJuIEUub3B0cy5yb290Q2VydHM/P0UuZGVmYXVsdHMuXG5yb290Q2VydHN9c3RhdGljIHNldCByb290Q2VydHModCl7RS5vcHRzLnJvb3RDZXJ0cz10fWdldCByb290Q2VydHMoKXtyZXR1cm4gdGhpcy5cbm9wdHMucm9vdENlcnRzPz9FLnJvb3RDZXJ0c31zZXQgcm9vdENlcnRzKHQpe3RoaXMub3B0cy5yb290Q2VydHM9dH13c1Byb3h5QWRkckZvckhvc3QodCxuKXtcbmxldCBpPXRoaXMud3NQcm94eTtpZihpPT09dm9pZCAwKXRocm93IG5ldyBFcnJvcihcIk5vIFdlYlNvY2tldCBwcm94eSBpcyBjb25maWd1clxcXG5lZC4gUGxlYXNlIHNlZSBodHRwczovL2dpdGh1Yi5jb20vbmVvbmRhdGFiYXNlL3NlcnZlcmxlc3MvYmxvYi9tYWluL0NPTkZJRy5tZCN3c1xcXG5wcm94eS1zdHJpbmctLWhvc3Qtc3RyaW5nLXBvcnQtbnVtYmVyLS1zdHJpbmctLXN0cmluZ1wiKTtyZXR1cm4gdHlwZW9mIGk9PVwiZnVuY3RpXFxcbm9uXCI/aSh0LG4pOmAke2l9P2FkZHJlc3M9JHt0fToke259YH1zZXROb0RlbGF5KCl7cmV0dXJuIHRoaXN9c2V0S2VlcEFsaXZlKCl7cmV0dXJuIHRoaXN9cmVmKCl7XG5yZXR1cm4gdGhpc311bnJlZigpe3JldHVybiB0aGlzfWNvbm5lY3QodCxuLGkpe3RoaXMuY29ubmVjdGluZz0hMCxpJiZ0aGlzLm9uY2UoXCJcXFxuY29ubmVjdFwiLGkpO2xldCBzPWEoKCk9Pnt0aGlzLmNvbm5lY3Rpbmc9ITEsdGhpcy5wZW5kaW5nPSExLHRoaXMuZW1pdChcImNvbm5lY3RcIiksXG50aGlzLmVtaXQoXCJyZWFkeVwiKX0sXCJoYW5kbGVXZWJTb2NrZXRPcGVuXCIpLG89YSgoYyxoPSExKT0+e2MuYmluYXJ5VHlwZT1cImFycmF5YnVmXFxcbmZlclwiLGMuYWRkRXZlbnRMaXN0ZW5lcihcImVycm9yXCIsbD0+e3RoaXMuZW1pdChcImVycm9yXCIsbCksdGhpcy5lbWl0KFwiY2xvc2VcIil9KSxjLlxuYWRkRXZlbnRMaXN0ZW5lcihcIm1lc3NhZ2VcIixsPT57aWYodGhpcy50bHNTdGF0ZT09PTApe2xldCBkPXkuZnJvbShsLmRhdGEpO3RoaXMuZW1pdChcblwiZGF0YVwiLGQpfX0pLGMuYWRkRXZlbnRMaXN0ZW5lcihcImNsb3NlXCIsKCk9Pnt0aGlzLmVtaXQoXCJjbG9zZVwiKX0pLGg/cygpOmMuYWRkRXZlbnRMaXN0ZW5lcihcblwib3BlblwiLHMpfSxcImNvbmZpZ3VyZVdlYlNvY2tldFwiKSx1O3RyeXt1PXRoaXMud3NQcm94eUFkZHJGb3JIb3N0KG4sdHlwZW9mIHQ9PVwic3RcXFxucmluZ1wiP3BhcnNlSW50KHQsMTApOnQpfWNhdGNoKGMpe3RoaXMuZW1pdChcImVycm9yXCIsYyksdGhpcy5lbWl0KFwiY2xvc2VcIik7cmV0dXJufVxudHJ5e2xldCBoPSh0aGlzLnVzZVNlY3VyZVdlYlNvY2tldD9cIndzczpcIjpcIndzOlwiKStcIi8vXCIrdTtpZih0aGlzLndlYlNvY2tldENvbnN0cnVjdG9yIT09XG52b2lkIDApdGhpcy53cz1uZXcgdGhpcy53ZWJTb2NrZXRDb25zdHJ1Y3RvcihoKSxvKHRoaXMud3MpO2Vsc2UgdHJ5e3RoaXMud3M9bmV3IFdlYlNvY2tldChcbmgpLG8odGhpcy53cyl9Y2F0Y2h7dGhpcy53cz1uZXcgX191bnN0YWJsZV9XZWJTb2NrZXQoaCksbyh0aGlzLndzKX19Y2F0Y2goYyl7bGV0IGw9KHRoaXMuXG51c2VTZWN1cmVXZWJTb2NrZXQ/XCJodHRwczpcIjpcImh0dHA6XCIpK1wiLy9cIit1O2ZldGNoKGwse2hlYWRlcnM6e1VwZ3JhZGU6XCJ3ZWJzb2NrZXRcIn19KS5cbnRoZW4oZD0+e2lmKHRoaXMud3M9ZC53ZWJTb2NrZXQsdGhpcy53cz09bnVsbCl0aHJvdyBjO3RoaXMud3MuYWNjZXB0KCksbyh0aGlzLndzLFxuITApfSkuY2F0Y2goZD0+e3RoaXMuZW1pdChcImVycm9yXCIsbmV3IEVycm9yKGBBbGwgYXR0ZW1wdHMgdG8gb3BlbiBhIFdlYlNvY2tldCB0b1xcXG4gY29ubmVjdCB0byB0aGUgZGF0YWJhc2UgZmFpbGVkLiBQbGVhc2UgcmVmZXIgdG8gaHR0cHM6Ly9naXRodWIuY29tL25lb25kYXRhYmFzZVxcXG4vc2VydmVybGVzcy9ibG9iL21haW4vQ09ORklHLm1kI3dlYnNvY2tldGNvbnN0cnVjdG9yLXR5cGVvZi13ZWJzb2NrZXQtLXVuZGVmaW5lZFxcXG4uIERldGFpbHM6ICR7ZC5tZXNzYWdlfWApKSx0aGlzLmVtaXQoXCJjbG9zZVwiKX0pfX1hc3luYyBzdGFydFRscyh0KXtpZih0aGlzLnN1YnRscz09PVxudm9pZCAwKXRocm93IG5ldyBFcnJvcihcIkZvciBQb3N0Z3JlcyBTU0wgY29ubmVjdGlvbnMsIHlvdSBtdXN0IHNldCBgbmVvbkNvbmZpZy5zXFxcbnVidGxzYCB0byB0aGUgc3VidGxzIGxpYnJhcnkuIFNlZSBodHRwczovL2dpdGh1Yi5jb20vbmVvbmRhdGFiYXNlL3NlcnZlcmxlc3MvYmxvXFxcbmIvbWFpbi9DT05GSUcubWQgZm9yIG1vcmUgaW5mb3JtYXRpb24uXCIpO3RoaXMudGxzU3RhdGU9MTtsZXQgbj10aGlzLnN1YnRscy5UcnVzdGVkQ2VydC5cbmZyb21QRU0odGhpcy5yb290Q2VydHMpLGk9bmV3IHRoaXMuc3VidGxzLldlYlNvY2tldFJlYWRRdWV1ZSh0aGlzLndzKSxzPWkucmVhZC5iaW5kKFxuaSksbz10aGlzLnJhd1dyaXRlLmJpbmQodGhpcyksW3UsY109YXdhaXQgdGhpcy5zdWJ0bHMuc3RhcnRUbHModCxuLHMsbyx7dXNlU05JOiF0aGlzLlxuZGlzYWJsZVNOSSxleHBlY3RQcmVEYXRhOnRoaXMucGlwZWxpbmVUTFM/bmV3IFVpbnQ4QXJyYXkoWzgzXSk6dm9pZCAwfSk7dGhpcy50bHNSZWFkPVxudSx0aGlzLnRsc1dyaXRlPWMsdGhpcy50bHNTdGF0ZT0yLHRoaXMuZW5jcnlwdGVkPSEwLHRoaXMuYXV0aG9yaXplZD0hMCx0aGlzLmVtaXQoXG5cInNlY3VyZUNvbm5lY3Rpb25cIix0aGlzKSx0aGlzLnRsc1JlYWRMb29wKCl9YXN5bmMgdGxzUmVhZExvb3AoKXtmb3IoOzspe2xldCB0PWF3YWl0IHRoaXMuXG50bHNSZWFkKCk7aWYodD09PXZvaWQgMClicmVhazt7bGV0IG49eS5mcm9tKHQpO3RoaXMuZW1pdChcImRhdGFcIixuKX19fXJhd1dyaXRlKHQpe1xuaWYoIXRoaXMuY29hbGVzY2VXcml0ZXMpe3RoaXMud3Muc2VuZCh0KTtyZXR1cm59aWYodGhpcy53cml0ZUJ1ZmZlcj09PXZvaWQgMCl0aGlzLlxud3JpdGVCdWZmZXI9dCxzZXRUaW1lb3V0KCgpPT57dGhpcy53cy5zZW5kKHRoaXMud3JpdGVCdWZmZXIpLHRoaXMud3JpdGVCdWZmZXI9dm9pZCAwfSxcbjApO2Vsc2V7bGV0IG49bmV3IFVpbnQ4QXJyYXkodGhpcy53cml0ZUJ1ZmZlci5sZW5ndGgrdC5sZW5ndGgpO24uc2V0KHRoaXMud3JpdGVCdWZmZXIpLFxubi5zZXQodCx0aGlzLndyaXRlQnVmZmVyLmxlbmd0aCksdGhpcy53cml0ZUJ1ZmZlcj1ufX13cml0ZSh0LG49XCJ1dGY4XCIsaT1zPT57fSl7cmV0dXJuIHQuXG5sZW5ndGg9PT0wPyhpKCksITApOih0eXBlb2YgdD09XCJzdHJpbmdcIiYmKHQ9eS5mcm9tKHQsbikpLHRoaXMudGxzU3RhdGU9PT0wPyh0aGlzLlxucmF3V3JpdGUodCksaSgpKTp0aGlzLnRsc1N0YXRlPT09MT90aGlzLm9uY2UoXCJzZWN1cmVDb25uZWN0aW9uXCIsKCk9Pnt0aGlzLndyaXRlKFxudCxuLGkpfSk6KHRoaXMudGxzV3JpdGUodCksaSgpKSwhMCl9ZW5kKHQ9eS5hbGxvYygwKSxuPVwidXRmOFwiLGk9KCk9Pnt9KXtyZXR1cm4gdGhpcy5cbndyaXRlKHQsbiwoKT0+e3RoaXMud3MuY2xvc2UoKSxpKCl9KSx0aGlzfWRlc3Ryb3koKXtyZXR1cm4gdGhpcy5kZXN0cm95ZWQ9ITAsdGhpcy5cbmVuZCgpfX07YShFLFwiU29ja2V0XCIpLF8oRSxcImRlZmF1bHRzXCIse3Bvb2xRdWVyeVZpYUZldGNoOiExLGZldGNoRW5kcG9pbnQ6YSh0PT5cImhcXFxudHRwczovL1wiK011KHQpK1wiL3NxbFwiLFwiZmV0Y2hFbmRwb2ludFwiKSxmZXRjaENvbm5lY3Rpb25DYWNoZTohMCxmZXRjaEZ1bmN0aW9uOnZvaWQgMCxcbndlYlNvY2tldENvbnN0cnVjdG9yOnZvaWQgMCx3c1Byb3h5OmEodD0+dCtcIi92MlwiLFwid3NQcm94eVwiKSx1c2VTZWN1cmVXZWJTb2NrZXQ6ITAsXG5mb3JjZURpc2FibGVQZ1NTTDohMCxjb2FsZXNjZVdyaXRlczohMCxwaXBlbGluZUNvbm5lY3Q6XCJwYXNzd29yZFwiLHN1YnRsczp2b2lkIDAsXG5yb290Q2VydHM6XCJcIixwaXBlbGluZVRMUzohMSxkaXNhYmxlU05JOiExfSksXyhFLFwib3B0c1wiLHt9KTtfZT1FfSk7dmFyIFlyPUkoVD0+e1widXNlIHN0cmljdFwiO3AoKTtPYmplY3QuZGVmaW5lUHJvcGVydHkoVCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTtULlxuTm90aWNlTWVzc2FnZT1ULkRhdGFSb3dNZXNzYWdlPVQuQ29tbWFuZENvbXBsZXRlTWVzc2FnZT1ULlJlYWR5Rm9yUXVlcnlNZXNzYWdlPVQuXG5Ob3RpZmljYXRpb25SZXNwb25zZU1lc3NhZ2U9VC5CYWNrZW5kS2V5RGF0YU1lc3NhZ2U9VC5BdXRoZW50aWNhdGlvbk1ENVBhc3N3b3JkPVxuVC5QYXJhbWV0ZXJTdGF0dXNNZXNzYWdlPVQuUGFyYW1ldGVyRGVzY3JpcHRpb25NZXNzYWdlPVQuUm93RGVzY3JpcHRpb25NZXNzYWdlPVQuXG5GaWVsZD1ULkNvcHlSZXNwb25zZT1ULkNvcHlEYXRhTWVzc2FnZT1ULkRhdGFiYXNlRXJyb3I9VC5jb3B5RG9uZT1ULmVtcHR5UXVlcnk9VC5cbnJlcGxpY2F0aW9uU3RhcnQ9VC5wb3J0YWxTdXNwZW5kZWQ9VC5ub0RhdGE9VC5jbG9zZUNvbXBsZXRlPVQuYmluZENvbXBsZXRlPVQucGFyc2VDb21wbGV0ZT1cbnZvaWQgMDtULnBhcnNlQ29tcGxldGU9e25hbWU6XCJwYXJzZUNvbXBsZXRlXCIsbGVuZ3RoOjV9O1QuYmluZENvbXBsZXRlPXtuYW1lOlwiYmluXFxcbmRDb21wbGV0ZVwiLGxlbmd0aDo1fTtULmNsb3NlQ29tcGxldGU9e25hbWU6XCJjbG9zZUNvbXBsZXRlXCIsbGVuZ3RoOjV9O1Qubm9EYXRhPXtuYW1lOlwiXFxcbm5vRGF0YVwiLGxlbmd0aDo1fTtULnBvcnRhbFN1c3BlbmRlZD17bmFtZTpcInBvcnRhbFN1c3BlbmRlZFwiLGxlbmd0aDo1fTtULnJlcGxpY2F0aW9uU3RhcnQ9XG57bmFtZTpcInJlcGxpY2F0aW9uU3RhcnRcIixsZW5ndGg6NH07VC5lbXB0eVF1ZXJ5PXtuYW1lOlwiZW1wdHlRdWVyeVwiLGxlbmd0aDo0fTtULmNvcHlEb25lPVxue25hbWU6XCJjb3B5RG9uZVwiLGxlbmd0aDo0fTt2YXIga3I9Y2xhc3Mga3IgZXh0ZW5kcyBFcnJvcntjb25zdHJ1Y3RvcihlLHQsbil7c3VwZXIoXG5lKSx0aGlzLmxlbmd0aD10LHRoaXMubmFtZT1ufX07YShrcixcIkRhdGFiYXNlRXJyb3JcIik7dmFyIHZyPWtyO1QuRGF0YWJhc2VFcnJvcj12cjtcbnZhciBVcj1jbGFzcyBVcntjb25zdHJ1Y3RvcihlLHQpe3RoaXMubGVuZ3RoPWUsdGhpcy5jaHVuaz10LHRoaXMubmFtZT1cImNvcHlEYXRhXCJ9fTtcbmEoVXIsXCJDb3B5RGF0YU1lc3NhZ2VcIik7dmFyIEVyPVVyO1QuQ29weURhdGFNZXNzYWdlPUVyO3ZhciBPcj1jbGFzcyBPcntjb25zdHJ1Y3RvcihlLHQsbixpKXtcbnRoaXMubGVuZ3RoPWUsdGhpcy5uYW1lPXQsdGhpcy5iaW5hcnk9bix0aGlzLmNvbHVtblR5cGVzPW5ldyBBcnJheShpKX19O2EoT3IsXCJDb1xcXG5weVJlc3BvbnNlXCIpO3ZhciBfcj1PcjtULkNvcHlSZXNwb25zZT1fcjt2YXIgTnI9Y2xhc3MgTnJ7Y29uc3RydWN0b3IoZSx0LG4saSxzLG8sdSl7XG50aGlzLm5hbWU9ZSx0aGlzLnRhYmxlSUQ9dCx0aGlzLmNvbHVtbklEPW4sdGhpcy5kYXRhVHlwZUlEPWksdGhpcy5kYXRhVHlwZVNpemU9cyxcbnRoaXMuZGF0YVR5cGVNb2RpZmllcj1vLHRoaXMuZm9ybWF0PXV9fTthKE5yLFwiRmllbGRcIik7dmFyIEFyPU5yO1QuRmllbGQ9QXI7dmFyIHFyPWNsYXNzIHFye2NvbnN0cnVjdG9yKGUsdCl7XG50aGlzLmxlbmd0aD1lLHRoaXMuZmllbGRDb3VudD10LHRoaXMubmFtZT1cInJvd0Rlc2NyaXB0aW9uXCIsdGhpcy5maWVsZHM9bmV3IEFycmF5KFxudGhpcy5maWVsZENvdW50KX19O2EocXIsXCJSb3dEZXNjcmlwdGlvbk1lc3NhZ2VcIik7dmFyIENyPXFyO1QuUm93RGVzY3JpcHRpb25NZXNzYWdlPVxuQ3I7dmFyIFFyPWNsYXNzIFFye2NvbnN0cnVjdG9yKGUsdCl7dGhpcy5sZW5ndGg9ZSx0aGlzLnBhcmFtZXRlckNvdW50PXQsdGhpcy5uYW1lPVxuXCJwYXJhbWV0ZXJEZXNjcmlwdGlvblwiLHRoaXMuZGF0YVR5cGVJRHM9bmV3IEFycmF5KHRoaXMucGFyYW1ldGVyQ291bnQpfX07YShRcixcIlBcXFxuYXJhbWV0ZXJEZXNjcmlwdGlvbk1lc3NhZ2VcIik7dmFyIFRyPVFyO1QuUGFyYW1ldGVyRGVzY3JpcHRpb25NZXNzYWdlPVRyO3ZhciBXcj1jbGFzcyBXcntjb25zdHJ1Y3RvcihlLHQsbil7XG50aGlzLmxlbmd0aD1lLHRoaXMucGFyYW1ldGVyTmFtZT10LHRoaXMucGFyYW1ldGVyVmFsdWU9bix0aGlzLm5hbWU9XCJwYXJhbWV0ZXJTdGFcXFxudHVzXCJ9fTthKFdyLFwiUGFyYW1ldGVyU3RhdHVzTWVzc2FnZVwiKTt2YXIgSXI9V3I7VC5QYXJhbWV0ZXJTdGF0dXNNZXNzYWdlPUlyO3ZhciBqcj1jbGFzcyBqcntjb25zdHJ1Y3RvcihlLHQpe1xudGhpcy5sZW5ndGg9ZSx0aGlzLnNhbHQ9dCx0aGlzLm5hbWU9XCJhdXRoZW50aWNhdGlvbk1ENVBhc3N3b3JkXCJ9fTthKGpyLFwiQXV0aGVudGlcXFxuY2F0aW9uTUQ1UGFzc3dvcmRcIik7dmFyIFByPWpyO1QuQXV0aGVudGljYXRpb25NRDVQYXNzd29yZD1Qcjt2YXIgSHI9Y2xhc3MgSHJ7Y29uc3RydWN0b3IoZSx0LG4pe1xudGhpcy5sZW5ndGg9ZSx0aGlzLnByb2Nlc3NJRD10LHRoaXMuc2VjcmV0S2V5PW4sdGhpcy5uYW1lPVwiYmFja2VuZEtleURhdGFcIn19O2EoSHIsXG5cIkJhY2tlbmRLZXlEYXRhTWVzc2FnZVwiKTt2YXIgQnI9SHI7VC5CYWNrZW5kS2V5RGF0YU1lc3NhZ2U9QnI7dmFyIEdyPWNsYXNzIEdye2NvbnN0cnVjdG9yKGUsdCxuLGkpe1xudGhpcy5sZW5ndGg9ZSx0aGlzLnByb2Nlc3NJZD10LHRoaXMuY2hhbm5lbD1uLHRoaXMucGF5bG9hZD1pLHRoaXMubmFtZT1cIm5vdGlmaWNhXFxcbnRpb25cIn19O2EoR3IsXCJOb3RpZmljYXRpb25SZXNwb25zZU1lc3NhZ2VcIik7dmFyIExyPUdyO1QuTm90aWZpY2F0aW9uUmVzcG9uc2VNZXNzYWdlPVxuTHI7dmFyICRyPWNsYXNzICRye2NvbnN0cnVjdG9yKGUsdCl7dGhpcy5sZW5ndGg9ZSx0aGlzLnN0YXR1cz10LHRoaXMubmFtZT1cInJlYWR5XFxcbkZvclF1ZXJ5XCJ9fTthKCRyLFwiUmVhZHlGb3JRdWVyeU1lc3NhZ2VcIik7dmFyIFJyPSRyO1QuUmVhZHlGb3JRdWVyeU1lc3NhZ2U9UnI7dmFyIFZyPWNsYXNzIFZye2NvbnN0cnVjdG9yKGUsdCl7XG50aGlzLmxlbmd0aD1lLHRoaXMudGV4dD10LHRoaXMubmFtZT1cImNvbW1hbmRDb21wbGV0ZVwifX07YShWcixcIkNvbW1hbmRDb21wbGV0ZU1lc1xcXG5zYWdlXCIpO3ZhciBGcj1WcjtULkNvbW1hbmRDb21wbGV0ZU1lc3NhZ2U9RnI7dmFyIEtyPWNsYXNzIEtye2NvbnN0cnVjdG9yKGUsdCl7dGhpcy5cbmxlbmd0aD1lLHRoaXMuZmllbGRzPXQsdGhpcy5uYW1lPVwiZGF0YVJvd1wiLHRoaXMuZmllbGRDb3VudD10Lmxlbmd0aH19O2EoS3IsXCJEYXRhXFxcblJvd01lc3NhZ2VcIik7dmFyIE1yPUtyO1QuRGF0YVJvd01lc3NhZ2U9TXI7dmFyIHpyPWNsYXNzIHpye2NvbnN0cnVjdG9yKGUsdCl7dGhpcy5cbmxlbmd0aD1lLHRoaXMubWVzc2FnZT10LHRoaXMubmFtZT1cIm5vdGljZVwifX07YSh6cixcIk5vdGljZU1lc3NhZ2VcIik7dmFyIERyPXpyO1QuTm90aWNlTWVzc2FnZT1cbkRyfSk7dmFyIG1zPUkoYnQ9PntcInVzZSBzdHJpY3RcIjtwKCk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGJ0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO1xuYnQuV3JpdGVyPXZvaWQgMDt2YXIgSnI9Y2xhc3MgSnJ7Y29uc3RydWN0b3IoZT0yNTYpe3RoaXMuc2l6ZT1lLHRoaXMub2Zmc2V0PTUsdGhpcy5cbmhlYWRlclBvc2l0aW9uPTAsdGhpcy5idWZmZXI9eS5hbGxvY1Vuc2FmZShlKX1lbnN1cmUoZSl7dmFyIHQ9dGhpcy5idWZmZXIubGVuZ3RoLVxudGhpcy5vZmZzZXQ7aWYodDxlKXt2YXIgbj10aGlzLmJ1ZmZlcixpPW4ubGVuZ3RoKyhuLmxlbmd0aD4+MSkrZTt0aGlzLmJ1ZmZlcj15LmFsbG9jVW5zYWZlKFxuaSksbi5jb3B5KHRoaXMuYnVmZmVyKX19YWRkSW50MzIoZSl7cmV0dXJuIHRoaXMuZW5zdXJlKDQpLHRoaXMuYnVmZmVyW3RoaXMub2Zmc2V0KytdPVxuZT4+PjI0JjI1NSx0aGlzLmJ1ZmZlclt0aGlzLm9mZnNldCsrXT1lPj4+MTYmMjU1LHRoaXMuYnVmZmVyW3RoaXMub2Zmc2V0KytdPWU+Pj5cbjgmMjU1LHRoaXMuYnVmZmVyW3RoaXMub2Zmc2V0KytdPWU+Pj4wJjI1NSx0aGlzfWFkZEludDE2KGUpe3JldHVybiB0aGlzLmVuc3VyZSgyKSxcbnRoaXMuYnVmZmVyW3RoaXMub2Zmc2V0KytdPWU+Pj44JjI1NSx0aGlzLmJ1ZmZlclt0aGlzLm9mZnNldCsrXT1lPj4+MCYyNTUsdGhpc31hZGRDU3RyaW5nKGUpe1xuaWYoIWUpdGhpcy5lbnN1cmUoMSk7ZWxzZXt2YXIgdD15LmJ5dGVMZW5ndGgoZSk7dGhpcy5lbnN1cmUodCsxKSx0aGlzLmJ1ZmZlci53cml0ZShcbmUsdGhpcy5vZmZzZXQsXCJ1dGYtOFwiKSx0aGlzLm9mZnNldCs9dH1yZXR1cm4gdGhpcy5idWZmZXJbdGhpcy5vZmZzZXQrK109MCx0aGlzfWFkZFN0cmluZyhlPVwiXCIpe1xudmFyIHQ9eS5ieXRlTGVuZ3RoKGUpO3JldHVybiB0aGlzLmVuc3VyZSh0KSx0aGlzLmJ1ZmZlci53cml0ZShlLHRoaXMub2Zmc2V0KSx0aGlzLlxub2Zmc2V0Kz10LHRoaXN9YWRkKGUpe3JldHVybiB0aGlzLmVuc3VyZShlLmxlbmd0aCksZS5jb3B5KHRoaXMuYnVmZmVyLHRoaXMub2Zmc2V0KSxcbnRoaXMub2Zmc2V0Kz1lLmxlbmd0aCx0aGlzfWpvaW4oZSl7aWYoZSl7dGhpcy5idWZmZXJbdGhpcy5oZWFkZXJQb3NpdGlvbl09ZTtsZXQgdD10aGlzLlxub2Zmc2V0LSh0aGlzLmhlYWRlclBvc2l0aW9uKzEpO3RoaXMuYnVmZmVyLndyaXRlSW50MzJCRSh0LHRoaXMuaGVhZGVyUG9zaXRpb24rMSl9XG5yZXR1cm4gdGhpcy5idWZmZXIuc2xpY2UoZT8wOjUsdGhpcy5vZmZzZXQpfWZsdXNoKGUpe3ZhciB0PXRoaXMuam9pbihlKTtyZXR1cm4gdGhpcy5cbm9mZnNldD01LHRoaXMuaGVhZGVyUG9zaXRpb249MCx0aGlzLmJ1ZmZlcj15LmFsbG9jVW5zYWZlKHRoaXMuc2l6ZSksdH19O2EoSnIsXCJXclxcXG5pdGVyXCIpO3ZhciBacj1KcjtidC5Xcml0ZXI9WnJ9KTt2YXIgd3M9SSh4dD0+e1widXNlIHN0cmljdFwiO3AoKTtPYmplY3QuZGVmaW5lUHJvcGVydHkoeHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7XG54dC5zZXJpYWxpemU9dm9pZCAwO3ZhciBYcj1tcygpLE09bmV3IFhyLldyaXRlcixEdT1hKHI9PntNLmFkZEludDE2KDMpLmFkZEludDE2KFxuMCk7Zm9yKGxldCBuIG9mIE9iamVjdC5rZXlzKHIpKU0uYWRkQ1N0cmluZyhuKS5hZGRDU3RyaW5nKHJbbl0pO00uYWRkQ1N0cmluZyhcImNsXFxcbmllbnRfZW5jb2RpbmdcIikuYWRkQ1N0cmluZyhcIlVURjhcIik7dmFyIGU9TS5hZGRDU3RyaW5nKFwiXCIpLmZsdXNoKCksdD1lLmxlbmd0aCs0O3JldHVybiBuZXcgWHIuXG5Xcml0ZXIoKS5hZGRJbnQzMih0KS5hZGQoZSkuZmx1c2goKX0sXCJzdGFydHVwXCIpLGt1PWEoKCk9PntsZXQgcj15LmFsbG9jVW5zYWZlKDgpO1xucmV0dXJuIHIud3JpdGVJbnQzMkJFKDgsMCksci53cml0ZUludDMyQkUoODA4NzcxMDMsNCkscn0sXCJyZXF1ZXN0U3NsXCIpLFV1PWEocj0+TS5cbmFkZENTdHJpbmcocikuZmx1c2goMTEyKSxcInBhc3N3b3JkXCIpLE91PWEoZnVuY3Rpb24ocixlKXtyZXR1cm4gTS5hZGRDU3RyaW5nKHIpLmFkZEludDMyKFxueS5ieXRlTGVuZ3RoKGUpKS5hZGRTdHJpbmcoZSksTS5mbHVzaCgxMTIpfSxcInNlbmRTQVNMSW5pdGlhbFJlc3BvbnNlTWVzc2FnZVwiKSxOdT1hKFxuZnVuY3Rpb24ocil7cmV0dXJuIE0uYWRkU3RyaW5nKHIpLmZsdXNoKDExMil9LFwic2VuZFNDUkFNQ2xpZW50RmluYWxNZXNzYWdlXCIpLHF1PWEoXG5yPT5NLmFkZENTdHJpbmcocikuZmx1c2goODEpLFwicXVlcnlcIiksZ3M9W10sUXU9YShyPT57bGV0IGU9ci5uYW1lfHxcIlwiO2UubGVuZ3RoPjYzJiZcbihjb25zb2xlLmVycm9yKFwiV2FybmluZyEgUG9zdGdyZXMgb25seSBzdXBwb3J0cyA2MyBjaGFyYWN0ZXJzIGZvciBxdWVyeSBuYW1lcy5cIiksXG5jb25zb2xlLmVycm9yKFwiWW91IHN1cHBsaWVkICVzICglcylcIixlLGUubGVuZ3RoKSxjb25zb2xlLmVycm9yKFwiVGhpcyBjYW4gY2F1c2UgY1xcXG5vbmZsaWN0cyBhbmQgc2lsZW50IGVycm9ycyBleGVjdXRpbmcgcXVlcmllc1wiKSk7bGV0IHQ9ci50eXBlc3x8Z3M7Zm9yKHZhciBuPXQubGVuZ3RoLFxuaT1NLmFkZENTdHJpbmcoZSkuYWRkQ1N0cmluZyhyLnRleHQpLmFkZEludDE2KG4pLHM9MDtzPG47cysrKWkuYWRkSW50MzIodFtzXSk7cmV0dXJuIE0uXG5mbHVzaCg4MCl9LFwicGFyc2VcIiksT2U9bmV3IFhyLldyaXRlcixXdT1hKGZ1bmN0aW9uKHIsZSl7Zm9yKGxldCB0PTA7dDxyLmxlbmd0aDt0Kyspe1xubGV0IG49ZT9lKHJbdF0sdCk6clt0XTtuPT1udWxsPyhNLmFkZEludDE2KDApLE9lLmFkZEludDMyKC0xKSk6biBpbnN0YW5jZW9mIHk/KE0uXG5hZGRJbnQxNigxKSxPZS5hZGRJbnQzMihuLmxlbmd0aCksT2UuYWRkKG4pKTooTS5hZGRJbnQxNigwKSxPZS5hZGRJbnQzMih5LmJ5dGVMZW5ndGgoXG5uKSksT2UuYWRkU3RyaW5nKG4pKX19LFwid3JpdGVWYWx1ZXNcIiksanU9YSgocj17fSk9PntsZXQgZT1yLnBvcnRhbHx8XCJcIix0PXIuc3RhdGVtZW50fHxcblwiXCIsbj1yLmJpbmFyeXx8ITEsaT1yLnZhbHVlc3x8Z3Mscz1pLmxlbmd0aDtyZXR1cm4gTS5hZGRDU3RyaW5nKGUpLmFkZENTdHJpbmcodCksXG5NLmFkZEludDE2KHMpLFd1KGksci52YWx1ZU1hcHBlciksTS5hZGRJbnQxNihzKSxNLmFkZChPZS5mbHVzaCgpKSxNLmFkZEludDE2KG4/MTpcbjApLE0uZmx1c2goNjYpfSxcImJpbmRcIiksSHU9eS5mcm9tKFs2OSwwLDAsMCw5LDAsMCwwLDAsMF0pLEd1PWEocj0+e2lmKCFyfHwhci5wb3J0YWwmJlxuIXIucm93cylyZXR1cm4gSHU7bGV0IGU9ci5wb3J0YWx8fFwiXCIsdD1yLnJvd3N8fDAsbj15LmJ5dGVMZW5ndGgoZSksaT00K24rMSs0LHM9eS5cbmFsbG9jVW5zYWZlKDEraSk7cmV0dXJuIHNbMF09Njkscy53cml0ZUludDMyQkUoaSwxKSxzLndyaXRlKGUsNSxcInV0Zi04XCIpLHNbbis1XT1cbjAscy53cml0ZVVJbnQzMkJFKHQscy5sZW5ndGgtNCksc30sXCJleGVjdXRlXCIpLCR1PWEoKHIsZSk9PntsZXQgdD15LmFsbG9jVW5zYWZlKDE2KTtcbnJldHVybiB0LndyaXRlSW50MzJCRSgxNiwwKSx0LndyaXRlSW50MTZCRSgxMjM0LDQpLHQud3JpdGVJbnQxNkJFKDU2NzgsNiksdC53cml0ZUludDMyQkUoXG5yLDgpLHQud3JpdGVJbnQzMkJFKGUsMTIpLHR9LFwiY2FuY2VsXCIpLGVuPWEoKHIsZSk9PntsZXQgbj00K3kuYnl0ZUxlbmd0aChlKSsxLGk9eS5cbmFsbG9jVW5zYWZlKDErbik7cmV0dXJuIGlbMF09cixpLndyaXRlSW50MzJCRShuLDEpLGkud3JpdGUoZSw1LFwidXRmLThcIiksaVtuXT0wLGl9LFxuXCJjc3RyaW5nTWVzc2FnZVwiKSxWdT1NLmFkZENTdHJpbmcoXCJQXCIpLmZsdXNoKDY4KSxLdT1NLmFkZENTdHJpbmcoXCJTXCIpLmZsdXNoKDY4KSxcbnp1PWEocj0+ci5uYW1lP2VuKDY4LGAke3IudHlwZX0ke3IubmFtZXx8XCJcIn1gKTpyLnR5cGU9PT1cIlBcIj9WdTpLdSxcImRlc2NyaWJlXCIpLFl1PWEoXG5yPT57bGV0IGU9YCR7ci50eXBlfSR7ci5uYW1lfHxcIlwifWA7cmV0dXJuIGVuKDY3LGUpfSxcImNsb3NlXCIpLFp1PWEocj0+TS5hZGQocikuZmx1c2goXG4xMDApLFwiY29weURhdGFcIiksSnU9YShyPT5lbigxMDIsciksXCJjb3B5RmFpbFwiKSxTdD1hKHI9PnkuZnJvbShbciwwLDAsMCw0XSksXCJjb2RlXFxcbk9ubHlCdWZmZXJcIiksWHU9U3QoNzIpLGVjPVN0KDgzKSx0Yz1TdCg4OCkscmM9U3QoOTkpLG5jPXtzdGFydHVwOkR1LHBhc3N3b3JkOlV1LFxucmVxdWVzdFNzbDprdSxzZW5kU0FTTEluaXRpYWxSZXNwb25zZU1lc3NhZ2U6T3Usc2VuZFNDUkFNQ2xpZW50RmluYWxNZXNzYWdlOk51LHF1ZXJ5OnF1LFxucGFyc2U6UXUsYmluZDpqdSxleGVjdXRlOkd1LGRlc2NyaWJlOnp1LGNsb3NlOll1LGZsdXNoOmEoKCk9Plh1LFwiZmx1c2hcIiksc3luYzphKFxuKCk9PmVjLFwic3luY1wiKSxlbmQ6YSgoKT0+dGMsXCJlbmRcIiksY29weURhdGE6WnUsY29weURvbmU6YSgoKT0+cmMsXCJjb3B5RG9uZVwiKSxjb3B5RmFpbDpKdSxcbmNhbmNlbDokdX07eHQuc2VyaWFsaXplPW5jfSk7dmFyIGJzPUkodnQ9PntcInVzZSBzdHJpY3RcIjtwKCk7T2JqZWN0LmRlZmluZVByb3BlcnR5KHZ0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO1xudnQuQnVmZmVyUmVhZGVyPXZvaWQgMDt2YXIgaWM9eS5hbGxvY1Vuc2FmZSgwKSxybj1jbGFzcyBybntjb25zdHJ1Y3RvcihlPTApe3RoaXMuXG5vZmZzZXQ9ZSx0aGlzLmJ1ZmZlcj1pYyx0aGlzLmVuY29kaW5nPVwidXRmLThcIn1zZXRCdWZmZXIoZSx0KXt0aGlzLm9mZnNldD1lLHRoaXMuXG5idWZmZXI9dH1pbnQxNigpe2xldCBlPXRoaXMuYnVmZmVyLnJlYWRJbnQxNkJFKHRoaXMub2Zmc2V0KTtyZXR1cm4gdGhpcy5vZmZzZXQrPVxuMixlfWJ5dGUoKXtsZXQgZT10aGlzLmJ1ZmZlclt0aGlzLm9mZnNldF07cmV0dXJuIHRoaXMub2Zmc2V0KyssZX1pbnQzMigpe2xldCBlPXRoaXMuXG5idWZmZXIucmVhZEludDMyQkUodGhpcy5vZmZzZXQpO3JldHVybiB0aGlzLm9mZnNldCs9NCxlfXN0cmluZyhlKXtsZXQgdD10aGlzLmJ1ZmZlci5cbnRvU3RyaW5nKHRoaXMuZW5jb2RpbmcsdGhpcy5vZmZzZXQsdGhpcy5vZmZzZXQrZSk7cmV0dXJuIHRoaXMub2Zmc2V0Kz1lLHR9Y3N0cmluZygpe1xubGV0IGU9dGhpcy5vZmZzZXQsdD1lO2Zvcig7dGhpcy5idWZmZXJbdCsrXSE9PTA7KTtyZXR1cm4gdGhpcy5vZmZzZXQ9dCx0aGlzLmJ1ZmZlci5cbnRvU3RyaW5nKHRoaXMuZW5jb2RpbmcsZSx0LTEpfWJ5dGVzKGUpe2xldCB0PXRoaXMuYnVmZmVyLnNsaWNlKHRoaXMub2Zmc2V0LHRoaXMuXG5vZmZzZXQrZSk7cmV0dXJuIHRoaXMub2Zmc2V0Kz1lLHR9fTthKHJuLFwiQnVmZmVyUmVhZGVyXCIpO3ZhciB0bj1ybjt2dC5CdWZmZXJSZWFkZXI9XG50bn0pO3ZhciB2cz1JKEV0PT57XCJ1c2Ugc3RyaWN0XCI7cCgpO09iamVjdC5kZWZpbmVQcm9wZXJ0eShFdCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTtcbkV0LlBhcnNlcj12b2lkIDA7dmFyIEQ9WXIoKSxzYz1icygpLG5uPTEsb2M9NCxTcz1ubitvYyx4cz15LmFsbG9jVW5zYWZlKDApLG9uPWNsYXNzIG9ue2NvbnN0cnVjdG9yKGUpe1xuaWYodGhpcy5idWZmZXI9eHMsdGhpcy5idWZmZXJMZW5ndGg9MCx0aGlzLmJ1ZmZlck9mZnNldD0wLHRoaXMucmVhZGVyPW5ldyBzYy5CdWZmZXJSZWFkZXIsXG5lPy5tb2RlPT09XCJiaW5hcnlcIil0aHJvdyBuZXcgRXJyb3IoXCJCaW5hcnkgbW9kZSBub3Qgc3VwcG9ydGVkIHlldFwiKTt0aGlzLm1vZGU9ZT8uXG5tb2RlfHxcInRleHRcIn1wYXJzZShlLHQpe3RoaXMubWVyZ2VCdWZmZXIoZSk7bGV0IG49dGhpcy5idWZmZXJPZmZzZXQrdGhpcy5idWZmZXJMZW5ndGgsXG5pPXRoaXMuYnVmZmVyT2Zmc2V0O2Zvcig7aStTczw9bjspe2xldCBzPXRoaXMuYnVmZmVyW2ldLG89dGhpcy5idWZmZXIucmVhZFVJbnQzMkJFKFxuaStubiksdT1ubitvO2lmKHUraTw9bil7bGV0IGM9dGhpcy5oYW5kbGVQYWNrZXQoaStTcyxzLG8sdGhpcy5idWZmZXIpO3QoYyksaSs9dX1lbHNlXG5icmVha31pPT09bj8odGhpcy5idWZmZXI9eHMsdGhpcy5idWZmZXJMZW5ndGg9MCx0aGlzLmJ1ZmZlck9mZnNldD0wKToodGhpcy5idWZmZXJMZW5ndGg9XG5uLWksdGhpcy5idWZmZXJPZmZzZXQ9aSl9bWVyZ2VCdWZmZXIoZSl7aWYodGhpcy5idWZmZXJMZW5ndGg+MCl7bGV0IHQ9dGhpcy5idWZmZXJMZW5ndGgrXG5lLmJ5dGVMZW5ndGg7aWYodCt0aGlzLmJ1ZmZlck9mZnNldD50aGlzLmJ1ZmZlci5ieXRlTGVuZ3RoKXtsZXQgaTtpZih0PD10aGlzLmJ1ZmZlci5cbmJ5dGVMZW5ndGgmJnRoaXMuYnVmZmVyT2Zmc2V0Pj10aGlzLmJ1ZmZlckxlbmd0aClpPXRoaXMuYnVmZmVyO2Vsc2V7bGV0IHM9dGhpcy5idWZmZXIuXG5ieXRlTGVuZ3RoKjI7Zm9yKDt0Pj1zOylzKj0yO2k9eS5hbGxvY1Vuc2FmZShzKX10aGlzLmJ1ZmZlci5jb3B5KGksMCx0aGlzLmJ1ZmZlck9mZnNldCxcbnRoaXMuYnVmZmVyT2Zmc2V0K3RoaXMuYnVmZmVyTGVuZ3RoKSx0aGlzLmJ1ZmZlcj1pLHRoaXMuYnVmZmVyT2Zmc2V0PTB9ZS5jb3B5KHRoaXMuXG5idWZmZXIsdGhpcy5idWZmZXJPZmZzZXQrdGhpcy5idWZmZXJMZW5ndGgpLHRoaXMuYnVmZmVyTGVuZ3RoPXR9ZWxzZSB0aGlzLmJ1ZmZlcj1cbmUsdGhpcy5idWZmZXJPZmZzZXQ9MCx0aGlzLmJ1ZmZlckxlbmd0aD1lLmJ5dGVMZW5ndGh9aGFuZGxlUGFja2V0KGUsdCxuLGkpe3N3aXRjaCh0KXtjYXNlIDUwOlxucmV0dXJuIEQuYmluZENvbXBsZXRlO2Nhc2UgNDk6cmV0dXJuIEQucGFyc2VDb21wbGV0ZTtjYXNlIDUxOnJldHVybiBELmNsb3NlQ29tcGxldGU7Y2FzZSAxMTA6XG5yZXR1cm4gRC5ub0RhdGE7Y2FzZSAxMTU6cmV0dXJuIEQucG9ydGFsU3VzcGVuZGVkO2Nhc2UgOTk6cmV0dXJuIEQuY29weURvbmU7Y2FzZSA4NzpcbnJldHVybiBELnJlcGxpY2F0aW9uU3RhcnQ7Y2FzZSA3MzpyZXR1cm4gRC5lbXB0eVF1ZXJ5O2Nhc2UgNjg6cmV0dXJuIHRoaXMucGFyc2VEYXRhUm93TWVzc2FnZShcbmUsbixpKTtjYXNlIDY3OnJldHVybiB0aGlzLnBhcnNlQ29tbWFuZENvbXBsZXRlTWVzc2FnZShlLG4saSk7Y2FzZSA5MDpyZXR1cm4gdGhpcy5cbnBhcnNlUmVhZHlGb3JRdWVyeU1lc3NhZ2UoZSxuLGkpO2Nhc2UgNjU6cmV0dXJuIHRoaXMucGFyc2VOb3RpZmljYXRpb25NZXNzYWdlKGUsXG5uLGkpO2Nhc2UgODI6cmV0dXJuIHRoaXMucGFyc2VBdXRoZW50aWNhdGlvblJlc3BvbnNlKGUsbixpKTtjYXNlIDgzOnJldHVybiB0aGlzLlxucGFyc2VQYXJhbWV0ZXJTdGF0dXNNZXNzYWdlKGUsbixpKTtjYXNlIDc1OnJldHVybiB0aGlzLnBhcnNlQmFja2VuZEtleURhdGEoZSxuLGkpO2Nhc2UgNjk6XG5yZXR1cm4gdGhpcy5wYXJzZUVycm9yTWVzc2FnZShlLG4saSxcImVycm9yXCIpO2Nhc2UgNzg6cmV0dXJuIHRoaXMucGFyc2VFcnJvck1lc3NhZ2UoXG5lLG4saSxcIm5vdGljZVwiKTtjYXNlIDg0OnJldHVybiB0aGlzLnBhcnNlUm93RGVzY3JpcHRpb25NZXNzYWdlKGUsbixpKTtjYXNlIDExNjpyZXR1cm4gdGhpcy5cbnBhcnNlUGFyYW1ldGVyRGVzY3JpcHRpb25NZXNzYWdlKGUsbixpKTtjYXNlIDcxOnJldHVybiB0aGlzLnBhcnNlQ29weUluTWVzc2FnZShlLFxubixpKTtjYXNlIDcyOnJldHVybiB0aGlzLnBhcnNlQ29weU91dE1lc3NhZ2UoZSxuLGkpO2Nhc2UgMTAwOnJldHVybiB0aGlzLnBhcnNlQ29weURhdGEoXG5lLG4saSk7ZGVmYXVsdDpyZXR1cm4gbmV3IEQuRGF0YWJhc2VFcnJvcihcInJlY2VpdmVkIGludmFsaWQgcmVzcG9uc2U6IFwiK3QudG9TdHJpbmcoXG4xNiksbixcImVycm9yXCIpfX1wYXJzZVJlYWR5Rm9yUXVlcnlNZXNzYWdlKGUsdCxuKXt0aGlzLnJlYWRlci5zZXRCdWZmZXIoZSxuKTtsZXQgaT10aGlzLlxucmVhZGVyLnN0cmluZygxKTtyZXR1cm4gbmV3IEQuUmVhZHlGb3JRdWVyeU1lc3NhZ2UodCxpKX1wYXJzZUNvbW1hbmRDb21wbGV0ZU1lc3NhZ2UoZSx0LG4pe1xudGhpcy5yZWFkZXIuc2V0QnVmZmVyKGUsbik7bGV0IGk9dGhpcy5yZWFkZXIuY3N0cmluZygpO3JldHVybiBuZXcgRC5Db21tYW5kQ29tcGxldGVNZXNzYWdlKFxudCxpKX1wYXJzZUNvcHlEYXRhKGUsdCxuKXtsZXQgaT1uLnNsaWNlKGUsZSsodC00KSk7cmV0dXJuIG5ldyBELkNvcHlEYXRhTWVzc2FnZShcbnQsaSl9cGFyc2VDb3B5SW5NZXNzYWdlKGUsdCxuKXtyZXR1cm4gdGhpcy5wYXJzZUNvcHlNZXNzYWdlKGUsdCxuLFwiY29weUluUmVzcG9uc1xcXG5lXCIpfXBhcnNlQ29weU91dE1lc3NhZ2UoZSx0LG4pe3JldHVybiB0aGlzLnBhcnNlQ29weU1lc3NhZ2UoZSx0LG4sXCJjb3B5T3V0UmVzcG9uXFxcbnNlXCIpfXBhcnNlQ29weU1lc3NhZ2UoZSx0LG4saSl7dGhpcy5yZWFkZXIuc2V0QnVmZmVyKGUsbik7bGV0IHM9dGhpcy5yZWFkZXIuYnl0ZSgpIT09XG4wLG89dGhpcy5yZWFkZXIuaW50MTYoKSx1PW5ldyBELkNvcHlSZXNwb25zZSh0LGkscyxvKTtmb3IobGV0IGM9MDtjPG87YysrKXUuY29sdW1uVHlwZXNbY109XG50aGlzLnJlYWRlci5pbnQxNigpO3JldHVybiB1fXBhcnNlTm90aWZpY2F0aW9uTWVzc2FnZShlLHQsbil7dGhpcy5yZWFkZXIuc2V0QnVmZmVyKFxuZSxuKTtsZXQgaT10aGlzLnJlYWRlci5pbnQzMigpLHM9dGhpcy5yZWFkZXIuY3N0cmluZygpLG89dGhpcy5yZWFkZXIuY3N0cmluZygpO3JldHVybiBuZXcgRC5cbk5vdGlmaWNhdGlvblJlc3BvbnNlTWVzc2FnZSh0LGkscyxvKX1wYXJzZVJvd0Rlc2NyaXB0aW9uTWVzc2FnZShlLHQsbil7dGhpcy5yZWFkZXIuXG5zZXRCdWZmZXIoZSxuKTtsZXQgaT10aGlzLnJlYWRlci5pbnQxNigpLHM9bmV3IEQuUm93RGVzY3JpcHRpb25NZXNzYWdlKHQsaSk7Zm9yKGxldCBvPTA7bzxcbmk7bysrKXMuZmllbGRzW29dPXRoaXMucGFyc2VGaWVsZCgpO3JldHVybiBzfXBhcnNlRmllbGQoKXtsZXQgZT10aGlzLnJlYWRlci5jc3RyaW5nKCksXG50PXRoaXMucmVhZGVyLmludDMyKCksbj10aGlzLnJlYWRlci5pbnQxNigpLGk9dGhpcy5yZWFkZXIuaW50MzIoKSxzPXRoaXMucmVhZGVyLlxuaW50MTYoKSxvPXRoaXMucmVhZGVyLmludDMyKCksdT10aGlzLnJlYWRlci5pbnQxNigpPT09MD9cInRleHRcIjpcImJpbmFyeVwiO3JldHVybiBuZXcgRC5cbkZpZWxkKGUsdCxuLGkscyxvLHUpfXBhcnNlUGFyYW1ldGVyRGVzY3JpcHRpb25NZXNzYWdlKGUsdCxuKXt0aGlzLnJlYWRlci5zZXRCdWZmZXIoXG5lLG4pO2xldCBpPXRoaXMucmVhZGVyLmludDE2KCkscz1uZXcgRC5QYXJhbWV0ZXJEZXNjcmlwdGlvbk1lc3NhZ2UodCxpKTtmb3IobGV0IG89MDtvPFxuaTtvKyspcy5kYXRhVHlwZUlEc1tvXT10aGlzLnJlYWRlci5pbnQzMigpO3JldHVybiBzfXBhcnNlRGF0YVJvd01lc3NhZ2UoZSx0LG4pe3RoaXMuXG5yZWFkZXIuc2V0QnVmZmVyKGUsbik7bGV0IGk9dGhpcy5yZWFkZXIuaW50MTYoKSxzPW5ldyBBcnJheShpKTtmb3IobGV0IG89MDtvPGk7bysrKXtcbmxldCB1PXRoaXMucmVhZGVyLmludDMyKCk7c1tvXT11PT09LTE/bnVsbDp0aGlzLnJlYWRlci5zdHJpbmcodSl9cmV0dXJuIG5ldyBELkRhdGFSb3dNZXNzYWdlKFxudCxzKX1wYXJzZVBhcmFtZXRlclN0YXR1c01lc3NhZ2UoZSx0LG4pe3RoaXMucmVhZGVyLnNldEJ1ZmZlcihlLG4pO2xldCBpPXRoaXMucmVhZGVyLlxuY3N0cmluZygpLHM9dGhpcy5yZWFkZXIuY3N0cmluZygpO3JldHVybiBuZXcgRC5QYXJhbWV0ZXJTdGF0dXNNZXNzYWdlKHQsaSxzKX1wYXJzZUJhY2tlbmRLZXlEYXRhKGUsdCxuKXtcbnRoaXMucmVhZGVyLnNldEJ1ZmZlcihlLG4pO2xldCBpPXRoaXMucmVhZGVyLmludDMyKCkscz10aGlzLnJlYWRlci5pbnQzMigpO3JldHVybiBuZXcgRC5cbkJhY2tlbmRLZXlEYXRhTWVzc2FnZSh0LGkscyl9cGFyc2VBdXRoZW50aWNhdGlvblJlc3BvbnNlKGUsdCxuKXt0aGlzLnJlYWRlci5zZXRCdWZmZXIoXG5lLG4pO2xldCBpPXRoaXMucmVhZGVyLmludDMyKCkscz17bmFtZTpcImF1dGhlbnRpY2F0aW9uT2tcIixsZW5ndGg6dH07c3dpdGNoKGkpe2Nhc2UgMDpcbmJyZWFrO2Nhc2UgMzpzLmxlbmd0aD09PTgmJihzLm5hbWU9XCJhdXRoZW50aWNhdGlvbkNsZWFydGV4dFBhc3N3b3JkXCIpO2JyZWFrO2Nhc2UgNTpcbmlmKHMubGVuZ3RoPT09MTIpe3MubmFtZT1cImF1dGhlbnRpY2F0aW9uTUQ1UGFzc3dvcmRcIjtsZXQgdT10aGlzLnJlYWRlci5ieXRlcyg0KTtcbnJldHVybiBuZXcgRC5BdXRoZW50aWNhdGlvbk1ENVBhc3N3b3JkKHQsdSl9YnJlYWs7Y2FzZSAxMDpzLm5hbWU9XCJhdXRoZW50aWNhdGlvblxcXG5TQVNMXCIscy5tZWNoYW5pc21zPVtdO2xldCBvO2RvIG89dGhpcy5yZWFkZXIuY3N0cmluZygpLG8mJnMubWVjaGFuaXNtcy5wdXNoKG8pO3doaWxlKG8pO1xuYnJlYWs7Y2FzZSAxMTpzLm5hbWU9XCJhdXRoZW50aWNhdGlvblNBU0xDb250aW51ZVwiLHMuZGF0YT10aGlzLnJlYWRlci5zdHJpbmcodC04KTtcbmJyZWFrO2Nhc2UgMTI6cy5uYW1lPVwiYXV0aGVudGljYXRpb25TQVNMRmluYWxcIixzLmRhdGE9dGhpcy5yZWFkZXIuc3RyaW5nKHQtOCk7YnJlYWs7ZGVmYXVsdDpcbnRocm93IG5ldyBFcnJvcihcIlVua25vd24gYXV0aGVudGljYXRpb25PayBtZXNzYWdlIHR5cGUgXCIraSl9cmV0dXJuIHN9cGFyc2VFcnJvck1lc3NhZ2UoZSx0LG4saSl7XG50aGlzLnJlYWRlci5zZXRCdWZmZXIoZSxuKTtsZXQgcz17fSxvPXRoaXMucmVhZGVyLnN0cmluZygxKTtmb3IoO28hPT1cIlxcMFwiOylzW29dPVxudGhpcy5yZWFkZXIuY3N0cmluZygpLG89dGhpcy5yZWFkZXIuc3RyaW5nKDEpO2xldCB1PXMuTSxjPWk9PT1cIm5vdGljZVwiP25ldyBELk5vdGljZU1lc3NhZ2UoXG50LHUpOm5ldyBELkRhdGFiYXNlRXJyb3IodSx0LGkpO3JldHVybiBjLnNldmVyaXR5PXMuUyxjLmNvZGU9cy5DLGMuZGV0YWlsPXMuRCxjLlxuaGludD1zLkgsYy5wb3NpdGlvbj1zLlAsYy5pbnRlcm5hbFBvc2l0aW9uPXMucCxjLmludGVybmFsUXVlcnk9cy5xLGMud2hlcmU9cy5XLGMuXG5zY2hlbWE9cy5zLGMudGFibGU9cy50LGMuY29sdW1uPXMuYyxjLmRhdGFUeXBlPXMuZCxjLmNvbnN0cmFpbnQ9cy5uLGMuZmlsZT1zLkYsYy5cbmxpbmU9cy5MLGMucm91dGluZT1zLlIsY319O2Eob24sXCJQYXJzZXJcIik7dmFyIHNuPW9uO0V0LlBhcnNlcj1zbn0pO3ZhciBhbj1JKFNlPT57XCJ1c2Ugc3RyaWN0XCI7cCgpO09iamVjdC5kZWZpbmVQcm9wZXJ0eShTZSxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTtcblNlLkRhdGFiYXNlRXJyb3I9U2Uuc2VyaWFsaXplPVNlLnBhcnNlPXZvaWQgMDt2YXIgYWM9WXIoKTtPYmplY3QuZGVmaW5lUHJvcGVydHkoXG5TZSxcIkRhdGFiYXNlRXJyb3JcIix7ZW51bWVyYWJsZTohMCxnZXQ6YShmdW5jdGlvbigpe3JldHVybiBhYy5EYXRhYmFzZUVycm9yfSxcImdldFwiKX0pO1xudmFyIHVjPXdzKCk7T2JqZWN0LmRlZmluZVByb3BlcnR5KFNlLFwic2VyaWFsaXplXCIse2VudW1lcmFibGU6ITAsZ2V0OmEoZnVuY3Rpb24oKXtcbnJldHVybiB1Yy5zZXJpYWxpemV9LFwiZ2V0XCIpfSk7dmFyIGNjPXZzKCk7ZnVuY3Rpb24gaGMocixlKXtsZXQgdD1uZXcgY2MuUGFyc2VyO3JldHVybiByLlxub24oXCJkYXRhXCIsbj0+dC5wYXJzZShuLGUpKSxuZXcgUHJvbWlzZShuPT5yLm9uKFwiZW5kXCIsKCk9Pm4oKSkpfWEoaGMsXCJwYXJzZVwiKTtTZS5cbnBhcnNlPWhjfSk7dmFyIEVzPXt9O2llKEVzLHtjb25uZWN0OigpPT5sY30pO2Z1bmN0aW9uIGxjKHtzb2NrZXQ6cixzZXJ2ZXJuYW1lOmV9KXtyZXR1cm4gci5cbnN0YXJ0VGxzKGUpLHJ9dmFyIF9zPXooKCk9PntcInVzZSBzdHJpY3RcIjtwKCk7YShsYyxcImNvbm5lY3RcIil9KTt2YXIgaG49SSgodGYsVHMpPT57XCJ1c2Ugc3RyaWN0XCI7cCgpO3ZhciBBcz0od3QoKSxOKHlzKSksZmM9d2UoKS5FdmVudEVtaXR0ZXIse3BhcnNlOnBjLFxuc2VyaWFsaXplOlF9PWFuKCksQ3M9US5mbHVzaCgpLGRjPVEuc3luYygpLHljPVEuZW5kKCksY249Y2xhc3MgY24gZXh0ZW5kcyBmY3tjb25zdHJ1Y3RvcihlKXtcbnN1cGVyKCksZT1lfHx7fSx0aGlzLnN0cmVhbT1lLnN0cmVhbXx8bmV3IEFzLlNvY2tldCx0aGlzLl9rZWVwQWxpdmU9ZS5rZWVwQWxpdmUsXG50aGlzLl9rZWVwQWxpdmVJbml0aWFsRGVsYXlNaWxsaXM9ZS5rZWVwQWxpdmVJbml0aWFsRGVsYXlNaWxsaXMsdGhpcy5sYXN0QnVmZmVyPVxuITEsdGhpcy5wYXJzZWRTdGF0ZW1lbnRzPXt9LHRoaXMuc3NsPWUuc3NsfHwhMSx0aGlzLl9lbmRpbmc9ITEsdGhpcy5fZW1pdE1lc3NhZ2U9XG4hMTt2YXIgdD10aGlzO3RoaXMub24oXCJuZXdMaXN0ZW5lclwiLGZ1bmN0aW9uKG4pe249PT1cIm1lc3NhZ2VcIiYmKHQuX2VtaXRNZXNzYWdlPSEwKX0pfWNvbm5lY3QoZSx0KXtcbnZhciBuPXRoaXM7dGhpcy5fY29ubmVjdGluZz0hMCx0aGlzLnN0cmVhbS5zZXROb0RlbGF5KCEwKSx0aGlzLnN0cmVhbS5jb25uZWN0KGUsXG50KSx0aGlzLnN0cmVhbS5vbmNlKFwiY29ubmVjdFwiLGZ1bmN0aW9uKCl7bi5fa2VlcEFsaXZlJiZuLnN0cmVhbS5zZXRLZWVwQWxpdmUoITAsXG5uLl9rZWVwQWxpdmVJbml0aWFsRGVsYXlNaWxsaXMpLG4uZW1pdChcImNvbm5lY3RcIil9KTtsZXQgaT1hKGZ1bmN0aW9uKHMpe24uX2VuZGluZyYmXG4ocy5jb2RlPT09XCJFQ09OTlJFU0VUXCJ8fHMuY29kZT09PVwiRVBJUEVcIil8fG4uZW1pdChcImVycm9yXCIscyl9LFwicmVwb3J0U3RyZWFtRXJyb3JcIik7XG5pZih0aGlzLnN0cmVhbS5vbihcImVycm9yXCIsaSksdGhpcy5zdHJlYW0ub24oXCJjbG9zZVwiLGZ1bmN0aW9uKCl7bi5lbWl0KFwiZW5kXCIpfSksIXRoaXMuXG5zc2wpcmV0dXJuIHRoaXMuYXR0YWNoTGlzdGVuZXJzKHRoaXMuc3RyZWFtKTt0aGlzLnN0cmVhbS5vbmNlKFwiZGF0YVwiLGZ1bmN0aW9uKHMpe1xudmFyIG89cy50b1N0cmluZyhcInV0ZjhcIik7c3dpdGNoKG8pe2Nhc2VcIlNcIjpicmVhaztjYXNlXCJOXCI6cmV0dXJuIG4uc3RyZWFtLmVuZCgpLG4uXG5lbWl0KFwiZXJyb3JcIixuZXcgRXJyb3IoXCJUaGUgc2VydmVyIGRvZXMgbm90IHN1cHBvcnQgU1NMIGNvbm5lY3Rpb25zXCIpKTtkZWZhdWx0OnJldHVybiBuLlxuc3RyZWFtLmVuZCgpLG4uZW1pdChcImVycm9yXCIsbmV3IEVycm9yKFwiVGhlcmUgd2FzIGFuIGVycm9yIGVzdGFibGlzaGluZyBhbiBTU0wgY29cXFxubm5lY3Rpb25cIikpfXZhciB1PShfcygpLE4oRXMpKTtsZXQgYz17c29ja2V0Om4uc3RyZWFtfTtuLnNzbCE9PSEwJiYoT2JqZWN0LmFzc2lnbihcbmMsbi5zc2wpLFwia2V5XCJpbiBuLnNzbCYmKGMua2V5PW4uc3NsLmtleSkpLEFzLmlzSVAodCk9PT0wJiYoYy5zZXJ2ZXJuYW1lPXQpO3RyeXtcbm4uc3RyZWFtPXUuY29ubmVjdChjKX1jYXRjaChoKXtyZXR1cm4gbi5lbWl0KFwiZXJyb3JcIixoKX1uLmF0dGFjaExpc3RlbmVycyhuLnN0cmVhbSksXG5uLnN0cmVhbS5vbihcImVycm9yXCIsaSksbi5lbWl0KFwic3NsY29ubmVjdFwiKX0pfWF0dGFjaExpc3RlbmVycyhlKXtlLm9uKFwiZW5kXCIsKCk9PntcbnRoaXMuZW1pdChcImVuZFwiKX0pLHBjKGUsdD0+e3ZhciBuPXQubmFtZT09PVwiZXJyb3JcIj9cImVycm9yTWVzc2FnZVwiOnQubmFtZTt0aGlzLl9lbWl0TWVzc2FnZSYmXG50aGlzLmVtaXQoXCJtZXNzYWdlXCIsdCksdGhpcy5lbWl0KG4sdCl9KX1yZXF1ZXN0U3NsKCl7dGhpcy5zdHJlYW0ud3JpdGUoUS5yZXF1ZXN0U3NsKCkpfXN0YXJ0dXAoZSl7XG50aGlzLnN0cmVhbS53cml0ZShRLnN0YXJ0dXAoZSkpfWNhbmNlbChlLHQpe3RoaXMuX3NlbmQoUS5jYW5jZWwoZSx0KSl9cGFzc3dvcmQoZSl7XG50aGlzLl9zZW5kKFEucGFzc3dvcmQoZSkpfXNlbmRTQVNMSW5pdGlhbFJlc3BvbnNlTWVzc2FnZShlLHQpe3RoaXMuX3NlbmQoUS5zZW5kU0FTTEluaXRpYWxSZXNwb25zZU1lc3NhZ2UoXG5lLHQpKX1zZW5kU0NSQU1DbGllbnRGaW5hbE1lc3NhZ2UoZSl7dGhpcy5fc2VuZChRLnNlbmRTQ1JBTUNsaWVudEZpbmFsTWVzc2FnZShlKSl9X3NlbmQoZSl7XG5yZXR1cm4gdGhpcy5zdHJlYW0ud3JpdGFibGU/dGhpcy5zdHJlYW0ud3JpdGUoZSk6ITF9cXVlcnkoZSl7dGhpcy5fc2VuZChRLnF1ZXJ5KFxuZSkpfXBhcnNlKGUpe3RoaXMuX3NlbmQoUS5wYXJzZShlKSl9YmluZChlKXt0aGlzLl9zZW5kKFEuYmluZChlKSl9ZXhlY3V0ZShlKXt0aGlzLlxuX3NlbmQoUS5leGVjdXRlKGUpKX1mbHVzaCgpe3RoaXMuc3RyZWFtLndyaXRhYmxlJiZ0aGlzLnN0cmVhbS53cml0ZShDcyl9c3luYygpe3RoaXMuXG5fZW5kaW5nPSEwLHRoaXMuX3NlbmQoQ3MpLHRoaXMuX3NlbmQoZGMpfXJlZigpe3RoaXMuc3RyZWFtLnJlZigpfXVucmVmKCl7dGhpcy5zdHJlYW0uXG51bnJlZigpfWVuZCgpe2lmKHRoaXMuX2VuZGluZz0hMCwhdGhpcy5fY29ubmVjdGluZ3x8IXRoaXMuc3RyZWFtLndyaXRhYmxlKXt0aGlzLlxuc3RyZWFtLmVuZCgpO3JldHVybn1yZXR1cm4gdGhpcy5zdHJlYW0ud3JpdGUoeWMsKCk9Pnt0aGlzLnN0cmVhbS5lbmQoKX0pfWNsb3NlKGUpe1xudGhpcy5fc2VuZChRLmNsb3NlKGUpKX1kZXNjcmliZShlKXt0aGlzLl9zZW5kKFEuZGVzY3JpYmUoZSkpfXNlbmRDb3B5RnJvbUNodW5rKGUpe1xudGhpcy5fc2VuZChRLmNvcHlEYXRhKGUpKX1lbmRDb3B5RnJvbSgpe3RoaXMuX3NlbmQoUS5jb3B5RG9uZSgpKX1zZW5kQ29weUZhaWwoZSl7XG50aGlzLl9zZW5kKFEuY29weUZhaWwoZSkpfX07YShjbixcIkNvbm5lY3Rpb25cIik7dmFyIHVuPWNuO1RzLmV4cG9ydHM9dW59KTt2YXIgQnM9SSgob2YsUHMpPT57XCJ1c2Ugc3RyaWN0XCI7cCgpO3ZhciBtYz13ZSgpLkV2ZW50RW1pdHRlcixzZj0oSGUoKSxOKGplKSksZ2M9ZXQoKSxcbmxuPXFpKCksd2M9WmkoKSxiYz1tdCgpLFNjPWd0KCksSXM9cHMoKSx4Yz1YZSgpLHZjPWhuKCksZm49Y2xhc3MgZm4gZXh0ZW5kcyBtY3tjb25zdHJ1Y3RvcihlKXtcbnN1cGVyKCksdGhpcy5jb25uZWN0aW9uUGFyYW1ldGVycz1uZXcgU2MoZSksdGhpcy51c2VyPXRoaXMuY29ubmVjdGlvblBhcmFtZXRlcnMuXG51c2VyLHRoaXMuZGF0YWJhc2U9dGhpcy5jb25uZWN0aW9uUGFyYW1ldGVycy5kYXRhYmFzZSx0aGlzLnBvcnQ9dGhpcy5jb25uZWN0aW9uUGFyYW1ldGVycy5cbnBvcnQsdGhpcy5ob3N0PXRoaXMuY29ubmVjdGlvblBhcmFtZXRlcnMuaG9zdCxPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcyxcInBhc3N3b1xcXG5yZFwiLHtjb25maWd1cmFibGU6ITAsZW51bWVyYWJsZTohMSx3cml0YWJsZTohMCx2YWx1ZTp0aGlzLmNvbm5lY3Rpb25QYXJhbWV0ZXJzLnBhc3N3b3JkfSksXG50aGlzLnJlcGxpY2F0aW9uPXRoaXMuY29ubmVjdGlvblBhcmFtZXRlcnMucmVwbGljYXRpb247dmFyIHQ9ZXx8e307dGhpcy5fUHJvbWlzZT1cbnQuUHJvbWlzZXx8Uy5Qcm9taXNlLHRoaXMuX3R5cGVzPW5ldyBiYyh0LnR5cGVzKSx0aGlzLl9lbmRpbmc9ITEsdGhpcy5fY29ubmVjdGluZz1cbiExLHRoaXMuX2Nvbm5lY3RlZD0hMSx0aGlzLl9jb25uZWN0aW9uRXJyb3I9ITEsdGhpcy5fcXVlcnlhYmxlPSEwLHRoaXMuY29ubmVjdGlvbj1cbnQuY29ubmVjdGlvbnx8bmV3IHZjKHtzdHJlYW06dC5zdHJlYW0sc3NsOnRoaXMuY29ubmVjdGlvblBhcmFtZXRlcnMuc3NsLGtlZXBBbGl2ZTp0Llxua2VlcEFsaXZlfHwhMSxrZWVwQWxpdmVJbml0aWFsRGVsYXlNaWxsaXM6dC5rZWVwQWxpdmVJbml0aWFsRGVsYXlNaWxsaXN8fDAsZW5jb2Rpbmc6dGhpcy5cbmNvbm5lY3Rpb25QYXJhbWV0ZXJzLmNsaWVudF9lbmNvZGluZ3x8XCJ1dGY4XCJ9KSx0aGlzLnF1ZXJ5UXVldWU9W10sdGhpcy5iaW5hcnk9dC5cbmJpbmFyeXx8eGMuYmluYXJ5LHRoaXMucHJvY2Vzc0lEPW51bGwsdGhpcy5zZWNyZXRLZXk9bnVsbCx0aGlzLnNzbD10aGlzLmNvbm5lY3Rpb25QYXJhbWV0ZXJzLlxuc3NsfHwhMSx0aGlzLnNzbCYmdGhpcy5zc2wua2V5JiZPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcy5zc2wsXCJrZXlcIix7ZW51bWVyYWJsZTohMX0pLFxudGhpcy5fY29ubmVjdGlvblRpbWVvdXRNaWxsaXM9dC5jb25uZWN0aW9uVGltZW91dE1pbGxpc3x8MH1fZXJyb3JBbGxRdWVyaWVzKGUpe2xldCB0PWEoXG5uPT57bS5uZXh0VGljaygoKT0+e24uaGFuZGxlRXJyb3IoZSx0aGlzLmNvbm5lY3Rpb24pfSl9LFwiZW5xdWV1ZUVycm9yXCIpO3RoaXMuYWN0aXZlUXVlcnkmJlxuKHQodGhpcy5hY3RpdmVRdWVyeSksdGhpcy5hY3RpdmVRdWVyeT1udWxsKSx0aGlzLnF1ZXJ5UXVldWUuZm9yRWFjaCh0KSx0aGlzLnF1ZXJ5UXVldWUuXG5sZW5ndGg9MH1fY29ubmVjdChlKXt2YXIgdD10aGlzLG49dGhpcy5jb25uZWN0aW9uO2lmKHRoaXMuX2Nvbm5lY3Rpb25DYWxsYmFjaz1lLFxudGhpcy5fY29ubmVjdGluZ3x8dGhpcy5fY29ubmVjdGVkKXtsZXQgaT1uZXcgRXJyb3IoXCJDbGllbnQgaGFzIGFscmVhZHkgYmVlbiBjb25uXFxcbmVjdGVkLiBZb3UgY2Fubm90IHJldXNlIGEgY2xpZW50LlwiKTttLm5leHRUaWNrKCgpPT57ZShpKX0pO3JldHVybn10aGlzLl9jb25uZWN0aW5nPVxuITAsdGhpcy5jb25uZWN0aW9uVGltZW91dEhhbmRsZSx0aGlzLl9jb25uZWN0aW9uVGltZW91dE1pbGxpcz4wJiYodGhpcy5jb25uZWN0aW9uVGltZW91dEhhbmRsZT1cbnNldFRpbWVvdXQoKCk9PntuLl9lbmRpbmc9ITAsbi5zdHJlYW0uZGVzdHJveShuZXcgRXJyb3IoXCJ0aW1lb3V0IGV4cGlyZWRcIikpfSx0aGlzLlxuX2Nvbm5lY3Rpb25UaW1lb3V0TWlsbGlzKSksdGhpcy5ob3N0JiZ0aGlzLmhvc3QuaW5kZXhPZihcIi9cIik9PT0wP24uY29ubmVjdCh0aGlzLlxuaG9zdCtcIi8ucy5QR1NRTC5cIit0aGlzLnBvcnQpOm4uY29ubmVjdCh0aGlzLnBvcnQsdGhpcy5ob3N0KSxuLm9uKFwiY29ubmVjdFwiLGZ1bmN0aW9uKCl7XG50LnNzbD9uLnJlcXVlc3RTc2woKTpuLnN0YXJ0dXAodC5nZXRTdGFydHVwQ29uZigpKX0pLG4ub24oXCJzc2xjb25uZWN0XCIsZnVuY3Rpb24oKXtcbm4uc3RhcnR1cCh0LmdldFN0YXJ0dXBDb25mKCkpfSksdGhpcy5fYXR0YWNoTGlzdGVuZXJzKG4pLG4ub25jZShcImVuZFwiLCgpPT57bGV0IGk9dGhpcy5cbl9lbmRpbmc/bmV3IEVycm9yKFwiQ29ubmVjdGlvbiB0ZXJtaW5hdGVkXCIpOm5ldyBFcnJvcihcIkNvbm5lY3Rpb24gdGVybWluYXRlZCB1bmV4XFxcbnBlY3RlZGx5XCIpO2NsZWFyVGltZW91dCh0aGlzLmNvbm5lY3Rpb25UaW1lb3V0SGFuZGxlKSx0aGlzLl9lcnJvckFsbFF1ZXJpZXMoaSksdGhpcy5cbl9lbmRpbmd8fCh0aGlzLl9jb25uZWN0aW5nJiYhdGhpcy5fY29ubmVjdGlvbkVycm9yP3RoaXMuX2Nvbm5lY3Rpb25DYWxsYmFjaz90aGlzLlxuX2Nvbm5lY3Rpb25DYWxsYmFjayhpKTp0aGlzLl9oYW5kbGVFcnJvckV2ZW50KGkpOnRoaXMuX2Nvbm5lY3Rpb25FcnJvcnx8dGhpcy5faGFuZGxlRXJyb3JFdmVudChcbmkpKSxtLm5leHRUaWNrKCgpPT57dGhpcy5lbWl0KFwiZW5kXCIpfSl9KX1jb25uZWN0KGUpe2lmKGUpe3RoaXMuX2Nvbm5lY3QoZSk7cmV0dXJufVxucmV0dXJuIG5ldyB0aGlzLl9Qcm9taXNlKCh0LG4pPT57dGhpcy5fY29ubmVjdChpPT57aT9uKGkpOnQoKX0pfSl9X2F0dGFjaExpc3RlbmVycyhlKXtcbmUub24oXCJhdXRoZW50aWNhdGlvbkNsZWFydGV4dFBhc3N3b3JkXCIsdGhpcy5faGFuZGxlQXV0aENsZWFydGV4dFBhc3N3b3JkLmJpbmQodGhpcykpLFxuZS5vbihcImF1dGhlbnRpY2F0aW9uTUQ1UGFzc3dvcmRcIix0aGlzLl9oYW5kbGVBdXRoTUQ1UGFzc3dvcmQuYmluZCh0aGlzKSksZS5vbihcImFcXFxudXRoZW50aWNhdGlvblNBU0xcIix0aGlzLl9oYW5kbGVBdXRoU0FTTC5iaW5kKHRoaXMpKSxlLm9uKFwiYXV0aGVudGljYXRpb25TQVNMQ29udFxcXG5pbnVlXCIsdGhpcy5faGFuZGxlQXV0aFNBU0xDb250aW51ZS5iaW5kKHRoaXMpKSxlLm9uKFwiYXV0aGVudGljYXRpb25TQVNMRmluYWxcIix0aGlzLlxuX2hhbmRsZUF1dGhTQVNMRmluYWwuYmluZCh0aGlzKSksZS5vbihcImJhY2tlbmRLZXlEYXRhXCIsdGhpcy5faGFuZGxlQmFja2VuZEtleURhdGEuXG5iaW5kKHRoaXMpKSxlLm9uKFwiZXJyb3JcIix0aGlzLl9oYW5kbGVFcnJvckV2ZW50LmJpbmQodGhpcykpLGUub24oXCJlcnJvck1lc3NhZ2VcIixcbnRoaXMuX2hhbmRsZUVycm9yTWVzc2FnZS5iaW5kKHRoaXMpKSxlLm9uKFwicmVhZHlGb3JRdWVyeVwiLHRoaXMuX2hhbmRsZVJlYWR5Rm9yUXVlcnkuXG5iaW5kKHRoaXMpKSxlLm9uKFwibm90aWNlXCIsdGhpcy5faGFuZGxlTm90aWNlLmJpbmQodGhpcykpLGUub24oXCJyb3dEZXNjcmlwdGlvblwiLHRoaXMuXG5faGFuZGxlUm93RGVzY3JpcHRpb24uYmluZCh0aGlzKSksZS5vbihcImRhdGFSb3dcIix0aGlzLl9oYW5kbGVEYXRhUm93LmJpbmQodGhpcykpLFxuZS5vbihcInBvcnRhbFN1c3BlbmRlZFwiLHRoaXMuX2hhbmRsZVBvcnRhbFN1c3BlbmRlZC5iaW5kKHRoaXMpKSxlLm9uKFwiZW1wdHlRdWVyeVwiLFxudGhpcy5faGFuZGxlRW1wdHlRdWVyeS5iaW5kKHRoaXMpKSxlLm9uKFwiY29tbWFuZENvbXBsZXRlXCIsdGhpcy5faGFuZGxlQ29tbWFuZENvbXBsZXRlLlxuYmluZCh0aGlzKSksZS5vbihcInBhcnNlQ29tcGxldGVcIix0aGlzLl9oYW5kbGVQYXJzZUNvbXBsZXRlLmJpbmQodGhpcykpLGUub24oXCJjb3BcXFxueUluUmVzcG9uc2VcIix0aGlzLl9oYW5kbGVDb3B5SW5SZXNwb25zZS5iaW5kKHRoaXMpKSxlLm9uKFwiY29weURhdGFcIix0aGlzLl9oYW5kbGVDb3B5RGF0YS5cbmJpbmQodGhpcykpLGUub24oXCJub3RpZmljYXRpb25cIix0aGlzLl9oYW5kbGVOb3RpZmljYXRpb24uYmluZCh0aGlzKSl9X2NoZWNrUGdQYXNzKGUpe1xubGV0IHQ9dGhpcy5jb25uZWN0aW9uO3R5cGVvZiB0aGlzLnBhc3N3b3JkPT1cImZ1bmN0aW9uXCI/dGhpcy5fUHJvbWlzZS5yZXNvbHZlKCkudGhlbihcbigpPT50aGlzLnBhc3N3b3JkKCkpLnRoZW4obj0+e2lmKG4hPT12b2lkIDApe2lmKHR5cGVvZiBuIT1cInN0cmluZ1wiKXt0LmVtaXQoXCJlcnJvXFxcbnJcIixuZXcgVHlwZUVycm9yKFwiUGFzc3dvcmQgbXVzdCBiZSBhIHN0cmluZ1wiKSk7cmV0dXJufXRoaXMuY29ubmVjdGlvblBhcmFtZXRlcnMuXG5wYXNzd29yZD10aGlzLnBhc3N3b3JkPW59ZWxzZSB0aGlzLmNvbm5lY3Rpb25QYXJhbWV0ZXJzLnBhc3N3b3JkPXRoaXMucGFzc3dvcmQ9bnVsbDtcbmUoKX0pLmNhdGNoKG49Pnt0LmVtaXQoXCJlcnJvclwiLG4pfSk6dGhpcy5wYXNzd29yZCE9PW51bGw/ZSgpOndjKHRoaXMuY29ubmVjdGlvblBhcmFtZXRlcnMsXG5uPT57biE9PXZvaWQgMCYmKHRoaXMuY29ubmVjdGlvblBhcmFtZXRlcnMucGFzc3dvcmQ9dGhpcy5wYXNzd29yZD1uKSxlKCl9KX1faGFuZGxlQXV0aENsZWFydGV4dFBhc3N3b3JkKGUpe1xudGhpcy5fY2hlY2tQZ1Bhc3MoKCk9Pnt0aGlzLmNvbm5lY3Rpb24ucGFzc3dvcmQodGhpcy5wYXNzd29yZCl9KX1faGFuZGxlQXV0aE1ENVBhc3N3b3JkKGUpe1xudGhpcy5fY2hlY2tQZ1Bhc3MoKCk9PntsZXQgdD1nYy5wb3N0Z3Jlc01kNVBhc3N3b3JkSGFzaCh0aGlzLnVzZXIsdGhpcy5wYXNzd29yZCxcbmUuc2FsdCk7dGhpcy5jb25uZWN0aW9uLnBhc3N3b3JkKHQpfSl9X2hhbmRsZUF1dGhTQVNMKGUpe3RoaXMuX2NoZWNrUGdQYXNzKCgpPT57XG50aGlzLnNhc2xTZXNzaW9uPWxuLnN0YXJ0U2Vzc2lvbihlLm1lY2hhbmlzbXMpLHRoaXMuY29ubmVjdGlvbi5zZW5kU0FTTEluaXRpYWxSZXNwb25zZU1lc3NhZ2UoXG50aGlzLnNhc2xTZXNzaW9uLm1lY2hhbmlzbSx0aGlzLnNhc2xTZXNzaW9uLnJlc3BvbnNlKX0pfV9oYW5kbGVBdXRoU0FTTENvbnRpbnVlKGUpe1xubG4uY29udGludWVTZXNzaW9uKHRoaXMuc2FzbFNlc3Npb24sdGhpcy5wYXNzd29yZCxlLmRhdGEpLHRoaXMuY29ubmVjdGlvbi5zZW5kU0NSQU1DbGllbnRGaW5hbE1lc3NhZ2UoXG50aGlzLnNhc2xTZXNzaW9uLnJlc3BvbnNlKX1faGFuZGxlQXV0aFNBU0xGaW5hbChlKXtsbi5maW5hbGl6ZVNlc3Npb24odGhpcy5zYXNsU2Vzc2lvbixcbmUuZGF0YSksdGhpcy5zYXNsU2Vzc2lvbj1udWxsfV9oYW5kbGVCYWNrZW5kS2V5RGF0YShlKXt0aGlzLnByb2Nlc3NJRD1lLnByb2Nlc3NJRCxcbnRoaXMuc2VjcmV0S2V5PWUuc2VjcmV0S2V5fV9oYW5kbGVSZWFkeUZvclF1ZXJ5KGUpe3RoaXMuX2Nvbm5lY3RpbmcmJih0aGlzLl9jb25uZWN0aW5nPVxuITEsdGhpcy5fY29ubmVjdGVkPSEwLGNsZWFyVGltZW91dCh0aGlzLmNvbm5lY3Rpb25UaW1lb3V0SGFuZGxlKSx0aGlzLl9jb25uZWN0aW9uQ2FsbGJhY2smJlxuKHRoaXMuX2Nvbm5lY3Rpb25DYWxsYmFjayhudWxsLHRoaXMpLHRoaXMuX2Nvbm5lY3Rpb25DYWxsYmFjaz1udWxsKSx0aGlzLmVtaXQoXCJjXFxcbm9ubmVjdFwiKSk7bGV0e2FjdGl2ZVF1ZXJ5OnR9PXRoaXM7dGhpcy5hY3RpdmVRdWVyeT1udWxsLHRoaXMucmVhZHlGb3JRdWVyeT0hMCx0JiZcbnQuaGFuZGxlUmVhZHlGb3JRdWVyeSh0aGlzLmNvbm5lY3Rpb24pLHRoaXMuX3B1bHNlUXVlcnlRdWV1ZSgpfV9oYW5kbGVFcnJvcldoaWxlQ29ubmVjdGluZyhlKXtcbmlmKCF0aGlzLl9jb25uZWN0aW9uRXJyb3Ipe2lmKHRoaXMuX2Nvbm5lY3Rpb25FcnJvcj0hMCxjbGVhclRpbWVvdXQodGhpcy5jb25uZWN0aW9uVGltZW91dEhhbmRsZSksXG50aGlzLl9jb25uZWN0aW9uQ2FsbGJhY2spcmV0dXJuIHRoaXMuX2Nvbm5lY3Rpb25DYWxsYmFjayhlKTt0aGlzLmVtaXQoXCJlcnJvclwiLGUpfX1faGFuZGxlRXJyb3JFdmVudChlKXtcbmlmKHRoaXMuX2Nvbm5lY3RpbmcpcmV0dXJuIHRoaXMuX2hhbmRsZUVycm9yV2hpbGVDb25uZWN0aW5nKGUpO3RoaXMuX3F1ZXJ5YWJsZT0hMSxcbnRoaXMuX2Vycm9yQWxsUXVlcmllcyhlKSx0aGlzLmVtaXQoXCJlcnJvclwiLGUpfV9oYW5kbGVFcnJvck1lc3NhZ2UoZSl7aWYodGhpcy5fY29ubmVjdGluZylcbnJldHVybiB0aGlzLl9oYW5kbGVFcnJvcldoaWxlQ29ubmVjdGluZyhlKTtsZXQgdD10aGlzLmFjdGl2ZVF1ZXJ5O2lmKCF0KXt0aGlzLl9oYW5kbGVFcnJvckV2ZW50KFxuZSk7cmV0dXJufXRoaXMuYWN0aXZlUXVlcnk9bnVsbCx0LmhhbmRsZUVycm9yKGUsdGhpcy5jb25uZWN0aW9uKX1faGFuZGxlUm93RGVzY3JpcHRpb24oZSl7XG50aGlzLmFjdGl2ZVF1ZXJ5LmhhbmRsZVJvd0Rlc2NyaXB0aW9uKGUpfV9oYW5kbGVEYXRhUm93KGUpe3RoaXMuYWN0aXZlUXVlcnkuaGFuZGxlRGF0YVJvdyhcbmUpfV9oYW5kbGVQb3J0YWxTdXNwZW5kZWQoZSl7dGhpcy5hY3RpdmVRdWVyeS5oYW5kbGVQb3J0YWxTdXNwZW5kZWQodGhpcy5jb25uZWN0aW9uKX1faGFuZGxlRW1wdHlRdWVyeShlKXtcbnRoaXMuYWN0aXZlUXVlcnkuaGFuZGxlRW1wdHlRdWVyeSh0aGlzLmNvbm5lY3Rpb24pfV9oYW5kbGVDb21tYW5kQ29tcGxldGUoZSl7dGhpcy5cbmFjdGl2ZVF1ZXJ5LmhhbmRsZUNvbW1hbmRDb21wbGV0ZShlLHRoaXMuY29ubmVjdGlvbil9X2hhbmRsZVBhcnNlQ29tcGxldGUoZSl7dGhpcy5cbmFjdGl2ZVF1ZXJ5Lm5hbWUmJih0aGlzLmNvbm5lY3Rpb24ucGFyc2VkU3RhdGVtZW50c1t0aGlzLmFjdGl2ZVF1ZXJ5Lm5hbWVdPXRoaXMuXG5hY3RpdmVRdWVyeS50ZXh0KX1faGFuZGxlQ29weUluUmVzcG9uc2UoZSl7dGhpcy5hY3RpdmVRdWVyeS5oYW5kbGVDb3B5SW5SZXNwb25zZShcbnRoaXMuY29ubmVjdGlvbil9X2hhbmRsZUNvcHlEYXRhKGUpe3RoaXMuYWN0aXZlUXVlcnkuaGFuZGxlQ29weURhdGEoZSx0aGlzLmNvbm5lY3Rpb24pfV9oYW5kbGVOb3RpZmljYXRpb24oZSl7XG50aGlzLmVtaXQoXCJub3RpZmljYXRpb25cIixlKX1faGFuZGxlTm90aWNlKGUpe3RoaXMuZW1pdChcIm5vdGljZVwiLGUpfWdldFN0YXJ0dXBDb25mKCl7XG52YXIgZT10aGlzLmNvbm5lY3Rpb25QYXJhbWV0ZXJzLHQ9e3VzZXI6ZS51c2VyLGRhdGFiYXNlOmUuZGF0YWJhc2V9LG49ZS5hcHBsaWNhdGlvbl9uYW1lfHxcbmUuZmFsbGJhY2tfYXBwbGljYXRpb25fbmFtZTtyZXR1cm4gbiYmKHQuYXBwbGljYXRpb25fbmFtZT1uKSxlLnJlcGxpY2F0aW9uJiYodC5yZXBsaWNhdGlvbj1cblwiXCIrZS5yZXBsaWNhdGlvbiksZS5zdGF0ZW1lbnRfdGltZW91dCYmKHQuc3RhdGVtZW50X3RpbWVvdXQ9U3RyaW5nKHBhcnNlSW50KGUuc3RhdGVtZW50X3RpbWVvdXQsXG4xMCkpKSxlLmxvY2tfdGltZW91dCYmKHQubG9ja190aW1lb3V0PVN0cmluZyhwYXJzZUludChlLmxvY2tfdGltZW91dCwxMCkpKSxlLmlkbGVfaW5fdHJhbnNhY3Rpb25fc2Vzc2lvbl90aW1lb3V0JiZcbih0LmlkbGVfaW5fdHJhbnNhY3Rpb25fc2Vzc2lvbl90aW1lb3V0PVN0cmluZyhwYXJzZUludChlLmlkbGVfaW5fdHJhbnNhY3Rpb25fc2Vzc2lvbl90aW1lb3V0LFxuMTApKSksZS5vcHRpb25zJiYodC5vcHRpb25zPWUub3B0aW9ucyksdH1jYW5jZWwoZSx0KXtpZihlLmFjdGl2ZVF1ZXJ5PT09dCl7dmFyIG49dGhpcy5cbmNvbm5lY3Rpb247dGhpcy5ob3N0JiZ0aGlzLmhvc3QuaW5kZXhPZihcIi9cIik9PT0wP24uY29ubmVjdCh0aGlzLmhvc3QrXCIvLnMuUEdTUUwuXCIrXG50aGlzLnBvcnQpOm4uY29ubmVjdCh0aGlzLnBvcnQsdGhpcy5ob3N0KSxuLm9uKFwiY29ubmVjdFwiLGZ1bmN0aW9uKCl7bi5jYW5jZWwoZS5wcm9jZXNzSUQsXG5lLnNlY3JldEtleSl9KX1lbHNlIGUucXVlcnlRdWV1ZS5pbmRleE9mKHQpIT09LTEmJmUucXVlcnlRdWV1ZS5zcGxpY2UoZS5xdWVyeVF1ZXVlLlxuaW5kZXhPZih0KSwxKX1zZXRUeXBlUGFyc2VyKGUsdCxuKXtyZXR1cm4gdGhpcy5fdHlwZXMuc2V0VHlwZVBhcnNlcihlLHQsbil9Z2V0VHlwZVBhcnNlcihlLHQpe1xucmV0dXJuIHRoaXMuX3R5cGVzLmdldFR5cGVQYXJzZXIoZSx0KX1lc2NhcGVJZGVudGlmaWVyKGUpe3JldHVybidcIicrZS5yZXBsYWNlKC9cIi9nLFxuJ1wiXCInKSsnXCInfWVzY2FwZUxpdGVyYWwoZSl7Zm9yKHZhciB0PSExLG49XCInXCIsaT0wO2k8ZS5sZW5ndGg7aSsrKXt2YXIgcz1lW2ldO3M9PT1cblwiJ1wiP24rPXMrczpzPT09XCJcXFxcXCI/KG4rPXMrcyx0PSEwKTpuKz1zfXJldHVybiBuKz1cIidcIix0PT09ITAmJihuPVwiIEVcIituKSxufV9wdWxzZVF1ZXJ5UXVldWUoKXtcbmlmKHRoaXMucmVhZHlGb3JRdWVyeT09PSEwKWlmKHRoaXMuYWN0aXZlUXVlcnk9dGhpcy5xdWVyeVF1ZXVlLnNoaWZ0KCksdGhpcy5hY3RpdmVRdWVyeSl7XG50aGlzLnJlYWR5Rm9yUXVlcnk9ITEsdGhpcy5oYXNFeGVjdXRlZD0hMDtsZXQgZT10aGlzLmFjdGl2ZVF1ZXJ5LnN1Ym1pdCh0aGlzLmNvbm5lY3Rpb24pO1xuZSYmbS5uZXh0VGljaygoKT0+e3RoaXMuYWN0aXZlUXVlcnkuaGFuZGxlRXJyb3IoZSx0aGlzLmNvbm5lY3Rpb24pLHRoaXMucmVhZHlGb3JRdWVyeT1cbiEwLHRoaXMuX3B1bHNlUXVlcnlRdWV1ZSgpfSl9ZWxzZSB0aGlzLmhhc0V4ZWN1dGVkJiYodGhpcy5hY3RpdmVRdWVyeT1udWxsLHRoaXMuXG5lbWl0KFwiZHJhaW5cIikpfXF1ZXJ5KGUsdCxuKXt2YXIgaSxzLG8sdSxjO2lmKGU9PW51bGwpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNsaWVudFxcXG4gd2FzIHBhc3NlZCBhIG51bGwgb3IgdW5kZWZpbmVkIHF1ZXJ5XCIpO3JldHVybiB0eXBlb2YgZS5zdWJtaXQ9PVwiZnVuY3Rpb25cIj8obz1lLlxucXVlcnlfdGltZW91dHx8dGhpcy5jb25uZWN0aW9uUGFyYW1ldGVycy5xdWVyeV90aW1lb3V0LHM9aT1lLHR5cGVvZiB0PT1cImZ1bmN0aW9uXCImJlxuKGkuY2FsbGJhY2s9aS5jYWxsYmFja3x8dCkpOihvPXRoaXMuY29ubmVjdGlvblBhcmFtZXRlcnMucXVlcnlfdGltZW91dCxpPW5ldyBJcyhcbmUsdCxuKSxpLmNhbGxiYWNrfHwocz1uZXcgdGhpcy5fUHJvbWlzZSgoaCxsKT0+e2kuY2FsbGJhY2s9KGQsYik9PmQ/bChkKTpoKGIpfSkpKSxcbm8mJihjPWkuY2FsbGJhY2ssdT1zZXRUaW1lb3V0KCgpPT57dmFyIGg9bmV3IEVycm9yKFwiUXVlcnkgcmVhZCB0aW1lb3V0XCIpO20ubmV4dFRpY2soXG4oKT0+e2kuaGFuZGxlRXJyb3IoaCx0aGlzLmNvbm5lY3Rpb24pfSksYyhoKSxpLmNhbGxiYWNrPSgpPT57fTt2YXIgbD10aGlzLnF1ZXJ5UXVldWUuXG5pbmRleE9mKGkpO2w+LTEmJnRoaXMucXVlcnlRdWV1ZS5zcGxpY2UobCwxKSx0aGlzLl9wdWxzZVF1ZXJ5UXVldWUoKX0sbyksaS5jYWxsYmFjaz1cbihoLGwpPT57Y2xlYXJUaW1lb3V0KHUpLGMoaCxsKX0pLHRoaXMuYmluYXJ5JiYhaS5iaW5hcnkmJihpLmJpbmFyeT0hMCksaS5fcmVzdWx0JiZcbiFpLl9yZXN1bHQuX3R5cGVzJiYoaS5fcmVzdWx0Ll90eXBlcz10aGlzLl90eXBlcyksdGhpcy5fcXVlcnlhYmxlP3RoaXMuX2VuZGluZz8obS5cbm5leHRUaWNrKCgpPT57aS5oYW5kbGVFcnJvcihuZXcgRXJyb3IoXCJDbGllbnQgd2FzIGNsb3NlZCBhbmQgaXMgbm90IHF1ZXJ5YWJsZVwiKSxcbnRoaXMuY29ubmVjdGlvbil9KSxzKToodGhpcy5xdWVyeVF1ZXVlLnB1c2goaSksdGhpcy5fcHVsc2VRdWVyeVF1ZXVlKCkscyk6KG0ubmV4dFRpY2soXG4oKT0+e2kuaGFuZGxlRXJyb3IobmV3IEVycm9yKFwiQ2xpZW50IGhhcyBlbmNvdW50ZXJlZCBhIGNvbm5lY3Rpb24gZXJyb3IgYW5kIGlzIG5cXFxub3QgcXVlcnlhYmxlXCIpLHRoaXMuY29ubmVjdGlvbil9KSxzKX1yZWYoKXt0aGlzLmNvbm5lY3Rpb24ucmVmKCl9dW5yZWYoKXt0aGlzLmNvbm5lY3Rpb24uXG51bnJlZigpfWVuZChlKXtpZih0aGlzLl9lbmRpbmc9ITAsIXRoaXMuY29ubmVjdGlvbi5fY29ubmVjdGluZylpZihlKWUoKTtlbHNlIHJldHVybiB0aGlzLlxuX1Byb21pc2UucmVzb2x2ZSgpO2lmKHRoaXMuYWN0aXZlUXVlcnl8fCF0aGlzLl9xdWVyeWFibGU/dGhpcy5jb25uZWN0aW9uLnN0cmVhbS5cbmRlc3Ryb3koKTp0aGlzLmNvbm5lY3Rpb24uZW5kKCksZSl0aGlzLmNvbm5lY3Rpb24ub25jZShcImVuZFwiLGUpO2Vsc2UgcmV0dXJuIG5ldyB0aGlzLlxuX1Byb21pc2UodD0+e3RoaXMuY29ubmVjdGlvbi5vbmNlKFwiZW5kXCIsdCl9KX19O2EoZm4sXCJDbGllbnRcIik7dmFyIF90PWZuO190LlF1ZXJ5PVxuSXM7UHMuZXhwb3J0cz1fdH0pO3ZhciBNcz1JKChjZixGcyk9PntcInVzZSBzdHJpY3RcIjtwKCk7dmFyIEVjPXdlKCkuRXZlbnRFbWl0dGVyLExzPWEoZnVuY3Rpb24oKXt9LFwiXFxcbk5PT1BcIiksUnM9YSgocixlKT0+e2xldCB0PXIuZmluZEluZGV4KGUpO3JldHVybiB0PT09LTE/dm9pZCAwOnIuc3BsaWNlKHQsMSlbMF19LFxuXCJyZW1vdmVXaGVyZVwiKSx5bj1jbGFzcyB5bntjb25zdHJ1Y3RvcihlLHQsbil7dGhpcy5jbGllbnQ9ZSx0aGlzLmlkbGVMaXN0ZW5lcj10LFxudGhpcy50aW1lb3V0SWQ9bn19O2EoeW4sXCJJZGxlSXRlbVwiKTt2YXIgcG49eW4sbW49Y2xhc3MgbW57Y29uc3RydWN0b3IoZSl7dGhpcy5jYWxsYmFjaz1cbmV9fTthKG1uLFwiUGVuZGluZ0l0ZW1cIik7dmFyIE5lPW1uO2Z1bmN0aW9uIF9jKCl7dGhyb3cgbmV3IEVycm9yKFwiUmVsZWFzZSBjYWxsZWQgXFxcbm9uIGNsaWVudCB3aGljaCBoYXMgYWxyZWFkeSBiZWVuIHJlbGVhc2VkIHRvIHRoZSBwb29sLlwiKX1hKF9jLFwidGhyb3dPbkRvdWJsZVJlbGVcXFxuYXNlXCIpO2Z1bmN0aW9uIEF0KHIsZSl7aWYoZSlyZXR1cm57Y2FsbGJhY2s6ZSxyZXN1bHQ6dm9pZCAwfTtsZXQgdCxuLGk9YShmdW5jdGlvbihvLHUpe1xubz90KG8pOm4odSl9LFwiY2JcIikscz1uZXcgcihmdW5jdGlvbihvLHUpe249byx0PXV9KS5jYXRjaChvPT57dGhyb3cgRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UoXG5vKSxvfSk7cmV0dXJue2NhbGxiYWNrOmkscmVzdWx0OnN9fWEoQXQsXCJwcm9taXNpZnlcIik7ZnVuY3Rpb24gQWMocixlKXtyZXR1cm4gYShmdW5jdGlvbiB0KG4pe1xubi5jbGllbnQ9ZSxlLnJlbW92ZUxpc3RlbmVyKFwiZXJyb3JcIix0KSxlLm9uKFwiZXJyb3JcIiwoKT0+e3IubG9nKFwiYWRkaXRpb25hbCBjbGllblxcXG50IGVycm9yIGFmdGVyIGRpc2Nvbm5lY3Rpb24gZHVlIHRvIGVycm9yXCIsbil9KSxyLl9yZW1vdmUoZSksci5lbWl0KFwiZXJyb3JcIixuLGUpfSxcblwiaWRsZUxpc3RlbmVyXCIpfWEoQWMsXCJtYWtlSWRsZUxpc3RlbmVyXCIpO3ZhciBnbj1jbGFzcyBnbiBleHRlbmRzIEVje2NvbnN0cnVjdG9yKGUsdCl7XG5zdXBlcigpLHRoaXMub3B0aW9ucz1PYmplY3QuYXNzaWduKHt9LGUpLGUhPW51bGwmJlwicGFzc3dvcmRcImluIGUmJk9iamVjdC5kZWZpbmVQcm9wZXJ0eShcbnRoaXMub3B0aW9ucyxcInBhc3N3b3JkXCIse2NvbmZpZ3VyYWJsZTohMCxlbnVtZXJhYmxlOiExLHdyaXRhYmxlOiEwLHZhbHVlOmUucGFzc3dvcmR9KSxcbmUhPW51bGwmJmUuc3NsJiZlLnNzbC5rZXkmJk9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLm9wdGlvbnMuc3NsLFwia2V5XCIse2VudW1lcmFibGU6ITF9KSxcbnRoaXMub3B0aW9ucy5tYXg9dGhpcy5vcHRpb25zLm1heHx8dGhpcy5vcHRpb25zLnBvb2xTaXplfHwxMCx0aGlzLm9wdGlvbnMubWF4VXNlcz1cbnRoaXMub3B0aW9ucy5tYXhVc2VzfHwxLzAsdGhpcy5vcHRpb25zLmFsbG93RXhpdE9uSWRsZT10aGlzLm9wdGlvbnMuYWxsb3dFeGl0T25JZGxlfHxcbiExLHRoaXMub3B0aW9ucy5tYXhMaWZldGltZVNlY29uZHM9dGhpcy5vcHRpb25zLm1heExpZmV0aW1lU2Vjb25kc3x8MCx0aGlzLmxvZz10aGlzLlxub3B0aW9ucy5sb2d8fGZ1bmN0aW9uKCl7fSx0aGlzLkNsaWVudD10aGlzLm9wdGlvbnMuQ2xpZW50fHx0fHxDdCgpLkNsaWVudCx0aGlzLlByb21pc2U9XG50aGlzLm9wdGlvbnMuUHJvbWlzZXx8Uy5Qcm9taXNlLHR5cGVvZiB0aGlzLm9wdGlvbnMuaWRsZVRpbWVvdXRNaWxsaXM+XCJ1XCImJih0aGlzLlxub3B0aW9ucy5pZGxlVGltZW91dE1pbGxpcz0xZTQpLHRoaXMuX2NsaWVudHM9W10sdGhpcy5faWRsZT1bXSx0aGlzLl9leHBpcmVkPW5ldyBXZWFrU2V0LFxudGhpcy5fcGVuZGluZ1F1ZXVlPVtdLHRoaXMuX2VuZENhbGxiYWNrPXZvaWQgMCx0aGlzLmVuZGluZz0hMSx0aGlzLmVuZGVkPSExfV9pc0Z1bGwoKXtcbnJldHVybiB0aGlzLl9jbGllbnRzLmxlbmd0aD49dGhpcy5vcHRpb25zLm1heH1fcHVsc2VRdWV1ZSgpe2lmKHRoaXMubG9nKFwicHVsc2UgcVxcXG51ZXVlXCIpLHRoaXMuZW5kZWQpe3RoaXMubG9nKFwicHVsc2UgcXVldWUgZW5kZWRcIik7cmV0dXJufWlmKHRoaXMuZW5kaW5nKXt0aGlzLmxvZyhcblwicHVsc2UgcXVldWUgb24gZW5kaW5nXCIpLHRoaXMuX2lkbGUubGVuZ3RoJiZ0aGlzLl9pZGxlLnNsaWNlKCkubWFwKHQ9Pnt0aGlzLl9yZW1vdmUoXG50LmNsaWVudCl9KSx0aGlzLl9jbGllbnRzLmxlbmd0aHx8KHRoaXMuZW5kZWQ9ITAsdGhpcy5fZW5kQ2FsbGJhY2soKSk7cmV0dXJufWlmKCF0aGlzLlxuX3BlbmRpbmdRdWV1ZS5sZW5ndGgpe3RoaXMubG9nKFwibm8gcXVldWVkIHJlcXVlc3RzXCIpO3JldHVybn1pZighdGhpcy5faWRsZS5sZW5ndGgmJlxudGhpcy5faXNGdWxsKCkpcmV0dXJuO2xldCBlPXRoaXMuX3BlbmRpbmdRdWV1ZS5zaGlmdCgpO2lmKHRoaXMuX2lkbGUubGVuZ3RoKXtsZXQgdD10aGlzLlxuX2lkbGUucG9wKCk7Y2xlYXJUaW1lb3V0KHQudGltZW91dElkKTtsZXQgbj10LmNsaWVudDtuLnJlZiYmbi5yZWYoKTtsZXQgaT10LmlkbGVMaXN0ZW5lcjtcbnJldHVybiB0aGlzLl9hY3F1aXJlQ2xpZW50KG4sZSxpLCExKX1pZighdGhpcy5faXNGdWxsKCkpcmV0dXJuIHRoaXMubmV3Q2xpZW50KGUpO1xudGhyb3cgbmV3IEVycm9yKFwidW5leHBlY3RlZCBjb25kaXRpb25cIil9X3JlbW92ZShlKXtsZXQgdD1Scyh0aGlzLl9pZGxlLG49Pm4uY2xpZW50PT09XG5lKTt0IT09dm9pZCAwJiZjbGVhclRpbWVvdXQodC50aW1lb3V0SWQpLHRoaXMuX2NsaWVudHM9dGhpcy5fY2xpZW50cy5maWx0ZXIobj0+biE9PVxuZSksZS5lbmQoKSx0aGlzLmVtaXQoXCJyZW1vdmVcIixlKX1jb25uZWN0KGUpe2lmKHRoaXMuZW5kaW5nKXtsZXQgaT1uZXcgRXJyb3IoXCJDYW5cXFxubm90IHVzZSBhIHBvb2wgYWZ0ZXIgY2FsbGluZyBlbmQgb24gdGhlIHBvb2xcIik7cmV0dXJuIGU/ZShpKTp0aGlzLlByb21pc2UucmVqZWN0KFxuaSl9bGV0IHQ9QXQodGhpcy5Qcm9taXNlLGUpLG49dC5yZXN1bHQ7aWYodGhpcy5faXNGdWxsKCl8fHRoaXMuX2lkbGUubGVuZ3RoKXtpZih0aGlzLlxuX2lkbGUubGVuZ3RoJiZtLm5leHRUaWNrKCgpPT50aGlzLl9wdWxzZVF1ZXVlKCkpLCF0aGlzLm9wdGlvbnMuY29ubmVjdGlvblRpbWVvdXRNaWxsaXMpXG5yZXR1cm4gdGhpcy5fcGVuZGluZ1F1ZXVlLnB1c2gobmV3IE5lKHQuY2FsbGJhY2spKSxuO2xldCBpPWEoKHUsYyxoKT0+e2NsZWFyVGltZW91dChcbm8pLHQuY2FsbGJhY2sodSxjLGgpfSxcInF1ZXVlQ2FsbGJhY2tcIikscz1uZXcgTmUoaSksbz1zZXRUaW1lb3V0KCgpPT57UnModGhpcy5fcGVuZGluZ1F1ZXVlLFxudT0+dS5jYWxsYmFjaz09PWkpLHMudGltZWRPdXQ9ITAsdC5jYWxsYmFjayhuZXcgRXJyb3IoXCJ0aW1lb3V0IGV4Y2VlZGVkIHdoZW4gdHJ5XFxcbmluZyB0byBjb25uZWN0XCIpKX0sdGhpcy5vcHRpb25zLmNvbm5lY3Rpb25UaW1lb3V0TWlsbGlzKTtyZXR1cm4gdGhpcy5fcGVuZGluZ1F1ZXVlLlxucHVzaChzKSxufXJldHVybiB0aGlzLm5ld0NsaWVudChuZXcgTmUodC5jYWxsYmFjaykpLG59bmV3Q2xpZW50KGUpe2xldCB0PW5ldyB0aGlzLlxuQ2xpZW50KHRoaXMub3B0aW9ucyk7dGhpcy5fY2xpZW50cy5wdXNoKHQpO2xldCBuPUFjKHRoaXMsdCk7dGhpcy5sb2coXCJjaGVja2luZyBjXFxcbmxpZW50IHRpbWVvdXRcIik7bGV0IGkscz0hMTt0aGlzLm9wdGlvbnMuY29ubmVjdGlvblRpbWVvdXRNaWxsaXMmJihpPXNldFRpbWVvdXQoKCk9PntcbnRoaXMubG9nKFwiZW5kaW5nIGNsaWVudCBkdWUgdG8gdGltZW91dFwiKSxzPSEwLHQuY29ubmVjdGlvbj90LmNvbm5lY3Rpb24uc3RyZWFtLmRlc3Ryb3koKTpcbnQuZW5kKCl9LHRoaXMub3B0aW9ucy5jb25uZWN0aW9uVGltZW91dE1pbGxpcykpLHRoaXMubG9nKFwiY29ubmVjdGluZyBuZXcgY2xpZW50XCIpLFxudC5jb25uZWN0KG89PntpZihpJiZjbGVhclRpbWVvdXQoaSksdC5vbihcImVycm9yXCIsbiksbyl0aGlzLmxvZyhcImNsaWVudCBmYWlsZWQgdG9cXFxuIGNvbm5lY3RcIixvKSx0aGlzLl9jbGllbnRzPXRoaXMuX2NsaWVudHMuZmlsdGVyKHU9PnUhPT10KSxzJiYoby5tZXNzYWdlPVwiQ29ubmVjdFxcXG5pb24gdGVybWluYXRlZCBkdWUgdG8gY29ubmVjdGlvbiB0aW1lb3V0XCIpLHRoaXMuX3B1bHNlUXVldWUoKSxlLnRpbWVkT3V0fHxlLmNhbGxiYWNrKFxubyx2b2lkIDAsTHMpO2Vsc2V7aWYodGhpcy5sb2coXCJuZXcgY2xpZW50IGNvbm5lY3RlZFwiKSx0aGlzLm9wdGlvbnMubWF4TGlmZXRpbWVTZWNvbmRzIT09XG4wKXtsZXQgdT1zZXRUaW1lb3V0KCgpPT57dGhpcy5sb2coXCJlbmRpbmcgY2xpZW50IGR1ZSB0byBleHBpcmVkIGxpZmV0aW1lXCIpLHRoaXMuXG5fZXhwaXJlZC5hZGQodCksdGhpcy5faWRsZS5maW5kSW5kZXgoaD0+aC5jbGllbnQ9PT10KSE9PS0xJiZ0aGlzLl9hY3F1aXJlQ2xpZW50KFxudCxuZXcgTmUoKGgsbCxkKT0+ZCgpKSxuLCExKX0sdGhpcy5vcHRpb25zLm1heExpZmV0aW1lU2Vjb25kcyoxZTMpO3UudW5yZWYoKSx0Lm9uY2UoXG5cImVuZFwiLCgpPT5jbGVhclRpbWVvdXQodSkpfXJldHVybiB0aGlzLl9hY3F1aXJlQ2xpZW50KHQsZSxuLCEwKX19KX1fYWNxdWlyZUNsaWVudChlLHQsbixpKXtcbmkmJnRoaXMuZW1pdChcImNvbm5lY3RcIixlKSx0aGlzLmVtaXQoXCJhY3F1aXJlXCIsZSksZS5yZWxlYXNlPXRoaXMuX3JlbGVhc2VPbmNlKGUsbiksXG5lLnJlbW92ZUxpc3RlbmVyKFwiZXJyb3JcIixuKSx0LnRpbWVkT3V0P2kmJnRoaXMub3B0aW9ucy52ZXJpZnk/dGhpcy5vcHRpb25zLnZlcmlmeShcbmUsZS5yZWxlYXNlKTplLnJlbGVhc2UoKTppJiZ0aGlzLm9wdGlvbnMudmVyaWZ5P3RoaXMub3B0aW9ucy52ZXJpZnkoZSxzPT57aWYocylyZXR1cm4gZS5cbnJlbGVhc2UocyksdC5jYWxsYmFjayhzLHZvaWQgMCxMcyk7dC5jYWxsYmFjayh2b2lkIDAsZSxlLnJlbGVhc2UpfSk6dC5jYWxsYmFjayh2b2lkIDAsXG5lLGUucmVsZWFzZSl9X3JlbGVhc2VPbmNlKGUsdCl7bGV0IG49ITE7cmV0dXJuIGk9PntuJiZfYygpLG49ITAsdGhpcy5fcmVsZWFzZShlLFxudCxpKX19X3JlbGVhc2UoZSx0LG4pe2lmKGUub24oXCJlcnJvclwiLHQpLGUuX3Bvb2xVc2VDb3VudD0oZS5fcG9vbFVzZUNvdW50fHwwKSsxLFxudGhpcy5lbWl0KFwicmVsZWFzZVwiLG4sZSksbnx8dGhpcy5lbmRpbmd8fCFlLl9xdWVyeWFibGV8fGUuX2VuZGluZ3x8ZS5fcG9vbFVzZUNvdW50Pj1cbnRoaXMub3B0aW9ucy5tYXhVc2VzKXtlLl9wb29sVXNlQ291bnQ+PXRoaXMub3B0aW9ucy5tYXhVc2VzJiZ0aGlzLmxvZyhcInJlbW92ZSBleFxcXG5wZW5kZWQgY2xpZW50XCIpLHRoaXMuX3JlbW92ZShlKSx0aGlzLl9wdWxzZVF1ZXVlKCk7cmV0dXJufWlmKHRoaXMuX2V4cGlyZWQuaGFzKGUpKXtcbnRoaXMubG9nKFwicmVtb3ZlIGV4cGlyZWQgY2xpZW50XCIpLHRoaXMuX2V4cGlyZWQuZGVsZXRlKGUpLHRoaXMuX3JlbW92ZShlKSx0aGlzLl9wdWxzZVF1ZXVlKCk7XG5yZXR1cm59bGV0IHM7dGhpcy5vcHRpb25zLmlkbGVUaW1lb3V0TWlsbGlzJiYocz1zZXRUaW1lb3V0KCgpPT57dGhpcy5sb2coXCJyZW1vdmVcXFxuIGlkbGUgY2xpZW50XCIpLHRoaXMuX3JlbW92ZShlKX0sdGhpcy5vcHRpb25zLmlkbGVUaW1lb3V0TWlsbGlzKSx0aGlzLm9wdGlvbnMuYWxsb3dFeGl0T25JZGxlJiZcbnMudW5yZWYoKSksdGhpcy5vcHRpb25zLmFsbG93RXhpdE9uSWRsZSYmZS51bnJlZigpLHRoaXMuX2lkbGUucHVzaChuZXcgcG4oZSx0LHMpKSxcbnRoaXMuX3B1bHNlUXVldWUoKX1xdWVyeShlLHQsbil7aWYodHlwZW9mIGU9PVwiZnVuY3Rpb25cIil7bGV0IHM9QXQodGhpcy5Qcm9taXNlLGUpO1xucmV0dXJuIHgoZnVuY3Rpb24oKXtyZXR1cm4gcy5jYWxsYmFjayhuZXcgRXJyb3IoXCJQYXNzaW5nIGEgZnVuY3Rpb24gYXMgdGhlIGZpcnN0XFxcbiBwYXJhbWV0ZXIgdG8gcG9vbC5xdWVyeSBpcyBub3Qgc3VwcG9ydGVkXCIpKX0pLHMucmVzdWx0fXR5cGVvZiB0PT1cImZ1bmN0aW9uXCImJihuPVxudCx0PXZvaWQgMCk7bGV0IGk9QXQodGhpcy5Qcm9taXNlLG4pO3JldHVybiBuPWkuY2FsbGJhY2ssdGhpcy5jb25uZWN0KChzLG8pPT57aWYocylcbnJldHVybiBuKHMpO2xldCB1PSExLGM9YShoPT57dXx8KHU9ITAsby5yZWxlYXNlKGgpLG4oaCkpfSxcIm9uRXJyb3JcIik7by5vbmNlKFwiZXJyXFxcbm9yXCIsYyksdGhpcy5sb2coXCJkaXNwYXRjaGluZyBxdWVyeVwiKTt0cnl7by5xdWVyeShlLHQsKGgsbCk9PntpZih0aGlzLmxvZyhcInF1ZXJ5IFxcXG5kaXNwYXRjaGVkXCIpLG8ucmVtb3ZlTGlzdGVuZXIoXCJlcnJvclwiLGMpLCF1KXJldHVybiB1PSEwLG8ucmVsZWFzZShoKSxoP24oaCk6bih2b2lkIDAsXG5sKX0pfWNhdGNoKGgpe3JldHVybiBvLnJlbGVhc2UoaCksbihoKX19KSxpLnJlc3VsdH1lbmQoZSl7aWYodGhpcy5sb2coXCJlbmRpbmdcIiksXG50aGlzLmVuZGluZyl7bGV0IG49bmV3IEVycm9yKFwiQ2FsbGVkIGVuZCBvbiBwb29sIG1vcmUgdGhhbiBvbmNlXCIpO3JldHVybiBlP2Uobik6XG50aGlzLlByb21pc2UucmVqZWN0KG4pfXRoaXMuZW5kaW5nPSEwO2xldCB0PUF0KHRoaXMuUHJvbWlzZSxlKTtyZXR1cm4gdGhpcy5fZW5kQ2FsbGJhY2s9XG50LmNhbGxiYWNrLHRoaXMuX3B1bHNlUXVldWUoKSx0LnJlc3VsdH1nZXQgd2FpdGluZ0NvdW50KCl7cmV0dXJuIHRoaXMuX3BlbmRpbmdRdWV1ZS5cbmxlbmd0aH1nZXQgaWRsZUNvdW50KCl7cmV0dXJuIHRoaXMuX2lkbGUubGVuZ3RofWdldCBleHBpcmVkQ291bnQoKXtyZXR1cm4gdGhpcy5fY2xpZW50cy5cbnJlZHVjZSgoZSx0KT0+ZSsodGhpcy5fZXhwaXJlZC5oYXModCk/MTowKSwwKX1nZXQgdG90YWxDb3VudCgpe3JldHVybiB0aGlzLl9jbGllbnRzLlxubGVuZ3RofX07YShnbixcIlBvb2xcIik7dmFyIGRuPWduO0ZzLmV4cG9ydHM9ZG59KTt2YXIgRHM9e307aWUoRHMse2RlZmF1bHQ6KCk9PkNjfSk7dmFyIENjLGtzPXooKCk9PntcInVzZSBzdHJpY3RcIjtwKCk7Q2M9e319KTt2YXIgVXM9SSgocGYsVGMpPT57VGMuZXhwb3J0cz17bmFtZTpcInBnXCIsdmVyc2lvbjpcIjguOC4wXCIsZGVzY3JpcHRpb246XCJQb3N0Z3JlU1FMXFxcbiBjbGllbnQgLSBwdXJlIGphdmFzY3JpcHQgJiBsaWJwcSB3aXRoIHRoZSBzYW1lIEFQSVwiLGtleXdvcmRzOltcImRhdGFiYXNlXCIsXCJsaWJwcVwiLFxuXCJwZ1wiLFwicG9zdGdyZVwiLFwicG9zdGdyZXNcIixcInBvc3RncmVzcWxcIixcInJkYm1zXCJdLGhvbWVwYWdlOlwiaHR0cHM6Ly9naXRodWIuY29tL2JyaVxcXG5hbmMvbm9kZS1wb3N0Z3Jlc1wiLHJlcG9zaXRvcnk6e3R5cGU6XCJnaXRcIix1cmw6XCJnaXQ6Ly9naXRodWIuY29tL2JyaWFuYy9ub2RlLXBvc3RcXFxuZ3Jlcy5naXRcIixkaXJlY3Rvcnk6XCJwYWNrYWdlcy9wZ1wifSxhdXRob3I6XCJCcmlhbiBDYXJsc29uIDxicmlhbi5tLmNhcmxzb25AZ21haWwuXFxcbmNvbT5cIixtYWluOlwiLi9saWJcIixkZXBlbmRlbmNpZXM6e1wiYnVmZmVyLXdyaXRlclwiOlwiMi4wLjBcIixcInBhY2tldC1yZWFkZXJcIjpcIjEuMC4wXCIsXG5cInBnLWNvbm5lY3Rpb24tc3RyaW5nXCI6XCJeMi41LjBcIixcInBnLXBvb2xcIjpcIl4zLjUuMlwiLFwicGctcHJvdG9jb2xcIjpcIl4xLjUuMFwiLFwicGctdHlcXFxucGVzXCI6XCJeMi4xLjBcIixwZ3Bhc3M6XCIxLnhcIn0sZGV2RGVwZW5kZW5jaWVzOnthc3luYzpcIjIuNi40XCIsYmx1ZWJpcmQ6XCIzLjUuMlwiLGNvOlwiXFxcbjQuNi4wXCIsXCJwZy1jb3B5LXN0cmVhbXNcIjpcIjAuMy4wXCJ9LHBlZXJEZXBlbmRlbmNpZXM6e1wicGctbmF0aXZlXCI6XCI+PTMuMC4xXCJ9LHBlZXJEZXBlbmRlbmNpZXNNZXRhOntcblwicGctbmF0aXZlXCI6e29wdGlvbmFsOiEwfX0sc2NyaXB0czp7dGVzdDpcIm1ha2UgdGVzdC1hbGxcIn0sZmlsZXM6W1wibGliXCIsXCJTUE9OU09SU1xcXG4ubWRcIl0sbGljZW5zZTpcIk1JVFwiLGVuZ2luZXM6e25vZGU6XCI+PSA4LjAuMFwifSxnaXRIZWFkOlwiYzk5ZmIyYzEyN2RkZjhkNzEyNTAwZGIyY1xcXG43YjlhNTQ5MWExNzg2NTVcIn19KTt2YXIgcXM9SSgoZGYsTnMpPT57XCJ1c2Ugc3RyaWN0XCI7cCgpO3ZhciBPcz13ZSgpLkV2ZW50RW1pdHRlcixJYz0oSGUoKSxOKGplKSksd249ZXQoKSxcbnFlPU5zLmV4cG9ydHM9ZnVuY3Rpb24ocixlLHQpe09zLmNhbGwodGhpcykscj13bi5ub3JtYWxpemVRdWVyeUNvbmZpZyhyLGUsdCksdGhpcy5cbnRleHQ9ci50ZXh0LHRoaXMudmFsdWVzPXIudmFsdWVzLHRoaXMubmFtZT1yLm5hbWUsdGhpcy5jYWxsYmFjaz1yLmNhbGxiYWNrLHRoaXMuXG5zdGF0ZT1cIm5ld1wiLHRoaXMuX2FycmF5TW9kZT1yLnJvd01vZGU9PT1cImFycmF5XCIsdGhpcy5fZW1pdFJvd0V2ZW50cz0hMSx0aGlzLm9uKFwiXFxcbm5ld0xpc3RlbmVyXCIsZnVuY3Rpb24obil7bj09PVwicm93XCImJih0aGlzLl9lbWl0Um93RXZlbnRzPSEwKX0uYmluZCh0aGlzKSl9O0ljLmluaGVyaXRzKFxucWUsT3MpO3ZhciBQYz17c3FsU3RhdGU6XCJjb2RlXCIsc3RhdGVtZW50UG9zaXRpb246XCJwb3NpdGlvblwiLG1lc3NhZ2VQcmltYXJ5OlwibWVzc1xcXG5hZ2VcIixjb250ZXh0Olwid2hlcmVcIixzY2hlbWFOYW1lOlwic2NoZW1hXCIsdGFibGVOYW1lOlwidGFibGVcIixjb2x1bW5OYW1lOlwiY29sdW1uXCIsZGF0YVR5cGVOYW1lOlwiXFxcbmRhdGFUeXBlXCIsY29uc3RyYWludE5hbWU6XCJjb25zdHJhaW50XCIsc291cmNlRmlsZTpcImZpbGVcIixzb3VyY2VMaW5lOlwibGluZVwiLHNvdXJjZUZ1bmN0aW9uOlwiXFxcbnJvdXRpbmVcIn07cWUucHJvdG90eXBlLmhhbmRsZUVycm9yPWZ1bmN0aW9uKHIpe3ZhciBlPXRoaXMubmF0aXZlLnBxLnJlc3VsdEVycm9yRmllbGRzKCk7XG5pZihlKWZvcih2YXIgdCBpbiBlKXt2YXIgbj1QY1t0XXx8dDtyW25dPWVbdF19dGhpcy5jYWxsYmFjaz90aGlzLmNhbGxiYWNrKHIpOnRoaXMuXG5lbWl0KFwiZXJyb3JcIixyKSx0aGlzLnN0YXRlPVwiZXJyb3JcIn07cWUucHJvdG90eXBlLnRoZW49ZnVuY3Rpb24ocixlKXtyZXR1cm4gdGhpcy5cbl9nZXRQcm9taXNlKCkudGhlbihyLGUpfTtxZS5wcm90b3R5cGUuY2F0Y2g9ZnVuY3Rpb24ocil7cmV0dXJuIHRoaXMuX2dldFByb21pc2UoKS5cbmNhdGNoKHIpfTtxZS5wcm90b3R5cGUuX2dldFByb21pc2U9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fcHJvbWlzZT90aGlzLl9wcm9taXNlOlxuKHRoaXMuX3Byb21pc2U9bmV3IFByb21pc2UoZnVuY3Rpb24ocixlKXt0aGlzLl9vbmNlKFwiZW5kXCIsciksdGhpcy5fb25jZShcImVycm9yXCIsXG5lKX0uYmluZCh0aGlzKSksdGhpcy5fcHJvbWlzZSl9O3FlLnByb3RvdHlwZS5zdWJtaXQ9ZnVuY3Rpb24ocil7dGhpcy5zdGF0ZT1cInJ1bm5cXFxuaW5nXCI7dmFyIGU9dGhpczt0aGlzLm5hdGl2ZT1yLm5hdGl2ZSxyLm5hdGl2ZS5hcnJheU1vZGU9dGhpcy5fYXJyYXlNb2RlO3ZhciB0PWEoXG5mdW5jdGlvbihzLG8sdSl7aWYoci5uYXRpdmUuYXJyYXlNb2RlPSExLHgoZnVuY3Rpb24oKXtlLmVtaXQoXCJfZG9uZVwiKX0pLHMpcmV0dXJuIGUuXG5oYW5kbGVFcnJvcihzKTtlLl9lbWl0Um93RXZlbnRzJiYodS5sZW5ndGg+MT9vLmZvckVhY2goKGMsaCk9PntjLmZvckVhY2gobD0+e2UuZW1pdChcblwicm93XCIsbCx1W2hdKX0pfSk6by5mb3JFYWNoKGZ1bmN0aW9uKGMpe2UuZW1pdChcInJvd1wiLGMsdSl9KSksZS5zdGF0ZT1cImVuZFwiLGUuZW1pdChcblwiZW5kXCIsdSksZS5jYWxsYmFjayYmZS5jYWxsYmFjayhudWxsLHUpfSxcImFmdGVyXCIpO2lmKG0uZG9tYWluJiYodD1tLmRvbWFpbi5iaW5kKFxudCkpLHRoaXMubmFtZSl7dGhpcy5uYW1lLmxlbmd0aD42MyYmKGNvbnNvbGUuZXJyb3IoXCJXYXJuaW5nISBQb3N0Z3JlcyBvbmx5IHN1cHBvXFxcbnJ0cyA2MyBjaGFyYWN0ZXJzIGZvciBxdWVyeSBuYW1lcy5cIiksY29uc29sZS5lcnJvcihcIllvdSBzdXBwbGllZCAlcyAoJXMpXCIsdGhpcy5uYW1lLFxudGhpcy5uYW1lLmxlbmd0aCksY29uc29sZS5lcnJvcihcIlRoaXMgY2FuIGNhdXNlIGNvbmZsaWN0cyBhbmQgc2lsZW50IGVycm9ycyBleGVjXFxcbnV0aW5nIHF1ZXJpZXNcIikpO3ZhciBuPSh0aGlzLnZhbHVlc3x8W10pLm1hcCh3bi5wcmVwYXJlVmFsdWUpO2lmKHIubmFtZWRRdWVyaWVzW3RoaXMuXG5uYW1lXSl7aWYodGhpcy50ZXh0JiZyLm5hbWVkUXVlcmllc1t0aGlzLm5hbWVdIT09dGhpcy50ZXh0KXtsZXQgcz1uZXcgRXJyb3IoYFByZVxcXG5wYXJlZCBzdGF0ZW1lbnRzIG11c3QgYmUgdW5pcXVlIC0gJyR7dGhpcy5uYW1lfScgd2FzIHVzZWQgZm9yIGEgZGlmZmVyZW50IHN0YXRlbVxcXG5lbnRgKTtyZXR1cm4gdChzKX1yZXR1cm4gci5uYXRpdmUuZXhlY3V0ZSh0aGlzLm5hbWUsbix0KX1yZXR1cm4gci5uYXRpdmUucHJlcGFyZShcbnRoaXMubmFtZSx0aGlzLnRleHQsbi5sZW5ndGgsZnVuY3Rpb24ocyl7cmV0dXJuIHM/dChzKTooci5uYW1lZFF1ZXJpZXNbZS5uYW1lXT1lLlxudGV4dCxlLm5hdGl2ZS5leGVjdXRlKGUubmFtZSxuLHQpKX0pfWVsc2UgaWYodGhpcy52YWx1ZXMpe2lmKCFBcnJheS5pc0FycmF5KHRoaXMuXG52YWx1ZXMpKXtsZXQgcz1uZXcgRXJyb3IoXCJRdWVyeSB2YWx1ZXMgbXVzdCBiZSBhbiBhcnJheVwiKTtyZXR1cm4gdChzKX12YXIgaT10aGlzLlxudmFsdWVzLm1hcCh3bi5wcmVwYXJlVmFsdWUpO3IubmF0aXZlLnF1ZXJ5KHRoaXMudGV4dCxpLHQpfWVsc2Ugci5uYXRpdmUucXVlcnkodGhpcy5cbnRleHQsdCl9fSk7dmFyIEhzPUkoKHdmLGpzKT0+e1widXNlIHN0cmljdFwiO3AoKTt2YXIgQmM9KGtzKCksTihEcykpLExjPW10KCksZ2Y9VXMoKSxRcz13ZSgpLlxuRXZlbnRFbWl0dGVyLFJjPShIZSgpLE4oamUpKSxGYz1ndCgpLFdzPXFzKCksSj1qcy5leHBvcnRzPWZ1bmN0aW9uKHIpe1FzLmNhbGwodGhpcyksXG5yPXJ8fHt9LHRoaXMuX1Byb21pc2U9ci5Qcm9taXNlfHxTLlByb21pc2UsdGhpcy5fdHlwZXM9bmV3IExjKHIudHlwZXMpLHRoaXMubmF0aXZlPVxubmV3IEJjKHt0eXBlczp0aGlzLl90eXBlc30pLHRoaXMuX3F1ZXJ5UXVldWU9W10sdGhpcy5fZW5kaW5nPSExLHRoaXMuX2Nvbm5lY3Rpbmc9XG4hMSx0aGlzLl9jb25uZWN0ZWQ9ITEsdGhpcy5fcXVlcnlhYmxlPSEwO3ZhciBlPXRoaXMuY29ubmVjdGlvblBhcmFtZXRlcnM9bmV3IEZjKFxucik7dGhpcy51c2VyPWUudXNlcixPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcyxcInBhc3N3b3JkXCIse2NvbmZpZ3VyYWJsZTohMCxlbnVtZXJhYmxlOiExLFxud3JpdGFibGU6ITAsdmFsdWU6ZS5wYXNzd29yZH0pLHRoaXMuZGF0YWJhc2U9ZS5kYXRhYmFzZSx0aGlzLmhvc3Q9ZS5ob3N0LHRoaXMucG9ydD1cbmUucG9ydCx0aGlzLm5hbWVkUXVlcmllcz17fX07Si5RdWVyeT1XcztSYy5pbmhlcml0cyhKLFFzKTtKLnByb3RvdHlwZS5fZXJyb3JBbGxRdWVyaWVzPVxuZnVuY3Rpb24ocil7bGV0IGU9YSh0PT57bS5uZXh0VGljaygoKT0+e3QubmF0aXZlPXRoaXMubmF0aXZlLHQuaGFuZGxlRXJyb3Iocil9KX0sXG5cImVucXVldWVFcnJvclwiKTt0aGlzLl9oYXNBY3RpdmVRdWVyeSgpJiYoZSh0aGlzLl9hY3RpdmVRdWVyeSksdGhpcy5fYWN0aXZlUXVlcnk9XG5udWxsKSx0aGlzLl9xdWVyeVF1ZXVlLmZvckVhY2goZSksdGhpcy5fcXVlcnlRdWV1ZS5sZW5ndGg9MH07Si5wcm90b3R5cGUuX2Nvbm5lY3Q9XG5mdW5jdGlvbihyKXt2YXIgZT10aGlzO2lmKHRoaXMuX2Nvbm5lY3Rpbmcpe20ubmV4dFRpY2soKCk9PnIobmV3IEVycm9yKFwiQ2xpZW50IGhcXFxuYXMgYWxyZWFkeSBiZWVuIGNvbm5lY3RlZC4gWW91IGNhbm5vdCByZXVzZSBhIGNsaWVudC5cIikpKTtyZXR1cm59dGhpcy5fY29ubmVjdGluZz1cbiEwLHRoaXMuY29ubmVjdGlvblBhcmFtZXRlcnMuZ2V0TGlicHFDb25uZWN0aW9uU3RyaW5nKGZ1bmN0aW9uKHQsbil7aWYodClyZXR1cm4gcihcbnQpO2UubmF0aXZlLmNvbm5lY3QobixmdW5jdGlvbihpKXtpZihpKXJldHVybiBlLm5hdGl2ZS5lbmQoKSxyKGkpO2UuX2Nvbm5lY3RlZD0hMCxcbmUubmF0aXZlLm9uKFwiZXJyb3JcIixmdW5jdGlvbihzKXtlLl9xdWVyeWFibGU9ITEsZS5fZXJyb3JBbGxRdWVyaWVzKHMpLGUuZW1pdChcImVyXFxcbnJvclwiLHMpfSksZS5uYXRpdmUub24oXCJub3RpZmljYXRpb25cIixmdW5jdGlvbihzKXtlLmVtaXQoXCJub3RpZmljYXRpb25cIix7Y2hhbm5lbDpzLlxucmVsbmFtZSxwYXlsb2FkOnMuZXh0cmF9KX0pLGUuZW1pdChcImNvbm5lY3RcIiksZS5fcHVsc2VRdWVyeVF1ZXVlKCEwKSxyKCl9KX0pfTtKLlxucHJvdG90eXBlLmNvbm5lY3Q9ZnVuY3Rpb24ocil7aWYocil7dGhpcy5fY29ubmVjdChyKTtyZXR1cm59cmV0dXJuIG5ldyB0aGlzLl9Qcm9taXNlKFxuKGUsdCk9Pnt0aGlzLl9jb25uZWN0KG49PntuP3Qobik6ZSgpfSl9KX07Si5wcm90b3R5cGUucXVlcnk9ZnVuY3Rpb24ocixlLHQpe3ZhciBuLFxuaSxzLG8sdTtpZihyPT1udWxsKXRocm93IG5ldyBUeXBlRXJyb3IoXCJDbGllbnQgd2FzIHBhc3NlZCBhIG51bGwgb3IgdW5kZWZpbmVkIHF1XFxcbmVyeVwiKTtpZih0eXBlb2Ygci5zdWJtaXQ9PVwiZnVuY3Rpb25cIilzPXIucXVlcnlfdGltZW91dHx8dGhpcy5jb25uZWN0aW9uUGFyYW1ldGVycy5cbnF1ZXJ5X3RpbWVvdXQsaT1uPXIsdHlwZW9mIGU9PVwiZnVuY3Rpb25cIiYmKHIuY2FsbGJhY2s9ZSk7ZWxzZSBpZihzPXRoaXMuY29ubmVjdGlvblBhcmFtZXRlcnMuXG5xdWVyeV90aW1lb3V0LG49bmV3IFdzKHIsZSx0KSwhbi5jYWxsYmFjayl7bGV0IGMsaDtpPW5ldyB0aGlzLl9Qcm9taXNlKChsLGQpPT57Yz1cbmwsaD1kfSksbi5jYWxsYmFjaz0obCxkKT0+bD9oKGwpOmMoZCl9cmV0dXJuIHMmJih1PW4uY2FsbGJhY2ssbz1zZXRUaW1lb3V0KCgpPT57XG52YXIgYz1uZXcgRXJyb3IoXCJRdWVyeSByZWFkIHRpbWVvdXRcIik7bS5uZXh0VGljaygoKT0+e24uaGFuZGxlRXJyb3IoYyx0aGlzLmNvbm5lY3Rpb24pfSksXG51KGMpLG4uY2FsbGJhY2s9KCk9Pnt9O3ZhciBoPXRoaXMuX3F1ZXJ5UXVldWUuaW5kZXhPZihuKTtoPi0xJiZ0aGlzLl9xdWVyeVF1ZXVlLlxuc3BsaWNlKGgsMSksdGhpcy5fcHVsc2VRdWVyeVF1ZXVlKCl9LHMpLG4uY2FsbGJhY2s9KGMsaCk9PntjbGVhclRpbWVvdXQobyksdShjLGgpfSksXG50aGlzLl9xdWVyeWFibGU/dGhpcy5fZW5kaW5nPyhuLm5hdGl2ZT10aGlzLm5hdGl2ZSxtLm5leHRUaWNrKCgpPT57bi5oYW5kbGVFcnJvcihcbm5ldyBFcnJvcihcIkNsaWVudCB3YXMgY2xvc2VkIGFuZCBpcyBub3QgcXVlcnlhYmxlXCIpKX0pLGkpOih0aGlzLl9xdWVyeVF1ZXVlLnB1c2goXG5uKSx0aGlzLl9wdWxzZVF1ZXJ5UXVldWUoKSxpKToobi5uYXRpdmU9dGhpcy5uYXRpdmUsbS5uZXh0VGljaygoKT0+e24uaGFuZGxlRXJyb3IoXG5uZXcgRXJyb3IoXCJDbGllbnQgaGFzIGVuY291bnRlcmVkIGEgY29ubmVjdGlvbiBlcnJvciBhbmQgaXMgbm90IHF1ZXJ5YWJsZVwiKSl9KSxpKX07XG5KLnByb3RvdHlwZS5lbmQ9ZnVuY3Rpb24ocil7dmFyIGU9dGhpczt0aGlzLl9lbmRpbmc9ITAsdGhpcy5fY29ubmVjdGVkfHx0aGlzLm9uY2UoXG5cImNvbm5lY3RcIix0aGlzLmVuZC5iaW5kKHRoaXMscikpO3ZhciB0O3JldHVybiByfHwodD1uZXcgdGhpcy5fUHJvbWlzZShmdW5jdGlvbihuLGkpe1xucj1hKHM9PnM/aShzKTpuKCksXCJjYlwiKX0pKSx0aGlzLm5hdGl2ZS5lbmQoZnVuY3Rpb24oKXtlLl9lcnJvckFsbFF1ZXJpZXMobmV3IEVycm9yKFxuXCJDb25uZWN0aW9uIHRlcm1pbmF0ZWRcIikpLG0ubmV4dFRpY2soKCk9PntlLmVtaXQoXCJlbmRcIiksciYmcigpfSl9KSx0fTtKLnByb3RvdHlwZS5cbl9oYXNBY3RpdmVRdWVyeT1mdW5jdGlvbigpe3JldHVybiB0aGlzLl9hY3RpdmVRdWVyeSYmdGhpcy5fYWN0aXZlUXVlcnkuc3RhdGUhPT1cIlxcXG5lcnJvclwiJiZ0aGlzLl9hY3RpdmVRdWVyeS5zdGF0ZSE9PVwiZW5kXCJ9O0oucHJvdG90eXBlLl9wdWxzZVF1ZXJ5UXVldWU9ZnVuY3Rpb24ocil7XG5pZih0aGlzLl9jb25uZWN0ZWQmJiF0aGlzLl9oYXNBY3RpdmVRdWVyeSgpKXt2YXIgZT10aGlzLl9xdWVyeVF1ZXVlLnNoaWZ0KCk7aWYoIWUpe1xucnx8dGhpcy5lbWl0KFwiZHJhaW5cIik7cmV0dXJufXRoaXMuX2FjdGl2ZVF1ZXJ5PWUsZS5zdWJtaXQodGhpcyk7dmFyIHQ9dGhpcztlLm9uY2UoXG5cIl9kb25lXCIsZnVuY3Rpb24oKXt0Ll9wdWxzZVF1ZXJ5UXVldWUoKX0pfX07Si5wcm90b3R5cGUuY2FuY2VsPWZ1bmN0aW9uKHIpe3RoaXMuXG5fYWN0aXZlUXVlcnk9PT1yP3RoaXMubmF0aXZlLmNhbmNlbChmdW5jdGlvbigpe30pOnRoaXMuX3F1ZXJ5UXVldWUuaW5kZXhPZihyKSE9PVxuLTEmJnRoaXMuX3F1ZXJ5UXVldWUuc3BsaWNlKHRoaXMuX3F1ZXJ5UXVldWUuaW5kZXhPZihyKSwxKX07Si5wcm90b3R5cGUucmVmPWZ1bmN0aW9uKCl7fTtcbkoucHJvdG90eXBlLnVucmVmPWZ1bmN0aW9uKCl7fTtKLnByb3RvdHlwZS5zZXRUeXBlUGFyc2VyPWZ1bmN0aW9uKHIsZSx0KXtyZXR1cm4gdGhpcy5cbl90eXBlcy5zZXRUeXBlUGFyc2VyKHIsZSx0KX07Si5wcm90b3R5cGUuZ2V0VHlwZVBhcnNlcj1mdW5jdGlvbihyLGUpe3JldHVybiB0aGlzLlxuX3R5cGVzLmdldFR5cGVQYXJzZXIocixlKX19KTt2YXIgYm49SSgoeGYsR3MpPT57XCJ1c2Ugc3RyaWN0XCI7cCgpO0dzLmV4cG9ydHM9SHMoKX0pO3ZhciBDdD1JKChFZixydCk9PntcInVzZSBzdHJpY3RcIjtwKCk7dmFyIE1jPUJzKCksRGM9WGUoKSxrYz1obigpLFVjPU1zKCkse0RhdGFiYXNlRXJyb3I6T2N9PWFuKCksXG5OYz1hKHI9Pnt2YXIgZTtyZXR1cm4gZT1jbGFzcyBleHRlbmRzIFVje2NvbnN0cnVjdG9yKG4pe3N1cGVyKG4scil9fSxhKGUsXCJCb3VuZFBcXFxub29sXCIpLGV9LFwicG9vbEZhY3RvcnlcIiksU249YShmdW5jdGlvbihyKXt0aGlzLmRlZmF1bHRzPURjLHRoaXMuQ2xpZW50PXIsdGhpcy5RdWVyeT1cbnRoaXMuQ2xpZW50LlF1ZXJ5LHRoaXMuUG9vbD1OYyh0aGlzLkNsaWVudCksdGhpcy5fcG9vbHM9W10sdGhpcy5Db25uZWN0aW9uPWtjLHRoaXMuXG50eXBlcz1KZSgpLHRoaXMuRGF0YWJhc2VFcnJvcj1PY30sXCJQR1wiKTt0eXBlb2YgbS5lbnYuTk9ERV9QR19GT1JDRV9OQVRJVkU8XCJ1XCI/cnQuXG5leHBvcnRzPW5ldyBTbihibigpKToocnQuZXhwb3J0cz1uZXcgU24oTWMpLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShydC5leHBvcnRzLFwibmFcXFxudGl2ZVwiLHtjb25maWd1cmFibGU6ITAsZW51bWVyYWJsZTohMSxnZXQoKXt2YXIgcj1udWxsO3RyeXtyPW5ldyBTbihibigpKX1jYXRjaChlKXtcbmlmKGUuY29kZSE9PVwiTU9EVUxFX05PVF9GT1VORFwiKXRocm93IGV9cmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShydC5leHBvcnRzLFwiXFxcbm5hdGl2ZVwiLHt2YWx1ZTpyfSkscn19KSl9KTtwKCk7dmFyIFR0PVRlKEN0KCkpO3d0KCk7cCgpO3ByKCk7d3QoKTt2YXIgS3M9VGUoZXQoKSksenM9VGUobXQoKSk7dmFyIHhuPWNsYXNzIHhuIGV4dGVuZHMgRXJyb3J7Y29uc3RydWN0b3IoKXtzdXBlciguLi5hcmd1bWVudHMpO18odGhpcyxcIm5hbWVcIixcIk5cXFxuZW9uRGJFcnJvclwiKTtfKHRoaXMsXCJzZXZlcml0eVwiKTtfKHRoaXMsXCJjb2RlXCIpO18odGhpcyxcImRldGFpbFwiKTtfKHRoaXMsXCJoaW50XCIpO18oXG50aGlzLFwicG9zaXRpb25cIik7Xyh0aGlzLFwiaW50ZXJuYWxQb3NpdGlvblwiKTtfKHRoaXMsXCJpbnRlcm5hbFF1ZXJ5XCIpO18odGhpcyxcIndoZXJcXFxuZVwiKTtfKHRoaXMsXCJzY2hlbWFcIik7Xyh0aGlzLFwidGFibGVcIik7Xyh0aGlzLFwiY29sdW1uXCIpO18odGhpcyxcImRhdGFUeXBlXCIpO18odGhpcyxcblwiY29uc3RyYWludFwiKTtfKHRoaXMsXCJmaWxlXCIpO18odGhpcyxcImxpbmVcIik7Xyh0aGlzLFwicm91dGluZVwiKTtfKHRoaXMsXCJzb3VyY2VFcnJvXFxcbnJcIil9fTthKHhuLFwiTmVvbkRiRXJyb3JcIik7dmFyIEFlPXhuLCRzPVwidHJhbnNhY3Rpb24oKSBleHBlY3RzIGFuIGFycmF5IG9mIHF1ZXJpZVxcXG5zLCBvciBhIGZ1bmN0aW9uIHJldHVybmluZyBhbiBhcnJheSBvZiBxdWVyaWVzXCIscWM9W1wic2V2ZXJpdHlcIixcImNvZGVcIixcImRldGFpbFwiLFwiXFxcbmhpbnRcIixcInBvc2l0aW9uXCIsXCJpbnRlcm5hbFBvc2l0aW9uXCIsXCJpbnRlcm5hbFF1ZXJ5XCIsXCJ3aGVyZVwiLFwic2NoZW1hXCIsXCJ0YWJsZVwiLFwiY29cXFxubHVtblwiLFwiZGF0YVR5cGVcIixcImNvbnN0cmFpbnRcIixcImZpbGVcIixcImxpbmVcIixcInJvdXRpbmVcIl07ZnVuY3Rpb24gWXMocix7YXJyYXlNb2RlOmUsXG5mdWxsUmVzdWx0czp0LGZldGNoT3B0aW9uczpuLGlzb2xhdGlvbkxldmVsOmkscmVhZE9ubHk6cyxkZWZlcnJhYmxlOm8scXVlcnlDYWxsYmFjazp1LFxucmVzdWx0Q2FsbGJhY2s6Y309e30pe2lmKCFyKXRocm93IG5ldyBFcnJvcihcIk5vIGRhdGFiYXNlIGNvbm5lY3Rpb24gc3RyaW5nIHdhcyBwXFxcbnJvdmlkZWQgdG8gYG5lb24oKWAuIFBlcmhhcHMgYW4gZW52aXJvbm1lbnQgdmFyaWFibGUgaGFzIG5vdCBiZWVuIHNldD9cIik7bGV0IGg7dHJ5e1xuaD1mcihyKX1jYXRjaHt0aHJvdyBuZXcgRXJyb3IoXCJEYXRhYmFzZSBjb25uZWN0aW9uIHN0cmluZyBwcm92aWRlZCB0byBgbmVvbigpYCBpXFxcbnMgbm90IGEgdmFsaWQgVVJMLiBDb25uZWN0aW9uIHN0cmluZzogXCIrU3RyaW5nKHIpKX1sZXR7cHJvdG9jb2w6bCx1c2VybmFtZTpkLHBhc3N3b3JkOmIsXG5ob3N0bmFtZTpDLHBvcnQ6QixwYXRobmFtZTpXfT1oO2lmKGwhPT1cInBvc3RncmVzOlwiJiZsIT09XCJwb3N0Z3Jlc3FsOlwifHwhZHx8IWJ8fCFDfHxcbiFXKXRocm93IG5ldyBFcnJvcihcIkRhdGFiYXNlIGNvbm5lY3Rpb24gc3RyaW5nIGZvcm1hdCBmb3IgYG5lb24oKWAgc2hvdWxkIGJlOiBwb1xcXG5zdGdyZXNxbDovL3VzZXI6cGFzc3dvcmRAaG9zdC50bGQvZGJuYW1lP29wdGlvbj12YWx1ZVwiKTtmdW5jdGlvbiBYKEEsLi4udyl7bGV0IFAsXG5WO2lmKHR5cGVvZiBBPT1cInN0cmluZ1wiKVA9QSxWPXdbMV0sdz13WzBdPz9bXTtlbHNle1A9XCJcIjtmb3IobGV0IGo9MDtqPEEubGVuZ3RoO2orKylcblArPUFbal0sajx3Lmxlbmd0aCYmKFArPVwiJFwiKyhqKzEpKX13PXcubWFwKGo9PigwLEtzLnByZXBhcmVWYWx1ZSkoaikpO2xldCBrPXtxdWVyeTpQLFxucGFyYW1zOnd9O3JldHVybiB1JiZ1KGspLFFjKGRlLGssVil9YShYLFwicmVzb2x2ZVwiKSxYLnRyYW5zYWN0aW9uPWFzeW5jKEEsdyk9PntpZih0eXBlb2YgQT09XG5cImZ1bmN0aW9uXCImJihBPUEoWCkpLCFBcnJheS5pc0FycmF5KEEpKXRocm93IG5ldyBFcnJvcigkcyk7QS5mb3JFYWNoKGs9PntpZihrW1N5bWJvbC5cbnRvU3RyaW5nVGFnXSE9PVwiTmVvblF1ZXJ5UHJvbWlzZVwiKXRocm93IG5ldyBFcnJvcigkcyl9KTtsZXQgUD1BLm1hcChrPT5rLnBhcmFtZXRlcml6ZWRRdWVyeSksXG5WPUEubWFwKGs9Pmsub3B0cz8/e30pO3JldHVybiBkZShQLFYsdyl9O2FzeW5jIGZ1bmN0aW9uIGRlKEEsdyxQKXtsZXR7ZmV0Y2hFbmRwb2ludDpWLFxuZmV0Y2hGdW5jdGlvbjprfT1fZSxqPXR5cGVvZiBWPT1cImZ1bmN0aW9uXCI/VihDLEIpOlYsY2U9QXJyYXkuaXNBcnJheShBKT97cXVlcmllczpBfTpcbkEsZWU9bj8/e30sUj1lPz8hMSxHPXQ/PyExLGhlPWkseWU9cyx4ZT1vO1AhPT12b2lkIDAmJihQLmZldGNoT3B0aW9ucyE9PXZvaWQgMCYmXG4oZWU9ey4uLmVlLC4uLlAuZmV0Y2hPcHRpb25zfSksUC5hcnJheU1vZGUhPT12b2lkIDAmJihSPVAuYXJyYXlNb2RlKSxQLmZ1bGxSZXN1bHRzIT09XG52b2lkIDAmJihHPVAuZnVsbFJlc3VsdHMpLFAuaXNvbGF0aW9uTGV2ZWwhPT12b2lkIDAmJihoZT1QLmlzb2xhdGlvbkxldmVsKSxQLnJlYWRPbmx5IT09XG52b2lkIDAmJih5ZT1QLnJlYWRPbmx5KSxQLmRlZmVycmFibGUhPT12b2lkIDAmJih4ZT1QLmRlZmVycmFibGUpKSx3IT09dm9pZCAwJiYhQXJyYXkuXG5pc0FycmF5KHcpJiZ3LmZldGNoT3B0aW9ucyE9PXZvaWQgMCYmKGVlPXsuLi5lZSwuLi53LmZldGNoT3B0aW9uc30pO2xldCBtZT17XCJOZW9cXFxubi1Db25uZWN0aW9uLVN0cmluZ1wiOnIsXCJOZW9uLVJhdy1UZXh0LU91dHB1dFwiOlwidHJ1ZVwiLFwiTmVvbi1BcnJheS1Nb2RlXCI6XCJ0cnVlXCJ9O0FycmF5LlxuaXNBcnJheShBKSYmKGhlIT09dm9pZCAwJiYobWVbXCJOZW9uLUJhdGNoLUlzb2xhdGlvbi1MZXZlbFwiXT1oZSkseWUhPT12b2lkIDAmJihtZVtcIlxcXG5OZW9uLUJhdGNoLVJlYWQtT25seVwiXT1TdHJpbmcoeWUpKSx4ZSE9PXZvaWQgMCYmKG1lW1wiTmVvbi1CYXRjaC1EZWZlcnJhYmxlXCJdPVN0cmluZyhcbnhlKSkpO2xldCBzZTt0cnl7c2U9YXdhaXQoaz8/ZmV0Y2gpKGose21ldGhvZDpcIlBPU1RcIixib2R5OkpTT04uc3RyaW5naWZ5KGNlKSxoZWFkZXJzOm1lLFxuLi4uZWV9KX1jYXRjaChvZSl7bGV0IFU9bmV3IEFlKGBFcnJvciBjb25uZWN0aW5nIHRvIGRhdGFiYXNlOiAke29lLm1lc3NhZ2V9YCk7dGhyb3cgVS5cbnNvdXJjZUVycm9yPW9lLFV9aWYoc2Uub2spe2xldCBvZT1hd2FpdCBzZS5qc29uKCk7aWYoQXJyYXkuaXNBcnJheShBKSl7bGV0IFU9b2UuXG5yZXN1bHRzO2lmKCFBcnJheS5pc0FycmF5KFUpKXRocm93IG5ldyBBZShcIk5lb24gaW50ZXJuYWwgZXJyb3I6IHVuZXhwZWN0ZWQgcmVzdWxcXFxudCBmb3JtYXRcIik7cmV0dXJuIFUubWFwKChLLGxlKT0+e2xldCBJdD13W2xlXT8/e30sWHM9SXQuYXJyYXlNb2RlPz9SLGVvPUl0LmZ1bGxSZXN1bHRzPz9cbkc7cmV0dXJuIFZzKEsse2FycmF5TW9kZTpYcyxmdWxsUmVzdWx0czplbyxwYXJhbWV0ZXJpemVkUXVlcnk6QVtsZV0scmVzdWx0Q2FsbGJhY2s6YyxcbnR5cGVzOkl0LnR5cGVzfSl9KX1lbHNle2xldCBVPXc/P3t9LEs9VS5hcnJheU1vZGU/P1IsbGU9VS5mdWxsUmVzdWx0cz8/RztyZXR1cm4gVnMoXG5vZSx7YXJyYXlNb2RlOkssZnVsbFJlc3VsdHM6bGUscGFyYW1ldGVyaXplZFF1ZXJ5OkEscmVzdWx0Q2FsbGJhY2s6Yyx0eXBlczpVLnR5cGVzfSl9fWVsc2V7XG5sZXR7c3RhdHVzOm9lfT1zZTtpZihvZT09PTQwMCl7bGV0IFU9YXdhaXQgc2UuanNvbigpLEs9bmV3IEFlKFUubWVzc2FnZSk7Zm9yKGxldCBsZSBvZiBxYylcbktbbGVdPVVbbGVdPz92b2lkIDA7dGhyb3cgS31lbHNle2xldCBVPWF3YWl0IHNlLnRleHQoKTt0aHJvdyBuZXcgQWUoYFNlcnZlciBlcnJvXFxcbnIgKEhUVFAgc3RhdHVzICR7b2V9KTogJHtVfWApfX19cmV0dXJuIGEoZGUsXCJleGVjdXRlXCIpLFh9YShZcyxcIm5lb25cIik7ZnVuY3Rpb24gUWMocixlLHQpe1xucmV0dXJue1tTeW1ib2wudG9TdHJpbmdUYWddOlwiTmVvblF1ZXJ5UHJvbWlzZVwiLHBhcmFtZXRlcml6ZWRRdWVyeTplLG9wdHM6dCx0aGVuOmEoXG4obixpKT0+cihlLHQpLnRoZW4obixpKSxcInRoZW5cIiksY2F0Y2g6YShuPT5yKGUsdCkuY2F0Y2gobiksXCJjYXRjaFwiKSxmaW5hbGx5OmEobj0+cihcbmUsdCkuZmluYWxseShuKSxcImZpbmFsbHlcIil9fWEoUWMsXCJjcmVhdGVOZW9uUXVlcnlQcm9taXNlXCIpO2Z1bmN0aW9uIFZzKHIse2FycmF5TW9kZTplLFxuZnVsbFJlc3VsdHM6dCxwYXJhbWV0ZXJpemVkUXVlcnk6bixyZXN1bHRDYWxsYmFjazppLHR5cGVzOnN9KXtsZXQgbz1uZXcgenMuZGVmYXVsdChcbnMpLHU9ci5maWVsZHMubWFwKGw9PmwubmFtZSksYz1yLmZpZWxkcy5tYXAobD0+by5nZXRUeXBlUGFyc2VyKGwuZGF0YVR5cGVJRCkpLGg9ZT09PVxuITA/ci5yb3dzLm1hcChsPT5sLm1hcCgoZCxiKT0+ZD09PW51bGw/bnVsbDpjW2JdKGQpKSk6ci5yb3dzLm1hcChsPT5PYmplY3QuZnJvbUVudHJpZXMoXG5sLm1hcCgoZCxiKT0+W3VbYl0sZD09PW51bGw/bnVsbDpjW2JdKGQpXSkpKTtyZXR1cm4gaSYmaShuLHIsaCx7YXJyYXlNb2RlOmUsZnVsbFJlc3VsdHM6dH0pLFxudD8oci52aWFOZW9uRmV0Y2g9ITAsci5yb3dBc0FycmF5PWUsci5yb3dzPWgsci5fcGFyc2Vycz1jLHIuX3R5cGVzPW8scik6aH1hKFZzLFwiXFxcbnByb2Nlc3NRdWVyeVJlc3VsdFwiKTt2YXIgSnM9VGUoZ3QoKSksUWU9VGUoQ3QoKSk7dmFyIEVuPWNsYXNzIEVuIGV4dGVuZHMgVHQuQ2xpZW50e2NvbnN0cnVjdG9yKHQpe3N1cGVyKHQpO3RoaXMuY29uZmlnPXR9Z2V0IG5lb25Db25maWcoKXtcbnJldHVybiB0aGlzLmNvbm5lY3Rpb24uc3RyZWFtfWNvbm5lY3QodCl7bGV0e25lb25Db25maWc6bn09dGhpcztuLmZvcmNlRGlzYWJsZVBnU1NMJiZcbih0aGlzLnNzbD10aGlzLmNvbm5lY3Rpb24uc3NsPSExKSx0aGlzLnNzbCYmbi51c2VTZWN1cmVXZWJTb2NrZXQmJmNvbnNvbGUud2FybihcIlxcXG5TU0wgaXMgZW5hYmxlZCBmb3IgYm90aCBQb3N0Z3JlcyAoZS5nLiA/c3NsbW9kZT1yZXF1aXJlIGluIHRoZSBjb25uZWN0aW9uIHN0cmluZ1xcXG4gKyBmb3JjZURpc2FibGVQZ1NTTCA9IGZhbHNlKSBhbmQgdGhlIFdlYlNvY2tldCB0dW5uZWwgKHVzZVNlY3VyZVdlYlNvY2tldCA9IHRydVxcXG5lKS4gRG91YmxlIGVuY3J5cHRpb24gd2lsbCBpbmNyZWFzZSBsYXRlbmN5IGFuZCBDUFUgdXNhZ2UuIEl0IG1heSBiZSBhcHByb3ByaWF0ZVxcXG4gdG8gZGlzYWJsZSBTU0wgaW4gdGhlIFBvc3RncmVzIGNvbm5lY3Rpb24gcGFyYW1ldGVycyBvciBzZXQgZm9yY2VEaXNhYmxlUGdTU0wgPVxcXG4gdHJ1ZS5cIik7bGV0IGk9dGhpcy5jb25maWc/Lmhvc3QhPT12b2lkIDB8fHRoaXMuY29uZmlnPy5jb25uZWN0aW9uU3RyaW5nIT09dm9pZCAwfHxcbm0uZW52LlBHSE9TVCE9PXZvaWQgMCxzPW0uZW52LlVTRVI/P20uZW52LlVTRVJOQU1FO2lmKCFpJiZ0aGlzLmhvc3Q9PT1cImxvY2FsaG9zdFwiJiZcbnRoaXMudXNlcj09PXMmJnRoaXMuZGF0YWJhc2U9PT1zJiZ0aGlzLnBhc3N3b3JkPT09bnVsbCl0aHJvdyBuZXcgRXJyb3IoYE5vIGRhdGFiXFxcbmFzZSBob3N0IG9yIGNvbm5lY3Rpb24gc3RyaW5nIHdhcyBzZXQsIGFuZCBrZXkgcGFyYW1ldGVycyBoYXZlIGRlZmF1bHQgdmFsdWVzIChoXFxcbm9zdDogbG9jYWxob3N0LCB1c2VyOiAke3N9LCBkYjogJHtzfSwgcGFzc3dvcmQ6IG51bGwpLiBJcyBhbiBlbnZpcm9ubWVudCB2YXJpYWJsXFxcbmUgbWlzc2luZz8gQWx0ZXJuYXRpdmVseSwgaWYgeW91IGludGVuZGVkIHRvIGNvbm5lY3Qgd2l0aCB0aGVzZSBwYXJhbWV0ZXJzLCBwbGVhXFxcbnNlIHNldCB0aGUgaG9zdCB0byAnbG9jYWxob3N0JyBleHBsaWNpdGx5LmApO2xldCBvPXN1cGVyLmNvbm5lY3QodCksdT1uLnBpcGVsaW5lVExTJiZcbnRoaXMuc3NsLGM9bi5waXBlbGluZUNvbm5lY3Q9PT1cInBhc3N3b3JkXCI7aWYoIXUmJiFuLnBpcGVsaW5lQ29ubmVjdClyZXR1cm4gbztsZXQgaD10aGlzLlxuY29ubmVjdGlvbjtpZih1JiZoLm9uKFwiY29ubmVjdFwiLCgpPT5oLnN0cmVhbS5lbWl0KFwiZGF0YVwiLFwiU1wiKSksYyl7aC5yZW1vdmVBbGxMaXN0ZW5lcnMoXG5cImF1dGhlbnRpY2F0aW9uQ2xlYXJ0ZXh0UGFzc3dvcmRcIiksaC5yZW1vdmVBbGxMaXN0ZW5lcnMoXCJyZWFkeUZvclF1ZXJ5XCIpLGgub25jZShcblwicmVhZHlGb3JRdWVyeVwiLCgpPT5oLm9uKFwicmVhZHlGb3JRdWVyeVwiLHRoaXMuX2hhbmRsZVJlYWR5Rm9yUXVlcnkuYmluZCh0aGlzKSkpO1xubGV0IGw9dGhpcy5zc2w/XCJzc2xjb25uZWN0XCI6XCJjb25uZWN0XCI7aC5vbihsLCgpPT57dGhpcy5faGFuZGxlQXV0aENsZWFydGV4dFBhc3N3b3JkKCksXG50aGlzLl9oYW5kbGVSZWFkeUZvclF1ZXJ5KCl9KX1yZXR1cm4gb31hc3luYyBfaGFuZGxlQXV0aFNBU0xDb250aW51ZSh0KXtsZXQgbj10aGlzLlxuc2FzbFNlc3Npb24saT10aGlzLnBhc3N3b3JkLHM9dC5kYXRhO2lmKG4ubWVzc2FnZSE9PVwiU0FTTEluaXRpYWxSZXNwb25zZVwifHx0eXBlb2YgaSE9XG5cInN0cmluZ1wifHx0eXBlb2YgcyE9XCJzdHJpbmdcIil0aHJvdyBuZXcgRXJyb3IoXCJTQVNMOiBwcm90b2NvbCBlcnJvclwiKTtsZXQgbz1PYmplY3QuXG5mcm9tRW50cmllcyhzLnNwbGl0KFwiLFwiKS5tYXAoVT0+e2lmKCEvXi49Ly50ZXN0KFUpKXRocm93IG5ldyBFcnJvcihcIlNBU0w6IEludmFsaVxcXG5kIGF0dHJpYnV0ZSBwYWlyIGVudHJ5XCIpO2xldCBLPVVbMF0sbGU9VS5zdWJzdHJpbmcoMik7cmV0dXJuW0ssbGVdfSkpLHU9by5yLGM9by5cbnMsaD1vLmk7aWYoIXV8fCEvXlshLSstLX5dKyQvLnRlc3QodSkpdGhyb3cgbmV3IEVycm9yKFwiU0FTTDogU0NSQU0tU0VSVkVSLUZJUlNULVxcXG5NRVNTQUdFOiBub25jZSBtaXNzaW5nL3VucHJpbnRhYmxlXCIpO2lmKCFjfHwhL14oPzpbYS16QS1aMC05Ky9dezR9KSooPzpbYS16QS1aMC05Ky9dezJ9PT18W2EtekEtWjAtOSsvXXszfT0pPyQvLlxudGVzdChjKSl0aHJvdyBuZXcgRXJyb3IoXCJTQVNMOiBTQ1JBTS1TRVJWRVItRklSU1QtTUVTU0FHRTogc2FsdCBtaXNzaW5nL25vdCBiYXNlXFxcbjY0XCIpO2lmKCFofHwhL15bMS05XVswLTldKiQvLnRlc3QoaCkpdGhyb3cgbmV3IEVycm9yKFwiU0FTTDogU0NSQU0tU0VSVkVSLUZJUlNULU1cXFxuRVNTQUdFOiBtaXNzaW5nL2ludmFsaWQgaXRlcmF0aW9uIGNvdW50XCIpO2lmKCF1LnN0YXJ0c1dpdGgobi5jbGllbnROb25jZSkpdGhyb3cgbmV3IEVycm9yKFxuXCJTQVNMOiBTQ1JBTS1TRVJWRVItRklSU1QtTUVTU0FHRTogc2VydmVyIG5vbmNlIGRvZXMgbm90IHN0YXJ0IHdpdGggY2xpZW50IG5vbmNlXCIpO1xuaWYodS5sZW5ndGg9PT1uLmNsaWVudE5vbmNlLmxlbmd0aCl0aHJvdyBuZXcgRXJyb3IoXCJTQVNMOiBTQ1JBTS1TRVJWRVItRklSU1QtTUVTXFxcblNBR0U6IHNlcnZlciBub25jZSBpcyB0b28gc2hvcnRcIik7bGV0IGw9cGFyc2VJbnQoaCwxMCksZD15LmZyb20oYyxcImJhc2U2NFwiKSxiPW5ldyBUZXh0RW5jb2RlcixcbkM9Yi5lbmNvZGUoaSksQj1hd2FpdCBnLnN1YnRsZS5pbXBvcnRLZXkoXCJyYXdcIixDLHtuYW1lOlwiSE1BQ1wiLGhhc2g6e25hbWU6XCJTSEEtMjVcXFxuNlwifX0sITEsW1wic2lnblwiXSksVz1uZXcgVWludDhBcnJheShhd2FpdCBnLnN1YnRsZS5zaWduKFwiSE1BQ1wiLEIseS5jb25jYXQoW2QseS5mcm9tKFxuWzAsMCwwLDFdKV0pKSksWD1XO2Zvcih2YXIgZGU9MDtkZTxsLTE7ZGUrKylXPW5ldyBVaW50OEFycmF5KGF3YWl0IGcuc3VidGxlLnNpZ24oXG5cIkhNQUNcIixCLFcpKSxYPXkuZnJvbShYLm1hcCgoVSxLKT0+WFtLXV5XW0tdKSk7bGV0IEE9WCx3PWF3YWl0IGcuc3VidGxlLmltcG9ydEtleShcblwicmF3XCIsQSx7bmFtZTpcIkhNQUNcIixoYXNoOntuYW1lOlwiU0hBLTI1NlwifX0sITEsW1wic2lnblwiXSksUD1uZXcgVWludDhBcnJheShhd2FpdCBnLlxuc3VidGxlLnNpZ24oXCJITUFDXCIsdyxiLmVuY29kZShcIkNsaWVudCBLZXlcIikpKSxWPWF3YWl0IGcuc3VidGxlLmRpZ2VzdChcIlNIQS0yNTZcIixcblApLGs9XCJuPSoscj1cIituLmNsaWVudE5vbmNlLGo9XCJyPVwiK3UrXCIscz1cIitjK1wiLGk9XCIrbCxjZT1cImM9Yml3cyxyPVwiK3UsZWU9aytcIixcIitqK1xuXCIsXCIrY2UsUj1hd2FpdCBnLnN1YnRsZS5pbXBvcnRLZXkoXCJyYXdcIixWLHtuYW1lOlwiSE1BQ1wiLGhhc2g6e25hbWU6XCJTSEEtMjU2XCJ9fSwhMSxcbltcInNpZ25cIl0pO3ZhciBHPW5ldyBVaW50OEFycmF5KGF3YWl0IGcuc3VidGxlLnNpZ24oXCJITUFDXCIsUixiLmVuY29kZShlZSkpKSxoZT15LlxuZnJvbShQLm1hcCgoVSxLKT0+UFtLXV5HW0tdKSkseWU9aGUudG9TdHJpbmcoXCJiYXNlNjRcIik7bGV0IHhlPWF3YWl0IGcuc3VidGxlLmltcG9ydEtleShcblwicmF3XCIsQSx7bmFtZTpcIkhNQUNcIixoYXNoOntuYW1lOlwiU0hBLTI1NlwifX0sITEsW1wic2lnblwiXSksbWU9YXdhaXQgZy5zdWJ0bGUuc2lnbihcblwiSE1BQ1wiLHhlLGIuZW5jb2RlKFwiU2VydmVyIEtleVwiKSksc2U9YXdhaXQgZy5zdWJ0bGUuaW1wb3J0S2V5KFwicmF3XCIsbWUse25hbWU6XCJITVxcXG5BQ1wiLGhhc2g6e25hbWU6XCJTSEEtMjU2XCJ9fSwhMSxbXCJzaWduXCJdKTt2YXIgb2U9eS5mcm9tKGF3YWl0IGcuc3VidGxlLnNpZ24oXCJITUFDXCIsXG5zZSxiLmVuY29kZShlZSkpKTtuLm1lc3NhZ2U9XCJTQVNMUmVzcG9uc2VcIixuLnNlcnZlclNpZ25hdHVyZT1vZS50b1N0cmluZyhcImJhc2U2NFwiKSxcbm4ucmVzcG9uc2U9Y2UrXCIscD1cIit5ZSx0aGlzLmNvbm5lY3Rpb24uc2VuZFNDUkFNQ2xpZW50RmluYWxNZXNzYWdlKHRoaXMuc2FzbFNlc3Npb24uXG5yZXNwb25zZSl9fTthKEVuLFwiTmVvbkNsaWVudFwiKTt2YXIgdm49RW47ZnVuY3Rpb24gV2MocixlKXtpZihlKXJldHVybntjYWxsYmFjazplLFxucmVzdWx0OnZvaWQgMH07bGV0IHQsbixpPWEoZnVuY3Rpb24obyx1KXtvP3Qobyk6bih1KX0sXCJjYlwiKSxzPW5ldyByKGZ1bmN0aW9uKG8sdSl7XG5uPW8sdD11fSk7cmV0dXJue2NhbGxiYWNrOmkscmVzdWx0OnN9fWEoV2MsXCJwcm9taXNpZnlcIik7dmFyIF9uPWNsYXNzIF9uIGV4dGVuZHMgVHQuUG9vbHtjb25zdHJ1Y3Rvcigpe1xuc3VwZXIoLi4uYXJndW1lbnRzKTtfKHRoaXMsXCJDbGllbnRcIix2bik7Xyh0aGlzLFwiaGFzRmV0Y2hVbnN1cHBvcnRlZExpc3RlbmVyc1wiLCExKX1vbih0LG4pe1xucmV0dXJuIHQhPT1cImVycm9yXCImJih0aGlzLmhhc0ZldGNoVW5zdXBwb3J0ZWRMaXN0ZW5lcnM9ITApLHN1cGVyLm9uKHQsbil9cXVlcnkodCxuLGkpe1xuaWYoIV9lLnBvb2xRdWVyeVZpYUZldGNofHx0aGlzLmhhc0ZldGNoVW5zdXBwb3J0ZWRMaXN0ZW5lcnN8fHR5cGVvZiB0PT1cImZ1bmN0aW9uXCIpXG5yZXR1cm4gc3VwZXIucXVlcnkodCxuLGkpO3R5cGVvZiBuPT1cImZ1bmN0aW9uXCImJihpPW4sbj12b2lkIDApO2xldCBzPVdjKHRoaXMuUHJvbWlzZSxcbmkpO2k9cy5jYWxsYmFjazt0cnl7bGV0IG89bmV3IEpzLmRlZmF1bHQodGhpcy5vcHRpb25zKSx1PWVuY29kZVVSSUNvbXBvbmVudCxjPWVuY29kZVVSSSxcbmg9YHBvc3RncmVzcWw6Ly8ke3Uoby51c2VyKX06JHt1KG8ucGFzc3dvcmQpfUAke3Uoby5ob3N0KX0vJHtjKG8uZGF0YWJhc2UpfWAsbD10eXBlb2YgdD09XG5cInN0cmluZ1wiP3Q6dC50ZXh0LGQ9bj8/dC52YWx1ZXM/P1tdO1lzKGgse2Z1bGxSZXN1bHRzOiEwLGFycmF5TW9kZTp0LnJvd01vZGU9PT1cIlxcXG5hcnJheVwifSkobCxkLHt0eXBlczp0LnR5cGVzPz90aGlzLm9wdGlvbnM/LnR5cGVzfSkudGhlbihDPT5pKHZvaWQgMCxDKSkuY2F0Y2goQz0+aShcbkMpKX1jYXRjaChvKXtpKG8pfXJldHVybiBzLnJlc3VsdH19O2EoX24sXCJOZW9uUG9vbFwiKTt2YXIgWnM9X247dmFyIGV4cG9ydF9DbGllbnRCYXNlPVFlLkNsaWVudEJhc2U7dmFyIGV4cG9ydF9Db25uZWN0aW9uPVFlLkNvbm5lY3Rpb247dmFyIGV4cG9ydF9EYXRhYmFzZUVycm9yPVFlLkRhdGFiYXNlRXJyb3I7XG52YXIgZXhwb3J0X1F1ZXJ5PVFlLlF1ZXJ5O3ZhciBleHBvcnRfZGVmYXVsdHM9UWUuZGVmYXVsdHM7dmFyIGV4cG9ydF90eXBlcz1RZS50eXBlcztcbmV4cG9ydHt2biBhcyBDbGllbnQsZXhwb3J0X0NsaWVudEJhc2UgYXMgQ2xpZW50QmFzZSxleHBvcnRfQ29ubmVjdGlvbiBhcyBDb25uZWN0aW9uLFxuZXhwb3J0X0RhdGFiYXNlRXJyb3IgYXMgRGF0YWJhc2VFcnJvcixBZSBhcyBOZW9uRGJFcnJvcixacyBhcyBQb29sLGV4cG9ydF9RdWVyeSBhcyBRdWVyeSxcbmV4cG9ydF9kZWZhdWx0cyBhcyBkZWZhdWx0cyxZcyBhcyBuZW9uLF9lIGFzIG5lb25Db25maWcsZXhwb3J0X3R5cGVzIGFzIHR5cGVzfTtcbi8qISBCdW5kbGVkIGxpY2Vuc2UgaW5mb3JtYXRpb246XG5cbmllZWU3NTQvaW5kZXguanM6XG4gICgqISBpZWVlNzU0LiBCU0QtMy1DbGF1c2UgTGljZW5zZS4gRmVyb3NzIEFib3VraGFkaWplaCA8aHR0cHM6Ly9mZXJvc3Mub3JnL29wZW5zb3VyY2U+ICopXG5cbmJ1ZmZlci9pbmRleC5qczpcbiAgKCohXG4gICAqIFRoZSBidWZmZXIgbW9kdWxlIGZyb20gbm9kZS5qcywgZm9yIHRoZSBicm93c2VyLlxuICAgKlxuICAgKiBAYXV0aG9yICAgRmVyb3NzIEFib3VraGFkaWplaCA8aHR0cHM6Ly9mZXJvc3Mub3JnPlxuICAgKiBAbGljZW5zZSAgTUlUXG4gICAqKVxuKi9cbiJdLCJuYW1lcyI6WyJ0byIsIk9iamVjdCIsImNyZWF0ZSIsIkNlIiwiZGVmaW5lUHJvcGVydHkiLCJybyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIm5vIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsImlvIiwiZ2V0UHJvdG90eXBlT2YiLCJzbyIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5Iiwib28iLCJyIiwiZSIsInQiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJ2YWx1ZSIsImEiLCJ6IiwiSSIsImV4cG9ydHMiLCJpZSIsImdldCIsIkFuIiwibiIsImkiLCJjYWxsIiwiVGUiLCJfX2VzTW9kdWxlIiwiTiIsIl8iLCJJbiIsIm50IiwicCIsImJ5dGVMZW5ndGgiLCJ1byIsInRvQnl0ZUFycmF5IiwiaG8iLCJmcm9tQnl0ZUFycmF5IiwicG8iLCJhZSIsInRlIiwiYW8iLCJVaW50OEFycmF5IiwiQXJyYXkiLCJQdCIsInZlIiwiQ24iLCJsZW5ndGgiLCJjaGFyQ29kZUF0IiwiVG4iLCJFcnJvciIsImluZGV4T2YiLCJjbyIsInMiLCJvIiwidSIsImMiLCJsbyIsImZvIiwicHVzaCIsImpvaW4iLCJQbiIsIkJ0IiwicmVhZCIsImgiLCJsIiwiZCIsImIiLCJDIiwiTmFOIiwiTWF0aCIsInBvdyIsIndyaXRlIiwiQiIsIlciLCJhYnMiLCJpc05hTiIsImZsb29yIiwibG9nIiwiTE4yIiwiJG4iLCJMZSIsIkx0IiwiUGUiLCJCbiIsIlN5bWJvbCIsImZvciIsIkJ1ZmZlciIsImYiLCJTbG93QnVmZmVyIiwiU28iLCJJTlNQRUNUX01BWF9CWVRFUyIsIml0Iiwia01heExlbmd0aCIsIlRZUEVEX0FSUkFZX1NVUFBPUlQiLCJ5byIsImNvbnNvbGUiLCJlcnJvciIsImZvbyIsInNldFByb3RvdHlwZU9mIiwiaXNCdWZmZXIiLCJidWZmZXIiLCJieXRlT2Zmc2V0IiwiZmUiLCJSYW5nZUVycm9yIiwiVHlwZUVycm9yIiwiRHQiLCJNbiIsInBvb2xTaXplIiwiZ28iLCJBcnJheUJ1ZmZlciIsImlzVmlldyIsIndvIiwidWUiLCJTaGFyZWRBcnJheUJ1ZmZlciIsIkZ0IiwidmFsdWVPZiIsImZyb20iLCJibyIsInRvUHJpbWl0aXZlIiwiRG4iLCJtbyIsImZpbGwiLCJhbGxvYyIsImt0IiwiYWxsb2NVbnNhZmUiLCJhbGxvY1Vuc2FmZVNsb3ciLCJpc0VuY29kaW5nIiwia24iLCJzbGljZSIsIlJ0IiwiY29weSIsIk90IiwidHlwZSIsImlzQXJyYXkiLCJkYXRhIiwidG9TdHJpbmciLCJfaXNCdWZmZXIiLCJjb21wYXJlIiwib2Zmc2V0IiwibWluIiwiU3RyaW5nIiwidG9Mb3dlckNhc2UiLCJjb25jYXQiLCJzZXQiLCJhcmd1bWVudHMiLCJNdCIsIkduIiwieG8iLCJMbyIsIk9uIiwiUG8iLCJCbyIsIlRvIiwiUm8iLCJFZSIsInN3YXAxNiIsInN3YXAzMiIsInN3YXA2NCIsImFwcGx5IiwidG9Mb2NhbGVTdHJpbmciLCJlcXVhbHMiLCJpbnNwZWN0IiwicmVwbGFjZSIsInRyaW0iLCJVbiIsIkxuIiwibGFzdEluZGV4T2YiLCJyZWFkVUludDE2QkUiLCJpbmNsdWRlcyIsInZvIiwiTnVtYmVyIiwicGFyc2VJbnQiLCJzdWJzdHIiLCJFbyIsInN0IiwiX28iLCJrbyIsIkFvIiwiQ28iLCJVbyIsImlzRmluaXRlIiwidG9KU09OIiwiX2FyciIsIklvIiwiUm4iLCJmcm9tQ2hhckNvZGUiLCJPbyIsInN1YmFycmF5IiwicSIsInJlYWRVaW50TEUiLCJyZWFkVUludExFIiwicmVhZFVpbnRCRSIsInJlYWRVSW50QkUiLCJyZWFkVWludDgiLCJyZWFkVUludDgiLCJyZWFkVWludDE2TEUiLCJyZWFkVUludDE2TEUiLCJyZWFkVWludDE2QkUiLCJyZWFkVWludDMyTEUiLCJyZWFkVUludDMyTEUiLCJyZWFkVWludDMyQkUiLCJyZWFkVUludDMyQkUiLCJyZWFkQmlnVUludDY0TEUiLCJnZSIsIkJlIiwiV2UiLCJCaWdJbnQiLCJyZWFkQmlnVUludDY0QkUiLCJyZWFkSW50TEUiLCJyZWFkSW50QkUiLCJyZWFkSW50OCIsInJlYWRJbnQxNkxFIiwicmVhZEludDE2QkUiLCJyZWFkSW50MzJMRSIsInJlYWRJbnQzMkJFIiwicmVhZEJpZ0ludDY0TEUiLCJyZWFkQmlnSW50NjRCRSIsInJlYWRGbG9hdExFIiwicmVhZEZsb2F0QkUiLCJyZWFkRG91YmxlTEUiLCJyZWFkRG91YmxlQkUiLCJZIiwid3JpdGVVaW50TEUiLCJ3cml0ZVVJbnRMRSIsIndyaXRlVWludEJFIiwid3JpdGVVSW50QkUiLCJ3cml0ZVVpbnQ4Iiwid3JpdGVVSW50OCIsIndyaXRlVWludDE2TEUiLCJ3cml0ZVVJbnQxNkxFIiwid3JpdGVVaW50MTZCRSIsIndyaXRlVUludDE2QkUiLCJ3cml0ZVVpbnQzMkxFIiwid3JpdGVVSW50MzJMRSIsIndyaXRlVWludDMyQkUiLCJ3cml0ZVVJbnQzMkJFIiwiTm4iLCJIbiIsInFuIiwid3JpdGVCaWdVSW50NjRMRSIsIndyaXRlQmlnVUludDY0QkUiLCJ3cml0ZUludExFIiwid3JpdGVJbnRCRSIsIndyaXRlSW50OCIsIndyaXRlSW50MTZMRSIsIndyaXRlSW50MTZCRSIsIndyaXRlSW50MzJMRSIsIndyaXRlSW50MzJCRSIsIndyaXRlQmlnSW50NjRMRSIsIndyaXRlQmlnSW50NjRCRSIsIlFuIiwiV24iLCJ3cml0ZUZsb2F0TEUiLCJ3cml0ZUZsb2F0QkUiLCJqbiIsIndyaXRlRG91YmxlTEUiLCJ3cml0ZURvdWJsZUJFIiwiY29weVdpdGhpbiIsIkllIiwiVXQiLCJjb25zdHJ1Y3RvciIsIm5hbWUiLCJzdGFjayIsImNvZGUiLCJtZXNzYWdlIiwiaXNJbnRlZ2VyIiwiRm4iLCJGbyIsIkVSUl9PVVRfT0ZfUkFOR0UiLCJFUlJfSU5WQUxJRF9BUkdfVFlQRSIsIkVSUl9CVUZGRVJfT1VUX09GX0JPVU5EUyIsIk1vIiwiRG8iLCJzcGxpdCIsIk5vIiwiUyIsIngiLCJ2IiwiZyIsInkiLCJtIiwiZ2xvYmFsVGhpcyIsInNldEltbWVkaWF0ZSIsInNldFRpbWVvdXQiLCJjbGVhckltbWVkaWF0ZSIsImNsZWFyVGltZW91dCIsImNyeXB0byIsInN1YnRsZSIsInByb2Nlc3MiLCJlbnYiLCJuZXh0VGljayIsIlByb21pc2UiLCJyZXNvbHZlIiwidGhlbiIsImJpbmQiLCJ3ZSIsIlhjIiwiTnQiLCJSZSIsIlJlZmxlY3QiLCJWbiIsIkZ1bmN0aW9uIiwib3QiLCJvd25LZXlzIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwicW8iLCJ3YXJuIiwiem4iLCJMIiwiaW5pdCIsIm9uY2UiLCJIbyIsIkV2ZW50RW1pdHRlciIsIl9ldmVudHMiLCJfZXZlbnRzQ291bnQiLCJfbWF4TGlzdGVuZXJzIiwiS24iLCJhdCIsInNldE1heExpc3RlbmVycyIsIlluIiwiZGVmYXVsdE1heExpc3RlbmVycyIsImdldE1heExpc3RlbmVycyIsImVtaXQiLCJjb250ZXh0IiwidGkiLCJabiIsIm5ld0xpc3RlbmVyIiwibGlzdGVuZXIiLCJ1bnNoaWZ0Iiwid2FybmVkIiwiZW1pdHRlciIsImNvdW50IiwiYWRkTGlzdGVuZXIiLCJvbiIsInByZXBlbmRMaXN0ZW5lciIsIlFvIiwiZmlyZWQiLCJ0YXJnZXQiLCJyZW1vdmVMaXN0ZW5lciIsIndyYXBGbiIsIkpuIiwicHJlcGVuZE9uY2VMaXN0ZW5lciIsInNoaWZ0IiwiV28iLCJvZmYiLCJyZW1vdmVBbGxMaXN0ZW5lcnMiLCJrZXlzIiwiWG4iLCJqbyIsImxpc3RlbmVycyIsInJhd0xpc3RlbmVycyIsImxpc3RlbmVyQ291bnQiLCJlaSIsImV2ZW50TmFtZXMiLCJwb3AiLCJyaSIsIkdvIiwiYWRkRXZlbnRMaXN0ZW5lciIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJqZSIsImRlZmF1bHQiLCIkbyIsIkhlIiwiR2UiLCJBIiwidyIsIlVpbnQzMkFycmF5IiwiUiIsIkciLCJoZSIsIlAiLCJWIiwiayIsImoiLCJjZSIsImVlIiwieWUiLCJ4ZSIsIm1lIiwic2UiLCJYIiwiVGV4dEVuY29kZXIiLCJlbmNvZGUiLCJkZSIsImFkZCIsImRpZ2VzdCIsIm5pIiwiTyIsIiRlIiwiaWkiLCJJbnQzMkFycmF5IiwiX2J1ZmZlcjgiLCJfYnVmZmVyIiwiX2J1ZmZlcjMyIiwic3RhcnQiLCJoYXNoQnl0ZUFycmF5Iiwib25lUGFzc0hhc2hlciIsImFwcGVuZEJ5dGVBcnJheSIsImVuZCIsImhhc2hTdHIiLCJhcHBlbmRTdHIiLCJoYXNoQXNjaWlTdHIiLCJhcHBlbmRBc2NpaVN0ciIsIl9oZXgiLCJoZXhDaGFycyIsImhleE91dCIsImNoYXJBdCIsIl9tZDVjeWNsZSIsIl9kYXRhTGVuZ3RoIiwiX2J1ZmZlckxlbmd0aCIsIl9zdGF0ZSIsInN0YXRlSWRlbnRpdHkiLCJnZXRTdGF0ZSIsImJ1ZmxlbiIsInN0YXRlIiwic2V0U3RhdGUiLCJidWZmZXIzMklkZW50aXR5IiwibWF0Y2giLCJxdCIsImNyZWF0ZUhhc2giLCJLbyIsImNyZWF0ZUhtYWMiLCJ6byIsInJhbmRvbUJ5dGVzIiwiVm8iLCJnZXRSYW5kb21WYWx1ZXMiLCJ1cGRhdGUiLCJRdCIsImp0Iiwic2kiLCJwYXJzZSIsIld0IiwidXQiLCJzb3VyY2UiLCJ0cmFuc2Zvcm0iLCJZbyIsInBvc2l0aW9uIiwiZW50cmllcyIsInJlY29yZGVkIiwiZGltZW5zaW9uIiwiaXNFb2YiLCJuZXh0Q2hhcmFjdGVyIiwiZXNjYXBlZCIsInJlY29yZCIsIm5ld0VudHJ5IiwiY29uc3VtZURpbWVuc2lvbnMiLCJIdCIsIm1oIiwib2kiLCJabyIsImNpIiwiYmgiLCJ1aSIsIkpvIiwiWG8iLCJlYSIsInRhIiwidGVzdCIsImV4ZWMiLCJyYSIsImFpIiwicGFyc2VGbG9hdCIsIm5hIiwiRGF0ZSIsIlVUQyIsIkd0Iiwic2V0VVRDRnVsbFllYXIiLCJzZXRUaW1lIiwiZ2V0VGltZSIsInNldEZ1bGxZZWFyIiwiZW5kc1dpdGgiLCJsaSIsInZoIiwiaGkiLCJzYSIsImlhIiwiZGkiLCJBaCIsInBpIiwib2EiLCJGZSIsIndhIiwiYWEiLCJ0b1Bvc3RncmVzIiwiZmlsdGVyIiwibWlsbGlzZWNvbmRzIiwibWFwIiwidG9GaXhlZCIsInVhIiwieWVhcnMiLCJtb250aHMiLCJkYXlzIiwiaG91cnMiLCJtaW51dGVzIiwic2Vjb25kcyIsImNhIiwiaGEiLCJ0b0lTT1N0cmluZyIsInRvSVNPIiwiJHQiLCJsYSIsImZhIiwicGEiLCJkYSIsInlhIiwiUmVnRXhwIiwiZmkiLCJtYSIsImdhIiwicmVkdWNlIiwibWkiLCJJaCIsInlpIiwiRWkiLCJMaCIsInZpIiwiVmUiLCJLZSIsImN0Iiwid2kiLCJiaSIsImh0IiwiU2kiLCJiYSIsIlNhIiwiVnQiLCJ4YSIsInhpIiwidmEiLCJadCIsIkt0IiwicmUiLCJ6dCIsIkVhIiwiX2EiLCJZdCIsImdpIiwiSlNPTiIsInN1YnN0cmluZyIsIkFhIiwicmFkaXVzIiwiQ2EiLCJBaSIsIk1oIiwiX2kiLCJaIiwiVGEiLCJCaSIsIlVoIiwiUGkiLCJJYSIsIkYiLCJJaSIsIlBhIiwiQ2kiLCJCYSIsIkxhIiwiUmEiLCJyb3VuZCIsIlRpIiwiZ2V0VGltZXpvbmVPZmZzZXQiLCJ1c2VjIiwiZ2V0TWljcm9TZWNvbmRzIiwic2V0TWljcm9TZWNvbmRzIiwiZ2V0VVRDTWljcm9TZWNvbmRzIiwiemUiLCJlbmNvZGluZyIsIkZhIiwiTWEiLCJEYSIsIlJpIiwicWgiLCJMaSIsIkJPT0wiLCJCWVRFQSIsIkNIQVIiLCJJTlQ4IiwiSU5UMiIsIklOVDQiLCJSRUdQUk9DIiwiVEVYVCIsIk9JRCIsIlRJRCIsIlhJRCIsIkNJRCIsIlhNTCIsIlBHX05PREVfVFJFRSIsIlNNR1IiLCJQQVRIIiwiUE9MWUdPTiIsIkNJRFIiLCJGTE9BVDQiLCJGTE9BVDgiLCJBQlNUSU1FIiwiUkVMVElNRSIsIlRJTlRFUlZBTCIsIkNJUkNMRSIsIk1BQ0FERFI4IiwiTU9ORVkiLCJNQUNBRERSIiwiSU5FVCIsIkFDTElURU0iLCJCUENIQVIiLCJWQVJDSEFSIiwiREFURSIsIlRJTUUiLCJUSU1FU1RBTVAiLCJUSU1FU1RBTVBUWiIsIklOVEVSVkFMIiwiVElNRVRaIiwiQklUIiwiVkFSQklUIiwiTlVNRVJJQyIsIlJFRkNVUlNPUiIsIlJFR1BST0NFRFVSRSIsIlJFR09QRVIiLCJSRUdPUEVSQVRPUiIsIlJFR0NMQVNTIiwiUkVHVFlQRSIsIlVVSUQiLCJUWElEX1NOQVBTSE9UIiwiUEdfTFNOIiwiUEdfTkRJU1RJTkNUIiwiUEdfREVQRU5ERU5DSUVTIiwiVFNWRUNUT1IiLCJUU1FVRVJZIiwiR1RTVkVDVE9SIiwiUkVHQ09ORklHIiwiUkVHRElDVElPTkFSWSIsIkpTT05CIiwiUkVHTkFNRVNQQUNFIiwiUkVHUk9MRSIsIkplIiwiWmUiLCJrYSIsIlVhIiwiT2EiLCJOYSIsImdldFR5cGVQYXJzZXIiLCJxYSIsInNldFR5cGVQYXJzZXIiLCJRYSIsImFycmF5UGFyc2VyIiwiYnVpbHRpbnMiLCJZZSIsInRleHQiLCJiaW5hcnkiLCJGaSIsIlhlIiwiR2giLCJKdCIsImhvc3QiLCJ1c2VyIiwicGxhdGZvcm0iLCJVU0VSTkFNRSIsIlVTRVIiLCJkYXRhYmFzZSIsInBhc3N3b3JkIiwiY29ubmVjdGlvblN0cmluZyIsInBvcnQiLCJyb3dzIiwibWF4IiwiaWRsZVRpbWVvdXRNaWxsaXMiLCJjbGllbnRfZW5jb2RpbmciLCJzc2wiLCJhcHBsaWNhdGlvbl9uYW1lIiwiZmFsbGJhY2tfYXBwbGljYXRpb25fbmFtZSIsIm9wdGlvbnMiLCJwYXJzZUlucHV0RGF0ZXNBc1VUQyIsInN0YXRlbWVudF90aW1lb3V0IiwibG9ja190aW1lb3V0IiwiaWRsZV9pbl90cmFuc2FjdGlvbl9zZXNzaW9uX3RpbWVvdXQiLCJxdWVyeV90aW1lb3V0IiwiY29ubmVjdF90aW1lb3V0Iiwia2VlcGFsaXZlcyIsImtlZXBhbGl2ZXNfaWRsZSIsIk1lIiwiV2EiLCJqYSIsIl9fZGVmaW5lU2V0dGVyX18iLCJldCIsIlZoIiwiRGkiLCJIYSIsIkdhIiwiJGEiLCJNaSIsImx0IiwiemEiLCJLYSIsIlZhIiwic3RyaW5naWZ5IiwiSCIsImdldEZ1bGxZZWFyIiwiZ2V0TW9udGgiLCJnZXREYXRlIiwiZ2V0SG91cnMiLCJnZXRNaW51dGVzIiwiZ2V0U2Vjb25kcyIsImdldE1pbGxpc2Vjb25kcyIsImdldFVUQ0Z1bGxZZWFyIiwiZ2V0VVRDTW9udGgiLCJnZXRVVENEYXRlIiwiZ2V0VVRDSG91cnMiLCJnZXRVVENNaW51dGVzIiwiZ2V0VVRDU2Vjb25kcyIsImdldFVUQ01pbGxpc2Vjb25kcyIsIllhIiwiY2FsbGJhY2siLCJ2YWx1ZXMiLCJYdCIsIlphIiwicHJlcGFyZVZhbHVlIiwibm9ybWFsaXplUXVlcnlDb25maWciLCJwb3N0Z3Jlc01kNVBhc3N3b3JkSGFzaCIsIm1kNSIsInFpIiwiWWgiLCJOaSIsImVyIiwiSmEiLCJtZWNoYW5pc20iLCJjbGllbnROb25jZSIsInJlc3BvbnNlIiwiWGEiLCJydSIsIm5vbmNlIiwic3RhcnRzV2l0aCIsInNhbHQiLCJzdSIsIml0ZXJhdGlvbiIsIkRlIiwiaXUiLCJPaSIsInNlcnZlclNpZ25hdHVyZSIsImV1IiwibnUiLCJ0dSIsImV2ZXJ5Iiwia2kiLCJVaSIsIk1hcCIsInN0YXJ0U2Vzc2lvbiIsImNvbnRpbnVlU2Vzc2lvbiIsImZpbmFsaXplU2Vzc2lvbiIsInRyIiwib3UiLCJyciIsIm5yIiwic3RhdCIsImF1IiwiaXIiLCJzciIsInV1Iiwib3IiLCJRaSIsIlN0cmluZ0RlY29kZXIiLCJhciIsInVyIiwiV2kiLCJ0ZCIsIlRleHREZWNvZGVyIiwiZGVjb2RlIiwic3RyZWFtIiwiJGkiLCJvbCIsIkdpIiwiVHJhbnNmb3JtIiwiY3UiLCJodSIsImJlIiwiZnQiLCJsdSIsIm92ZXJmbG93IiwibWF0Y2hlciIsIkhpIiwibWFwcGVyIiwibWF4TGVuZ3RoIiwic2tpcE92ZXJmbG93IiwiZnUiLCJqaSIsInB1IiwiYXNzaWduIiwiYXV0b0Rlc3Ryb3kiLCJmbHVzaCIsInJlYWRhYmxlT2JqZWN0TW9kZSIsIl9kZXN0cm95IiwiX3dyaXRhYmxlU3RhdGUiLCJlcnJvckVtaXR0ZWQiLCJ6aSIsImNsIiwicGUiLCJWaSIsImR1IiwiU3RyZWFtIiwieXUiLCJLaSIsIm11IiwicHQiLCJ0dCIsInN0ZGVyciIsImd1Iiwid3UiLCJidSIsIlN1IiwieHUiLCJrZSIsImNyIiwidnUiLCJociIsImZvcm1hdCIsIndhcm5UbyIsImdldEZpbGVOYW1lIiwiUEdQQVNTRklMRSIsIkFQUERBVEEiLCJIT01FIiwidXNlUGdQYXNzIiwibW9kZSIsIkV1IiwiZ2V0UGFzc3dvcmQiLCJwaXBlIiwiX3UiLCJBdSIsImRlc3Ryb3kiLCJwYXJzZUxpbmUiLCJpc1ZhbGlkRW50cnkiLCJaaSIsInBsIiwibHIiLCJmbCIsIllpIiwiZHQiLCJjcmVhdGVSZWFkU3RyZWFtIiwibXQiLCJ5bCIsIkppIiwiQ3UiLCJ5dCIsIl90eXBlcyIsImdldE92ZXJyaWRlcyIsIlhpIiwiVHUiLCJlcyIsInRzIiwiZnIiLCJwcm90b2NvbCIsIlVSTCIsInVzZXJuYW1lIiwiaG9zdG5hbWUiLCJwYXRobmFtZSIsInNlYXJjaCIsInNlYXJjaFBhcmFtcyIsImhhc2giLCJkZWNvZGVVUklDb21wb25lbnQiLCJmcm9tRW50cmllcyIsImhyZWYiLCJhdXRoIiwicXVlcnkiLCJwciIsIm5zIiwieGwiLCJycyIsIkl1IiwiZHIiLCJ5ciIsImVuY29kZVVSSSIsInNwbGljZSIsImRlY29kZVVSSSIsImRiIiwic3NsY2VydCIsInNzbGtleSIsInNzbHJvb3RjZXJ0Iiwic3NsbW9kZSIsImNlcnQiLCJyZWFkRmlsZVN5bmMiLCJrZXkiLCJyZWplY3RVbmF1dGhvcml6ZWQiLCJndCIsIl9sIiwib3MiLCJQdSIsInNzIiwiaXMiLCIkIiwidG9VcHBlckNhc2UiLCJCdSIsIlBHU1NMTU9ERSIsIlVlIiwibmUiLCJnciIsInJlcGxpY2F0aW9uIiwiaXNEb21haW5Tb2NrZXQiLCJjb25uZWN0aW9uVGltZW91dE1pbGxpcyIsIlBHQ09OTkVDVF9USU1FT1VUIiwia2VlcEFsaXZlIiwia2VlcEFsaXZlSW5pdGlhbERlbGF5TWlsbGlzIiwiZ2V0TGlicHFDb25uZWN0aW9uU3RyaW5nIiwibG9va3VwIiwibXIiLCJjcyIsIlRsIiwidXMiLCJMdSIsImFzIiwiYnIiLCJjb21tYW5kIiwicm93Q291bnQiLCJvaWQiLCJmaWVsZHMiLCJfcGFyc2VycyIsIlJvd0N0b3IiLCJyb3dBc0FycmF5IiwicGFyc2VSb3ciLCJfcGFyc2VSb3dBc0FycmF5IiwiYWRkQ29tbWFuZENvbXBsZXRlIiwiYWRkUm93IiwiYWRkRmllbGRzIiwiZGF0YVR5cGVJRCIsIndyIiwicHMiLCJCbCIsImZzIiwiUnUiLCJocyIsImxzIiwieHIiLCJ0eXBlcyIsInBvcnRhbCIsIl9yb3dNb2RlIiwicm93TW9kZSIsImRvbWFpbiIsIl9yZXN1bHQiLCJfcmVzdWx0cyIsImlzUHJlcGFyZWRTdGF0ZW1lbnQiLCJfY2FuY2VsZWREdWVUb0Vycm9yIiwiX3Byb21pc2UiLCJyZXF1aXJlc1ByZXBhcmF0aW9uIiwiX2NoZWNrRm9yTXVsdGlyb3ciLCJoYW5kbGVSb3dEZXNjcmlwdGlvbiIsIl9hY2N1bXVsYXRlUm93cyIsImhhbmRsZURhdGFSb3ciLCJoYW5kbGVDb21tYW5kQ29tcGxldGUiLCJzeW5jIiwiaGFuZGxlRW1wdHlRdWVyeSIsImhhbmRsZUVycm9yIiwiaGFuZGxlUmVhZHlGb3JRdWVyeSIsInN1Ym1pdCIsInBhcnNlZFN0YXRlbWVudHMiLCJwcmVwYXJlIiwiaGFzQmVlblBhcnNlZCIsImhhbmRsZVBvcnRhbFN1c3BlbmRlZCIsIl9nZXRSb3dzIiwiZXhlY3V0ZSIsInN0YXRlbWVudCIsInZhbHVlTWFwcGVyIiwiZGVzY3JpYmUiLCJoYW5kbGVDb3B5SW5SZXNwb25zZSIsInNlbmRDb3B5RmFpbCIsImhhbmRsZUNvcHlEYXRhIiwiU3IiLCJ5cyIsIlNvY2tldCIsIl9lIiwiaXNJUCIsIkZ1IiwiZHMiLCJNdSIsIkUiLCJ3dCIsInBvb2xRdWVyeVZpYUZldGNoIiwib3B0cyIsImRlZmF1bHRzIiwiZmV0Y2hFbmRwb2ludCIsImZldGNoQ29ubmVjdGlvbkNhY2hlIiwiZmV0Y2hGdW5jdGlvbiIsIndlYlNvY2tldENvbnN0cnVjdG9yIiwid3NQcm94eSIsImNvYWxlc2NlV3JpdGVzIiwidXNlU2VjdXJlV2ViU29ja2V0IiwiZm9yY2VEaXNhYmxlUGdTU0wiLCJkaXNhYmxlU05JIiwicGlwZWxpbmVDb25uZWN0Iiwic3VidGxzIiwicGlwZWxpbmVUTFMiLCJyb290Q2VydHMiLCJ3c1Byb3h5QWRkckZvckhvc3QiLCJzZXROb0RlbGF5Iiwic2V0S2VlcEFsaXZlIiwicmVmIiwidW5yZWYiLCJjb25uZWN0IiwiY29ubmVjdGluZyIsInBlbmRpbmciLCJiaW5hcnlUeXBlIiwidGxzU3RhdGUiLCJ3cyIsIldlYlNvY2tldCIsIl9fdW5zdGFibGVfV2ViU29ja2V0IiwiZmV0Y2giLCJoZWFkZXJzIiwiVXBncmFkZSIsIndlYlNvY2tldCIsImFjY2VwdCIsImNhdGNoIiwic3RhcnRUbHMiLCJUcnVzdGVkQ2VydCIsImZyb21QRU0iLCJXZWJTb2NrZXRSZWFkUXVldWUiLCJyYXdXcml0ZSIsInVzZVNOSSIsImV4cGVjdFByZURhdGEiLCJ0bHNSZWFkIiwidGxzV3JpdGUiLCJlbmNyeXB0ZWQiLCJhdXRob3JpemVkIiwidGxzUmVhZExvb3AiLCJzZW5kIiwid3JpdGVCdWZmZXIiLCJjbG9zZSIsImRlc3Ryb3llZCIsIllyIiwiVCIsIk5vdGljZU1lc3NhZ2UiLCJEYXRhUm93TWVzc2FnZSIsIkNvbW1hbmRDb21wbGV0ZU1lc3NhZ2UiLCJSZWFkeUZvclF1ZXJ5TWVzc2FnZSIsIk5vdGlmaWNhdGlvblJlc3BvbnNlTWVzc2FnZSIsIkJhY2tlbmRLZXlEYXRhTWVzc2FnZSIsIkF1dGhlbnRpY2F0aW9uTUQ1UGFzc3dvcmQiLCJQYXJhbWV0ZXJTdGF0dXNNZXNzYWdlIiwiUGFyYW1ldGVyRGVzY3JpcHRpb25NZXNzYWdlIiwiUm93RGVzY3JpcHRpb25NZXNzYWdlIiwiRmllbGQiLCJDb3B5UmVzcG9uc2UiLCJDb3B5RGF0YU1lc3NhZ2UiLCJEYXRhYmFzZUVycm9yIiwiY29weURvbmUiLCJlbXB0eVF1ZXJ5IiwicmVwbGljYXRpb25TdGFydCIsInBvcnRhbFN1c3BlbmRlZCIsIm5vRGF0YSIsImNsb3NlQ29tcGxldGUiLCJiaW5kQ29tcGxldGUiLCJwYXJzZUNvbXBsZXRlIiwia3IiLCJ2ciIsIlVyIiwiY2h1bmsiLCJFciIsIk9yIiwiY29sdW1uVHlwZXMiLCJfciIsIk5yIiwidGFibGVJRCIsImNvbHVtbklEIiwiZGF0YVR5cGVTaXplIiwiZGF0YVR5cGVNb2RpZmllciIsIkFyIiwicXIiLCJmaWVsZENvdW50IiwiQ3IiLCJRciIsInBhcmFtZXRlckNvdW50IiwiZGF0YVR5cGVJRHMiLCJUciIsIldyIiwicGFyYW1ldGVyTmFtZSIsInBhcmFtZXRlclZhbHVlIiwiSXIiLCJqciIsIlByIiwiSHIiLCJwcm9jZXNzSUQiLCJzZWNyZXRLZXkiLCJCciIsIkdyIiwicHJvY2Vzc0lkIiwiY2hhbm5lbCIsInBheWxvYWQiLCJMciIsIiRyIiwic3RhdHVzIiwiUnIiLCJWciIsIkZyIiwiS3IiLCJNciIsInpyIiwiRHIiLCJtcyIsImJ0IiwiV3JpdGVyIiwiSnIiLCJzaXplIiwiaGVhZGVyUG9zaXRpb24iLCJlbnN1cmUiLCJhZGRJbnQzMiIsImFkZEludDE2IiwiYWRkQ1N0cmluZyIsImFkZFN0cmluZyIsIlpyIiwieHQiLCJzZXJpYWxpemUiLCJYciIsIk0iLCJEdSIsImt1IiwiVXUiLCJPdSIsIk51IiwicXUiLCJncyIsIlF1IiwiT2UiLCJXdSIsImp1IiwiSHUiLCJHdSIsIiR1IiwiZW4iLCJWdSIsIkt1IiwienUiLCJZdSIsIlp1IiwiSnUiLCJTdCIsIlh1IiwiZWMiLCJ0YyIsInJjIiwibmMiLCJzdGFydHVwIiwicmVxdWVzdFNzbCIsInNlbmRTQVNMSW5pdGlhbFJlc3BvbnNlTWVzc2FnZSIsInNlbmRTQ1JBTUNsaWVudEZpbmFsTWVzc2FnZSIsImNvcHlEYXRhIiwiY29weUZhaWwiLCJjYW5jZWwiLCJicyIsInZ0IiwiQnVmZmVyUmVhZGVyIiwiaWMiLCJybiIsInNldEJ1ZmZlciIsImludDE2IiwiYnl0ZSIsImludDMyIiwic3RyaW5nIiwiY3N0cmluZyIsImJ5dGVzIiwidG4iLCJ2cyIsIkV0IiwiUGFyc2VyIiwiRCIsInNjIiwibm4iLCJvYyIsIlNzIiwieHMiLCJidWZmZXJMZW5ndGgiLCJidWZmZXJPZmZzZXQiLCJyZWFkZXIiLCJtZXJnZUJ1ZmZlciIsImhhbmRsZVBhY2tldCIsInBhcnNlRGF0YVJvd01lc3NhZ2UiLCJwYXJzZUNvbW1hbmRDb21wbGV0ZU1lc3NhZ2UiLCJwYXJzZVJlYWR5Rm9yUXVlcnlNZXNzYWdlIiwicGFyc2VOb3RpZmljYXRpb25NZXNzYWdlIiwicGFyc2VBdXRoZW50aWNhdGlvblJlc3BvbnNlIiwicGFyc2VQYXJhbWV0ZXJTdGF0dXNNZXNzYWdlIiwicGFyc2VCYWNrZW5kS2V5RGF0YSIsInBhcnNlRXJyb3JNZXNzYWdlIiwicGFyc2VSb3dEZXNjcmlwdGlvbk1lc3NhZ2UiLCJwYXJzZVBhcmFtZXRlckRlc2NyaXB0aW9uTWVzc2FnZSIsInBhcnNlQ29weUluTWVzc2FnZSIsInBhcnNlQ29weU91dE1lc3NhZ2UiLCJwYXJzZUNvcHlEYXRhIiwicGFyc2VDb3B5TWVzc2FnZSIsInBhcnNlRmllbGQiLCJtZWNoYW5pc21zIiwic2V2ZXJpdHkiLCJkZXRhaWwiLCJoaW50IiwiaW50ZXJuYWxQb3NpdGlvbiIsImludGVybmFsUXVlcnkiLCJ3aGVyZSIsInNjaGVtYSIsInRhYmxlIiwiY29sdW1uIiwiZGF0YVR5cGUiLCJjb25zdHJhaW50IiwiZmlsZSIsImxpbmUiLCJyb3V0aW5lIiwic24iLCJhbiIsIlNlIiwiYWMiLCJ1YyIsImNjIiwiaGMiLCJFcyIsImxjIiwic29ja2V0Iiwic2VydmVybmFtZSIsIl9zIiwiaG4iLCJ0ZiIsIlRzIiwiQXMiLCJmYyIsInBjIiwiUSIsIkNzIiwiZGMiLCJ5YyIsImNuIiwiX2tlZXBBbGl2ZSIsIl9rZWVwQWxpdmVJbml0aWFsRGVsYXlNaWxsaXMiLCJsYXN0QnVmZmVyIiwiX2VuZGluZyIsIl9lbWl0TWVzc2FnZSIsIl9jb25uZWN0aW5nIiwiYXR0YWNoTGlzdGVuZXJzIiwiX3NlbmQiLCJzZW5kQ29weUZyb21DaHVuayIsImVuZENvcHlGcm9tIiwidW4iLCJCcyIsIm9mIiwiUHMiLCJtYyIsInNmIiwiZ2MiLCJsbiIsIndjIiwiYmMiLCJTYyIsIklzIiwieGMiLCJ2YyIsImZuIiwiY29ubmVjdGlvblBhcmFtZXRlcnMiLCJfUHJvbWlzZSIsIl9jb25uZWN0ZWQiLCJfY29ubmVjdGlvbkVycm9yIiwiX3F1ZXJ5YWJsZSIsImNvbm5lY3Rpb24iLCJxdWVyeVF1ZXVlIiwiX2Nvbm5lY3Rpb25UaW1lb3V0TWlsbGlzIiwiX2Vycm9yQWxsUXVlcmllcyIsImFjdGl2ZVF1ZXJ5IiwiZm9yRWFjaCIsIl9jb25uZWN0IiwiX2Nvbm5lY3Rpb25DYWxsYmFjayIsImNvbm5lY3Rpb25UaW1lb3V0SGFuZGxlIiwiZ2V0U3RhcnR1cENvbmYiLCJfYXR0YWNoTGlzdGVuZXJzIiwiX2hhbmRsZUVycm9yRXZlbnQiLCJfaGFuZGxlQXV0aENsZWFydGV4dFBhc3N3b3JkIiwiX2hhbmRsZUF1dGhNRDVQYXNzd29yZCIsIl9oYW5kbGVBdXRoU0FTTCIsIl9oYW5kbGVBdXRoU0FTTENvbnRpbnVlIiwiX2hhbmRsZUF1dGhTQVNMRmluYWwiLCJfaGFuZGxlQmFja2VuZEtleURhdGEiLCJfaGFuZGxlRXJyb3JNZXNzYWdlIiwiX2hhbmRsZVJlYWR5Rm9yUXVlcnkiLCJfaGFuZGxlTm90aWNlIiwiX2hhbmRsZVJvd0Rlc2NyaXB0aW9uIiwiX2hhbmRsZURhdGFSb3ciLCJfaGFuZGxlUG9ydGFsU3VzcGVuZGVkIiwiX2hhbmRsZUVtcHR5UXVlcnkiLCJfaGFuZGxlQ29tbWFuZENvbXBsZXRlIiwiX2hhbmRsZVBhcnNlQ29tcGxldGUiLCJfaGFuZGxlQ29weUluUmVzcG9uc2UiLCJfaGFuZGxlQ29weURhdGEiLCJfaGFuZGxlTm90aWZpY2F0aW9uIiwiX2NoZWNrUGdQYXNzIiwic2FzbFNlc3Npb24iLCJyZWFkeUZvclF1ZXJ5IiwiX3B1bHNlUXVlcnlRdWV1ZSIsIl9oYW5kbGVFcnJvcldoaWxlQ29ubmVjdGluZyIsImVzY2FwZUlkZW50aWZpZXIiLCJlc2NhcGVMaXRlcmFsIiwiaGFzRXhlY3V0ZWQiLCJfdCIsIlF1ZXJ5IiwiTXMiLCJjZiIsIkZzIiwiRWMiLCJMcyIsIlJzIiwiZmluZEluZGV4IiwieW4iLCJjbGllbnQiLCJpZGxlTGlzdGVuZXIiLCJ0aW1lb3V0SWQiLCJwbiIsIm1uIiwiTmUiLCJfYyIsIkF0IiwicmVzdWx0IiwiY2FwdHVyZVN0YWNrVHJhY2UiLCJBYyIsIl9yZW1vdmUiLCJnbiIsIm1heFVzZXMiLCJhbGxvd0V4aXRPbklkbGUiLCJtYXhMaWZldGltZVNlY29uZHMiLCJDbGllbnQiLCJDdCIsIl9jbGllbnRzIiwiX2lkbGUiLCJfZXhwaXJlZCIsIldlYWtTZXQiLCJfcGVuZGluZ1F1ZXVlIiwiX2VuZENhbGxiYWNrIiwiZW5kaW5nIiwiZW5kZWQiLCJfaXNGdWxsIiwiX3B1bHNlUXVldWUiLCJfYWNxdWlyZUNsaWVudCIsIm5ld0NsaWVudCIsInJlamVjdCIsInRpbWVkT3V0IiwicmVsZWFzZSIsIl9yZWxlYXNlT25jZSIsInZlcmlmeSIsIl9yZWxlYXNlIiwiX3Bvb2xVc2VDb3VudCIsImhhcyIsImRlbGV0ZSIsIndhaXRpbmdDb3VudCIsImlkbGVDb3VudCIsImV4cGlyZWRDb3VudCIsInRvdGFsQ291bnQiLCJkbiIsIkRzIiwiQ2MiLCJrcyIsIlVzIiwicGYiLCJUYyIsInZlcnNpb24iLCJkZXNjcmlwdGlvbiIsImtleXdvcmRzIiwiaG9tZXBhZ2UiLCJyZXBvc2l0b3J5IiwidXJsIiwiZGlyZWN0b3J5IiwiYXV0aG9yIiwibWFpbiIsImRlcGVuZGVuY2llcyIsInBncGFzcyIsImRldkRlcGVuZGVuY2llcyIsImFzeW5jIiwiYmx1ZWJpcmQiLCJwZWVyRGVwZW5kZW5jaWVzIiwicGVlckRlcGVuZGVuY2llc01ldGEiLCJvcHRpb25hbCIsInNjcmlwdHMiLCJmaWxlcyIsImxpY2Vuc2UiLCJlbmdpbmVzIiwibm9kZSIsImdpdEhlYWQiLCJxcyIsImRmIiwiTnMiLCJPcyIsIkljIiwid24iLCJxZSIsIl9hcnJheU1vZGUiLCJfZW1pdFJvd0V2ZW50cyIsImluaGVyaXRzIiwiUGMiLCJzcWxTdGF0ZSIsInN0YXRlbWVudFBvc2l0aW9uIiwibWVzc2FnZVByaW1hcnkiLCJzY2hlbWFOYW1lIiwidGFibGVOYW1lIiwiY29sdW1uTmFtZSIsImRhdGFUeXBlTmFtZSIsImNvbnN0cmFpbnROYW1lIiwic291cmNlRmlsZSIsInNvdXJjZUxpbmUiLCJzb3VyY2VGdW5jdGlvbiIsIm5hdGl2ZSIsInBxIiwicmVzdWx0RXJyb3JGaWVsZHMiLCJfZ2V0UHJvbWlzZSIsIl9vbmNlIiwiYXJyYXlNb2RlIiwibmFtZWRRdWVyaWVzIiwiSHMiLCJ3ZiIsImpzIiwiQmMiLCJMYyIsImdmIiwiUXMiLCJSYyIsIkZjIiwiV3MiLCJKIiwiX3F1ZXJ5UXVldWUiLCJfaGFzQWN0aXZlUXVlcnkiLCJfYWN0aXZlUXVlcnkiLCJyZWxuYW1lIiwiZXh0cmEiLCJibiIsInhmIiwiR3MiLCJFZiIsInJ0IiwiTWMiLCJEYyIsImtjIiwiVWMiLCJPYyIsIk5jIiwiU24iLCJQb29sIiwiX3Bvb2xzIiwiQ29ubmVjdGlvbiIsIk5PREVfUEdfRk9SQ0VfTkFUSVZFIiwiVHQiLCJLcyIsInpzIiwieG4iLCJBZSIsIiRzIiwicWMiLCJZcyIsImZ1bGxSZXN1bHRzIiwiZmV0Y2hPcHRpb25zIiwiaXNvbGF0aW9uTGV2ZWwiLCJyZWFkT25seSIsImRlZmVycmFibGUiLCJxdWVyeUNhbGxiYWNrIiwicmVzdWx0Q2FsbGJhY2siLCJwYXJhbXMiLCJRYyIsInRyYW5zYWN0aW9uIiwidG9TdHJpbmdUYWciLCJwYXJhbWV0ZXJpemVkUXVlcnkiLCJxdWVyaWVzIiwibWV0aG9kIiwiYm9keSIsIm9lIiwiVSIsInNvdXJjZUVycm9yIiwib2siLCJqc29uIiwicmVzdWx0cyIsIksiLCJsZSIsIkl0IiwiWHMiLCJlbyIsIlZzIiwiZmluYWxseSIsInZpYU5lb25GZXRjaCIsIkpzIiwiUWUiLCJFbiIsImNvbmZpZyIsIm5lb25Db25maWciLCJQR0hPU1QiLCJpbXBvcnRLZXkiLCJzaWduIiwidm4iLCJXYyIsIl9uIiwiaGFzRmV0Y2hVbnN1cHBvcnRlZExpc3RlbmVycyIsImVuY29kZVVSSUNvbXBvbmVudCIsIlpzIiwiZXhwb3J0X0NsaWVudEJhc2UiLCJDbGllbnRCYXNlIiwiZXhwb3J0X0Nvbm5lY3Rpb24iLCJleHBvcnRfRGF0YWJhc2VFcnJvciIsImV4cG9ydF9RdWVyeSIsImV4cG9ydF9kZWZhdWx0cyIsImV4cG9ydF90eXBlcyIsIk5lb25EYkVycm9yIiwibmVvbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@neondatabase/serverless/index.mjs\n");

/***/ })

};
;