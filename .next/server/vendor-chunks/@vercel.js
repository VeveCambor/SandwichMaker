"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@vercel";
exports.ids = ["vendor-chunks/@vercel"];
exports.modules = {

/***/ "(action-browser)/./node_modules/@vercel/postgres/dist/chunk-7IR77QAQ.js":
/*!**************************************************************!*\
  !*** ./node_modules/@vercel/postgres/dist/chunk-7IR77QAQ.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   VercelClient: () => (/* binding */ VercelClient),\n/* harmony export */   VercelPool: () => (/* binding */ VercelPool),\n/* harmony export */   createClient: () => (/* binding */ createClient),\n/* harmony export */   createPool: () => (/* binding */ createPool),\n/* harmony export */   db: () => (/* binding */ db),\n/* harmony export */   postgresConnectionString: () => (/* binding */ postgresConnectionString),\n/* harmony export */   sql: () => (/* binding */ sql),\n/* harmony export */   types: () => (/* reexport safe */ _neondatabase_serverless__WEBPACK_IMPORTED_MODULE_0__.types)\n/* harmony export */ });\n/* harmony import */ var _neondatabase_serverless__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @neondatabase/serverless */ \"(action-browser)/./node_modules/@neondatabase/serverless/index.mjs\");\n// src/create-pool.ts\n\n// src/error.ts\nvar VercelPostgresError = class extends Error {\n    constructor(code, message){\n        super(`VercelPostgresError - '${code}': ${message}`);\n        this.code = code;\n        this.name = \"VercelPostgresError\";\n    }\n};\n// src/postgres-connection-string.ts\nfunction postgresConnectionString(type = \"pool\") {\n    let connectionString;\n    switch(type){\n        case \"pool\":\n            {\n                connectionString = process.env.POSTGRES_URL;\n                break;\n            }\n        case \"direct\":\n            {\n                connectionString = process.env.POSTGRES_URL_NON_POOLING;\n                break;\n            }\n        default:\n            {\n                const _exhaustiveCheck = type;\n                const str = _exhaustiveCheck;\n                throw new VercelPostgresError(\"invalid_connection_type\", `Unhandled type: ${str}`);\n            }\n    }\n    if (connectionString === \"undefined\") connectionString = void 0;\n    return connectionString;\n}\nfunction isPooledConnectionString(connectionString) {\n    return connectionString.includes(\"-pooler.\");\n}\nfunction isDirectConnectionString(connectionString) {\n    return !isPooledConnectionString(connectionString);\n}\nfunction isLocalhostConnectionString(connectionString) {\n    try {\n        const withHttpsProtocol = connectionString.replace(/^postgresql:\\/\\//, \"https://\");\n        return new URL(withHttpsProtocol).hostname === \"localhost\";\n    } catch (err) {\n        if (err instanceof TypeError) {\n            return false;\n        }\n        if (typeof err === \"object\" && err !== null && \"message\" in err && typeof err.message === \"string\" && err.message === \"Invalid URL\") {\n            return false;\n        }\n        throw err;\n    }\n}\n// src/sql-template.ts\nfunction sqlTemplate(strings, ...values) {\n    var _a, _b;\n    if (!isTemplateStringsArray(strings) || !Array.isArray(values)) {\n        throw new VercelPostgresError(\"incorrect_tagged_template_call\", \"It looks like you tried to call `sql` as a function. Make sure to use it as a tagged template.\\n\tExample: sql`SELECT * FROM users`, not sql('SELECT * FROM users')\");\n    }\n    let result = (_a = strings[0]) != null ? _a : \"\";\n    for(let i = 1; i < strings.length; i++){\n        result += `$${i}${(_b = strings[i]) != null ? _b : \"\"}`;\n    }\n    return [\n        result,\n        values\n    ];\n}\nfunction isTemplateStringsArray(strings) {\n    return Array.isArray(strings) && \"raw\" in strings && Array.isArray(strings.raw);\n}\n// src/create-client.ts\n\nvar VercelClient = class extends _neondatabase_serverless__WEBPACK_IMPORTED_MODULE_0__.Client {\n    /**\n   * A template literal tag providing safe, easy to use SQL parameterization.\n   * Parameters are substituted using the underlying Postgres database, and so must follow\n   * the rules of Postgres parameterization.\n   * @example\n   * ```ts\n   * const pool = createClient();\n   * const userId = 123;\n   * await client.connect();\n   * const result = await pool.sql`SELECT * FROM users WHERE id = ${userId}`;\n   * // Equivalent to: await pool.query('SELECT * FROM users WHERE id = $1', [id]);\n   * await client.end();\n   * ```\n   * @returns A promise that resolves to the query result.\n   */ async sql(strings, ...values) {\n        const [query, params] = sqlTemplate(strings, ...values);\n        return this.query(query, params);\n    }\n};\nfunction createClient(config) {\n    var _a;\n    const connectionString = (_a = config == null ? void 0 : config.connectionString) != null ? _a : postgresConnectionString(\"direct\");\n    if (!connectionString) throw new VercelPostgresError(\"missing_connection_string\", \"You did not supply a 'connectionString' and no 'POSTGRES_URL_NON_POOLING' env var was found.\");\n    if (!isLocalhostConnectionString(connectionString) && !isDirectConnectionString(connectionString)) throw new VercelPostgresError(\"invalid_connection_string\", \"This connection string is meant to be used with a pooled connection. Try `createPool()` instead.\");\n    return new VercelClient({\n        ...config,\n        connectionString\n    });\n}\n// src/create-pool.ts\nvar VercelPool = class extends _neondatabase_serverless__WEBPACK_IMPORTED_MODULE_0__.Pool {\n    constructor(config){\n        var _a;\n        super(config);\n        this.Client = VercelClient;\n        this.connectionString = (_a = config.connectionString) != null ? _a : \"\";\n    }\n    /**\n   * A template literal tag providing safe, easy to use SQL parameterization.\n   * Parameters are substituted using the underlying Postgres database, and so must follow\n   * the rules of Postgres parameterization.\n   * @example\n   * ```ts\n   * const pool = createPool();\n   * const userId = 123;\n   * const result = await pool.sql`SELECT * FROM users WHERE id = ${userId}`;\n   * // Equivalent to: await pool.query('SELECT * FROM users WHERE id = $1', [id]);\n   * ```\n   * @returns A promise that resolves to the query result.\n   */ async sql(strings, ...values) {\n        const [query, params] = sqlTemplate(strings, ...values);\n        const sql2 = (0,_neondatabase_serverless__WEBPACK_IMPORTED_MODULE_0__.neon)(this.connectionString, {\n            fullResults: true\n        });\n        return sql2(query, params);\n    }\n    connect(callback) {\n        return super.connect(callback);\n    }\n};\nfunction createPool(config) {\n    var _a;\n    const connectionString = (_a = config == null ? void 0 : config.connectionString) != null ? _a : postgresConnectionString(\"pool\");\n    if (!connectionString) throw new VercelPostgresError(\"missing_connection_string\", \"You did not supply a 'connectionString' and no 'POSTGRES_URL' env var was found.\");\n    if (!isLocalhostConnectionString(connectionString) && !isPooledConnectionString(connectionString)) throw new VercelPostgresError(\"invalid_connection_string\", \"This connection string is meant to be used with a direct connection. Make sure to use a pooled connection string or try `createClient()` instead.\");\n    let maxUses = config == null ? void 0 : config.maxUses;\n    let max = config == null ? void 0 : config.max;\n    if (typeof EdgeRuntime !== \"undefined\") {\n        if (maxUses && maxUses !== 1) {\n            console.warn(\"@vercel/postgres: Overriding `maxUses` to 1 because the EdgeRuntime does not support client reuse.\");\n        }\n        if (max && max !== 1e4) {\n            console.warn(\"@vercel/postgres: Overriding `max` to 10,000 because the EdgeRuntime does not support client reuse.\");\n        }\n        maxUses = 1;\n        max = 1e4;\n    }\n    const pool2 = new VercelPool({\n        ...config,\n        connectionString,\n        maxUses,\n        max\n    });\n    return pool2;\n}\n// src/index.ts\n\nvar pool;\nvar sql = new Proxy(// eslint-disable-next-line @typescript-eslint/no-empty-function -- [@vercel/style-guide@5 migration]\n()=>{}, {\n    get (_, prop) {\n        if (!pool) {\n            pool = createPool();\n        }\n        const val = Reflect.get(pool, prop);\n        if (typeof val === \"function\") {\n            return val.bind(pool);\n        }\n        return val;\n    },\n    apply (_, __, argumentsList) {\n        if (!pool) {\n            pool = createPool();\n        }\n        return pool.sql(...argumentsList);\n    }\n});\nvar db = sql;\n //# sourceMappingURL=chunk-7IR77QAQ.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AdmVyY2VsL3Bvc3RncmVzL2Rpc3QvY2h1bmstN0lSNzdRQVEuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQUEscUJBQXFCO0FBQ2lDO0FBRXRELGVBQWU7QUFDZixJQUFJRSxzQkFBc0IsY0FBY0M7SUFDdENDLFlBQVlDLElBQUksRUFBRUMsT0FBTyxDQUFFO1FBQ3pCLEtBQUssQ0FBQyxDQUFDLHVCQUF1QixFQUFFRCxLQUFLLEdBQUcsRUFBRUMsUUFBUSxDQUFDO1FBQ25ELElBQUksQ0FBQ0QsSUFBSSxHQUFHQTtRQUNaLElBQUksQ0FBQ0UsSUFBSSxHQUFHO0lBQ2Q7QUFDRjtBQUVBLG9DQUFvQztBQUNwQyxTQUFTQyx5QkFBeUJDLE9BQU8sTUFBTTtJQUM3QyxJQUFJQztJQUNKLE9BQVFEO1FBQ04sS0FBSztZQUFRO2dCQUNYQyxtQkFBbUJDLFFBQVFDLEdBQUcsQ0FBQ0MsWUFBWTtnQkFDM0M7WUFDRjtRQUNBLEtBQUs7WUFBVTtnQkFDYkgsbUJBQW1CQyxRQUFRQyxHQUFHLENBQUNFLHdCQUF3QjtnQkFDdkQ7WUFDRjtRQUNBO1lBQVM7Z0JBQ1AsTUFBTUMsbUJBQW1CTjtnQkFDekIsTUFBTU8sTUFBTUQ7Z0JBQ1osTUFBTSxJQUFJYixvQkFDUiwyQkFDQSxDQUFDLGdCQUFnQixFQUFFYyxJQUFJLENBQUM7WUFFNUI7SUFDRjtJQUNBLElBQUlOLHFCQUFxQixhQUFhQSxtQkFBbUIsS0FBSztJQUM5RCxPQUFPQTtBQUNUO0FBQ0EsU0FBU08seUJBQXlCUCxnQkFBZ0I7SUFDaEQsT0FBT0EsaUJBQWlCUSxRQUFRLENBQUM7QUFDbkM7QUFDQSxTQUFTQyx5QkFBeUJULGdCQUFnQjtJQUNoRCxPQUFPLENBQUNPLHlCQUF5QlA7QUFDbkM7QUFDQSxTQUFTVSw0QkFBNEJWLGdCQUFnQjtJQUNuRCxJQUFJO1FBQ0YsTUFBTVcsb0JBQW9CWCxpQkFBaUJZLE9BQU8sQ0FDaEQsb0JBQ0E7UUFFRixP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RyxJQUFJNEI7SUFDckI7QUFDRjtBQUVGLElBQUlDLEtBQUs3QjtBQVdQLENBQ0YsMENBQTBDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc2FuZHdpY2gtbWFrZXIvLi9ub2RlX21vZHVsZXMvQHZlcmNlbC9wb3N0Z3Jlcy9kaXN0L2NodW5rLTdJUjc3UUFRLmpzP2ZkMzAiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gc3JjL2NyZWF0ZS1wb29sLnRzXG5pbXBvcnQgeyBQb29sLCBuZW9uIH0gZnJvbSBcIkBuZW9uZGF0YWJhc2Uvc2VydmVybGVzc1wiO1xuXG4vLyBzcmMvZXJyb3IudHNcbnZhciBWZXJjZWxQb3N0Z3Jlc0Vycm9yID0gY2xhc3MgZXh0ZW5kcyBFcnJvciB7XG4gIGNvbnN0cnVjdG9yKGNvZGUsIG1lc3NhZ2UpIHtcbiAgICBzdXBlcihgVmVyY2VsUG9zdGdyZXNFcnJvciAtICcke2NvZGV9JzogJHttZXNzYWdlfWApO1xuICAgIHRoaXMuY29kZSA9IGNvZGU7XG4gICAgdGhpcy5uYW1lID0gXCJWZXJjZWxQb3N0Z3Jlc0Vycm9yXCI7XG4gIH1cbn07XG5cbi8vIHNyYy9wb3N0Z3Jlcy1jb25uZWN0aW9uLXN0cmluZy50c1xuZnVuY3Rpb24gcG9zdGdyZXNDb25uZWN0aW9uU3RyaW5nKHR5cGUgPSBcInBvb2xcIikge1xuICBsZXQgY29ubmVjdGlvblN0cmluZztcbiAgc3dpdGNoICh0eXBlKSB7XG4gICAgY2FzZSBcInBvb2xcIjoge1xuICAgICAgY29ubmVjdGlvblN0cmluZyA9IHByb2Nlc3MuZW52LlBPU1RHUkVTX1VSTDtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBjYXNlIFwiZGlyZWN0XCI6IHtcbiAgICAgIGNvbm5lY3Rpb25TdHJpbmcgPSBwcm9jZXNzLmVudi5QT1NUR1JFU19VUkxfTk9OX1BPT0xJTkc7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgZGVmYXVsdDoge1xuICAgICAgY29uc3QgX2V4aGF1c3RpdmVDaGVjayA9IHR5cGU7XG4gICAgICBjb25zdCBzdHIgPSBfZXhoYXVzdGl2ZUNoZWNrO1xuICAgICAgdGhyb3cgbmV3IFZlcmNlbFBvc3RncmVzRXJyb3IoXG4gICAgICAgIFwiaW52YWxpZF9jb25uZWN0aW9uX3R5cGVcIixcbiAgICAgICAgYFVuaGFuZGxlZCB0eXBlOiAke3N0cn1gXG4gICAgICApO1xuICAgIH1cbiAgfVxuICBpZiAoY29ubmVjdGlvblN0cmluZyA9PT0gXCJ1bmRlZmluZWRcIikgY29ubmVjdGlvblN0cmluZyA9IHZvaWQgMDtcbiAgcmV0dXJuIGNvbm5lY3Rpb25TdHJpbmc7XG59XG5mdW5jdGlvbiBpc1Bvb2xlZENvbm5lY3Rpb25TdHJpbmcoY29ubmVjdGlvblN0cmluZykge1xuICByZXR1cm4gY29ubmVjdGlvblN0cmluZy5pbmNsdWRlcyhcIi1wb29sZXIuXCIpO1xufVxuZnVuY3Rpb24gaXNEaXJlY3RDb25uZWN0aW9uU3RyaW5nKGNvbm5lY3Rpb25TdHJpbmcpIHtcbiAgcmV0dXJuICFpc1Bvb2xlZENvbm5lY3Rpb25TdHJpbmcoY29ubmVjdGlvblN0cmluZyk7XG59XG5mdW5jdGlvbiBpc0xvY2FsaG9zdENvbm5lY3Rpb25TdHJpbmcoY29ubmVjdGlvblN0cmluZykge1xuICB0cnkge1xuICAgIGNvbnN0IHdpdGhIdHRwc1Byb3RvY29sID0gY29ubmVjdGlvblN0cmluZy5yZXBsYWNlKFxuICAgICAgL15wb3N0Z3Jlc3FsOlxcL1xcLy8sXG4gICAgICBcImh0dHBzOi8vXCJcbiAgICApO1xuICAgIHJldHVybiBuZXcgVVJMKHdpdGhIdHRwc1Byb3RvY29sKS5ob3N0bmFtZSA9PT0gXCJsb2NhbGhvc3RcIjtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgaWYgKGVyciBpbnN0YW5jZW9mIFR5cGVFcnJvcikge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGVyciA9PT0gXCJvYmplY3RcIiAmJiBlcnIgIT09IG51bGwgJiYgXCJtZXNzYWdlXCIgaW4gZXJyICYmIHR5cGVvZiBlcnIubWVzc2FnZSA9PT0gXCJzdHJpbmdcIiAmJiBlcnIubWVzc2FnZSA9PT0gXCJJbnZhbGlkIFVSTFwiKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHRocm93IGVycjtcbiAgfVxufVxuXG4vLyBzcmMvc3FsLXRlbXBsYXRlLnRzXG5mdW5jdGlvbiBzcWxUZW1wbGF0ZShzdHJpbmdzLCAuLi52YWx1ZXMpIHtcbiAgdmFyIF9hLCBfYjtcbiAgaWYgKCFpc1RlbXBsYXRlU3RyaW5nc0FycmF5KHN0cmluZ3MpIHx8ICFBcnJheS5pc0FycmF5KHZhbHVlcykpIHtcbiAgICB0aHJvdyBuZXcgVmVyY2VsUG9zdGdyZXNFcnJvcihcbiAgICAgIFwiaW5jb3JyZWN0X3RhZ2dlZF90ZW1wbGF0ZV9jYWxsXCIsXG4gICAgICBcIkl0IGxvb2tzIGxpa2UgeW91IHRyaWVkIHRvIGNhbGwgYHNxbGAgYXMgYSBmdW5jdGlvbi4gTWFrZSBzdXJlIHRvIHVzZSBpdCBhcyBhIHRhZ2dlZCB0ZW1wbGF0ZS5cXG5cdEV4YW1wbGU6IHNxbGBTRUxFQ1QgKiBGUk9NIHVzZXJzYCwgbm90IHNxbCgnU0VMRUNUICogRlJPTSB1c2VycycpXCJcbiAgICApO1xuICB9XG4gIGxldCByZXN1bHQgPSAoX2EgPSBzdHJpbmdzWzBdKSAhPSBudWxsID8gX2EgOiBcIlwiO1xuICBmb3IgKGxldCBpID0gMTsgaSA8IHN0cmluZ3MubGVuZ3RoOyBpKyspIHtcbiAgICByZXN1bHQgKz0gYCQke2l9JHsoX2IgPSBzdHJpbmdzW2ldKSAhPSBudWxsID8gX2IgOiBcIlwifWA7XG4gIH1cbiAgcmV0dXJuIFtyZXN1bHQsIHZhbHVlc107XG59XG5mdW5jdGlvbiBpc1RlbXBsYXRlU3RyaW5nc0FycmF5KHN0cmluZ3MpIHtcbiAgcmV0dXJuIEFycmF5LmlzQXJyYXkoc3RyaW5ncykgJiYgXCJyYXdcIiBpbiBzdHJpbmdzICYmIEFycmF5LmlzQXJyYXkoc3RyaW5ncy5yYXcpO1xufVxuXG4vLyBzcmMvY3JlYXRlLWNsaWVudC50c1xuaW1wb3J0IHsgQ2xpZW50IH0gZnJvbSBcIkBuZW9uZGF0YWJhc2Uvc2VydmVybGVzc1wiO1xudmFyIFZlcmNlbENsaWVudCA9IGNsYXNzIGV4dGVuZHMgQ2xpZW50IHtcbiAgLyoqXG4gICAqIEEgdGVtcGxhdGUgbGl0ZXJhbCB0YWcgcHJvdmlkaW5nIHNhZmUsIGVhc3kgdG8gdXNlIFNRTCBwYXJhbWV0ZXJpemF0aW9uLlxuICAgKiBQYXJhbWV0ZXJzIGFyZSBzdWJzdGl0dXRlZCB1c2luZyB0aGUgdW5kZXJseWluZyBQb3N0Z3JlcyBkYXRhYmFzZSwgYW5kIHNvIG11c3QgZm9sbG93XG4gICAqIHRoZSBydWxlcyBvZiBQb3N0Z3JlcyBwYXJhbWV0ZXJpemF0aW9uLlxuICAgKiBAZXhhbXBsZVxuICAgKiBgYGB0c1xuICAgKiBjb25zdCBwb29sID0gY3JlYXRlQ2xpZW50KCk7XG4gICAqIGNvbnN0IHVzZXJJZCA9IDEyMztcbiAgICogYXdhaXQgY2xpZW50LmNvbm5lY3QoKTtcbiAgICogY29uc3QgcmVzdWx0ID0gYXdhaXQgcG9vbC5zcWxgU0VMRUNUICogRlJPTSB1c2VycyBXSEVSRSBpZCA9ICR7dXNlcklkfWA7XG4gICAqIC8vIEVxdWl2YWxlbnQgdG86IGF3YWl0IHBvb2wucXVlcnkoJ1NFTEVDVCAqIEZST00gdXNlcnMgV0hFUkUgaWQgPSAkMScsIFtpZF0pO1xuICAgKiBhd2FpdCBjbGllbnQuZW5kKCk7XG4gICAqIGBgYFxuICAgKiBAcmV0dXJucyBBIHByb21pc2UgdGhhdCByZXNvbHZlcyB0byB0aGUgcXVlcnkgcmVzdWx0LlxuICAgKi9cbiAgYXN5bmMgc3FsKHN0cmluZ3MsIC4uLnZhbHVlcykge1xuICAgIGNvbnN0IFtxdWVyeSwgcGFyYW1zXSA9IHNxbFRlbXBsYXRlKHN0cmluZ3MsIC4uLnZhbHVlcyk7XG4gICAgcmV0dXJuIHRoaXMucXVlcnkocXVlcnksIHBhcmFtcyk7XG4gIH1cbn07XG5mdW5jdGlvbiBjcmVhdGVDbGllbnQoY29uZmlnKSB7XG4gIHZhciBfYTtcbiAgY29uc3QgY29ubmVjdGlvblN0cmluZyA9IChfYSA9IGNvbmZpZyA9PSBudWxsID8gdm9pZCAwIDogY29uZmlnLmNvbm5lY3Rpb25TdHJpbmcpICE9IG51bGwgPyBfYSA6IHBvc3RncmVzQ29ubmVjdGlvblN0cmluZyhcImRpcmVjdFwiKTtcbiAgaWYgKCFjb25uZWN0aW9uU3RyaW5nKVxuICAgIHRocm93IG5ldyBWZXJjZWxQb3N0Z3Jlc0Vycm9yKFxuICAgICAgXCJtaXNzaW5nX2Nvbm5lY3Rpb25fc3RyaW5nXCIsXG4gICAgICBcIllvdSBkaWQgbm90IHN1cHBseSBhICdjb25uZWN0aW9uU3RyaW5nJyBhbmQgbm8gJ1BPU1RHUkVTX1VSTF9OT05fUE9PTElORycgZW52IHZhciB3YXMgZm91bmQuXCJcbiAgICApO1xuICBpZiAoIWlzTG9jYWxob3N0Q29ubmVjdGlvblN0cmluZyhjb25uZWN0aW9uU3RyaW5nKSAmJiAhaXNEaXJlY3RDb25uZWN0aW9uU3RyaW5nKGNvbm5lY3Rpb25TdHJpbmcpKVxuICAgIHRocm93IG5ldyBWZXJjZWxQb3N0Z3Jlc0Vycm9yKFxuICAgICAgXCJpbnZhbGlkX2Nvbm5lY3Rpb25fc3RyaW5nXCIsXG4gICAgICBcIlRoaXMgY29ubmVjdGlvbiBzdHJpbmcgaXMgbWVhbnQgdG8gYmUgdXNlZCB3aXRoIGEgcG9vbGVkIGNvbm5lY3Rpb24uIFRyeSBgY3JlYXRlUG9vbCgpYCBpbnN0ZWFkLlwiXG4gICAgKTtcbiAgcmV0dXJuIG5ldyBWZXJjZWxDbGllbnQoe1xuICAgIC4uLmNvbmZpZyxcbiAgICBjb25uZWN0aW9uU3RyaW5nXG4gIH0pO1xufVxuXG4vLyBzcmMvY3JlYXRlLXBvb2wudHNcbnZhciBWZXJjZWxQb29sID0gY2xhc3MgZXh0ZW5kcyBQb29sIHtcbiAgY29uc3RydWN0b3IoY29uZmlnKSB7XG4gICAgdmFyIF9hO1xuICAgIHN1cGVyKGNvbmZpZyk7XG4gICAgdGhpcy5DbGllbnQgPSBWZXJjZWxDbGllbnQ7XG4gICAgdGhpcy5jb25uZWN0aW9uU3RyaW5nID0gKF9hID0gY29uZmlnLmNvbm5lY3Rpb25TdHJpbmcpICE9IG51bGwgPyBfYSA6IFwiXCI7XG4gIH1cbiAgLyoqXG4gICAqIEEgdGVtcGxhdGUgbGl0ZXJhbCB0YWcgcHJvdmlkaW5nIHNhZmUsIGVhc3kgdG8gdXNlIFNRTCBwYXJhbWV0ZXJpemF0aW9uLlxuICAgKiBQYXJhbWV0ZXJzIGFyZSBzdWJzdGl0dXRlZCB1c2luZyB0aGUgdW5kZXJseWluZyBQb3N0Z3JlcyBkYXRhYmFzZSwgYW5kIHNvIG11c3QgZm9sbG93XG4gICAqIHRoZSBydWxlcyBvZiBQb3N0Z3JlcyBwYXJhbWV0ZXJpemF0aW9uLlxuICAgKiBAZXhhbXBsZVxuICAgKiBgYGB0c1xuICAgKiBjb25zdCBwb29sID0gY3JlYXRlUG9vbCgpO1xuICAgKiBjb25zdCB1c2VySWQgPSAxMjM7XG4gICAqIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHBvb2wuc3FsYFNFTEVDVCAqIEZST00gdXNlcnMgV0hFUkUgaWQgPSAke3VzZXJJZH1gO1xuICAgKiAvLyBFcXVpdmFsZW50IHRvOiBhd2FpdCBwb29sLnF1ZXJ5KCdTRUxFQ1QgKiBGUk9NIHVzZXJzIFdIRVJFIGlkID0gJDEnLCBbaWRdKTtcbiAgICogYGBgXG4gICAqIEByZXR1cm5zIEEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHRvIHRoZSBxdWVyeSByZXN1bHQuXG4gICAqL1xuICBhc3luYyBzcWwoc3RyaW5ncywgLi4udmFsdWVzKSB7XG4gICAgY29uc3QgW3F1ZXJ5LCBwYXJhbXNdID0gc3FsVGVtcGxhdGUoc3RyaW5ncywgLi4udmFsdWVzKTtcbiAgICBjb25zdCBzcWwyID0gbmVvbih0aGlzLmNvbm5lY3Rpb25TdHJpbmcsIHtcbiAgICAgIGZ1bGxSZXN1bHRzOiB0cnVlXG4gICAgfSk7XG4gICAgcmV0dXJuIHNxbDIocXVlcnksIHBhcmFtcyk7XG4gIH1cbiAgY29ubmVjdChjYWxsYmFjaykge1xuICAgIHJldHVybiBzdXBlci5jb25uZWN0KFxuICAgICAgY2FsbGJhY2tcbiAgICApO1xuICB9XG59O1xuZnVuY3Rpb24gY3JlYXRlUG9vbChjb25maWcpIHtcbiAgdmFyIF9hO1xuICBjb25zdCBjb25uZWN0aW9uU3RyaW5nID0gKF9hID0gY29uZmlnID09IG51bGwgPyB2b2lkIDAgOiBjb25maWcuY29ubmVjdGlvblN0cmluZykgIT0gbnVsbCA/IF9hIDogcG9zdGdyZXNDb25uZWN0aW9uU3RyaW5nKFwicG9vbFwiKTtcbiAgaWYgKCFjb25uZWN0aW9uU3RyaW5nKVxuICAgIHRocm93IG5ldyBWZXJjZWxQb3N0Z3Jlc0Vycm9yKFxuICAgICAgXCJtaXNzaW5nX2Nvbm5lY3Rpb25fc3RyaW5nXCIsXG4gICAgICBcIllvdSBkaWQgbm90IHN1cHBseSBhICdjb25uZWN0aW9uU3RyaW5nJyBhbmQgbm8gJ1BPU1RHUkVTX1VSTCcgZW52IHZhciB3YXMgZm91bmQuXCJcbiAgICApO1xuICBpZiAoIWlzTG9jYWxob3N0Q29ubmVjdGlvblN0cmluZyhjb25uZWN0aW9uU3RyaW5nKSAmJiAhaXNQb29sZWRDb25uZWN0aW9uU3RyaW5nKGNvbm5lY3Rpb25TdHJpbmcpKVxuICAgIHRocm93IG5ldyBWZXJjZWxQb3N0Z3Jlc0Vycm9yKFxuICAgICAgXCJpbnZhbGlkX2Nvbm5lY3Rpb25fc3RyaW5nXCIsXG4gICAgICBcIlRoaXMgY29ubmVjdGlvbiBzdHJpbmcgaXMgbWVhbnQgdG8gYmUgdXNlZCB3aXRoIGEgZGlyZWN0IGNvbm5lY3Rpb24uIE1ha2Ugc3VyZSB0byB1c2UgYSBwb29sZWQgY29ubmVjdGlvbiBzdHJpbmcgb3IgdHJ5IGBjcmVhdGVDbGllbnQoKWAgaW5zdGVhZC5cIlxuICAgICk7XG4gIGxldCBtYXhVc2VzID0gY29uZmlnID09IG51bGwgPyB2b2lkIDAgOiBjb25maWcubWF4VXNlcztcbiAgbGV0IG1heCA9IGNvbmZpZyA9PSBudWxsID8gdm9pZCAwIDogY29uZmlnLm1heDtcbiAgaWYgKHR5cGVvZiBFZGdlUnVudGltZSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIGlmIChtYXhVc2VzICYmIG1heFVzZXMgIT09IDEpIHtcbiAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgXCJAdmVyY2VsL3Bvc3RncmVzOiBPdmVycmlkaW5nIGBtYXhVc2VzYCB0byAxIGJlY2F1c2UgdGhlIEVkZ2VSdW50aW1lIGRvZXMgbm90IHN1cHBvcnQgY2xpZW50IHJldXNlLlwiXG4gICAgICApO1xuICAgIH1cbiAgICBpZiAobWF4ICYmIG1heCAhPT0gMWU0KSB7XG4gICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgIFwiQHZlcmNlbC9wb3N0Z3JlczogT3ZlcnJpZGluZyBgbWF4YCB0byAxMCwwMDAgYmVjYXVzZSB0aGUgRWRnZVJ1bnRpbWUgZG9lcyBub3Qgc3VwcG9ydCBjbGllbnQgcmV1c2UuXCJcbiAgICAgICk7XG4gICAgfVxuICAgIG1heFVzZXMgPSAxO1xuICAgIG1heCA9IDFlNDtcbiAgfVxuICBjb25zdCBwb29sMiA9IG5ldyBWZXJjZWxQb29sKHtcbiAgICAuLi5jb25maWcsXG4gICAgY29ubmVjdGlvblN0cmluZyxcbiAgICBtYXhVc2VzLFxuICAgIG1heFxuICB9KTtcbiAgcmV0dXJuIHBvb2wyO1xufVxuXG4vLyBzcmMvaW5kZXgudHNcbmltcG9ydCB7IHR5cGVzIH0gZnJvbSBcIkBuZW9uZGF0YWJhc2Uvc2VydmVybGVzc1wiO1xudmFyIHBvb2w7XG52YXIgc3FsID0gbmV3IFByb3h5KFxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWVtcHR5LWZ1bmN0aW9uIC0tIFtAdmVyY2VsL3N0eWxlLWd1aWRlQDUgbWlncmF0aW9uXVxuICAoKSA9PiB7XG4gIH0sXG4gIHtcbiAgICBnZXQoXywgcHJvcCkge1xuICAgICAgaWYgKCFwb29sKSB7XG4gICAgICAgIHBvb2wgPSBjcmVhdGVQb29sKCk7XG4gICAgICB9XG4gICAgICBjb25zdCB2YWwgPSBSZWZsZWN0LmdldChwb29sLCBwcm9wKTtcbiAgICAgIGlmICh0eXBlb2YgdmFsID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgcmV0dXJuIHZhbC5iaW5kKHBvb2wpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHZhbDtcbiAgICB9LFxuICAgIGFwcGx5KF8sIF9fLCBhcmd1bWVudHNMaXN0KSB7XG4gICAgICBpZiAoIXBvb2wpIHtcbiAgICAgICAgcG9vbCA9IGNyZWF0ZVBvb2woKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBwb29sLnNxbCguLi5hcmd1bWVudHNMaXN0KTtcbiAgICB9XG4gIH1cbik7XG52YXIgZGIgPSBzcWw7XG5cbmV4cG9ydCB7XG4gIHBvc3RncmVzQ29ubmVjdGlvblN0cmluZyxcbiAgVmVyY2VsQ2xpZW50LFxuICBjcmVhdGVDbGllbnQsXG4gIFZlcmNlbFBvb2wsXG4gIGNyZWF0ZVBvb2wsXG4gIHNxbCxcbiAgZGIsXG4gIHR5cGVzXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y2h1bmstN0lSNzdRQVEuanMubWFwIl0sIm5hbWVzIjpbIlBvb2wiLCJuZW9uIiwiVmVyY2VsUG9zdGdyZXNFcnJvciIsIkVycm9yIiwiY29uc3RydWN0b3IiLCJjb2RlIiwibWVzc2FnZSIsIm5hbWUiLCJwb3N0Z3Jlc0Nvbm5lY3Rpb25TdHJpbmciLCJ0eXBlIiwiY29ubmVjdGlvblN0cmluZyIsInByb2Nlc3MiLCJlbnYiLCJQT1NUR1JFU19VUkwiLCJQT1NUR1JFU19VUkxfTk9OX1BPT0xJTkciLCJfZXhoYXVzdGl2ZUNoZWNrIiwic3RyIiwiaXNQb29sZWRDb25uZWN0aW9uU3RyaW5nIiwiaW5jbHVkZXMiLCJpc0RpcmVjdENvbm5lY3Rpb25TdHJpbmciLCJpc0xvY2FsaG9zdENvbm5lY3Rpb25TdHJpbmciLCJ3aXRoSHR0cHNQcm90b2NvbCIsInJlcGxhY2UiLCJVUkwiLCJob3N0bmFtZSIsImVyciIsIlR5cGVFcnJvciIsInNxbFRlbXBsYXRlIiwic3RyaW5ncyIsInZhbHVlcyIsIl9hIiwiX2IiLCJpc1RlbXBsYXRlU3RyaW5nc0FycmF5IiwiQXJyYXkiLCJpc0FycmF5IiwicmVzdWx0IiwiaSIsImxlbmd0aCIsInJhdyIsIkNsaWVudCIsIlZlcmNlbENsaWVudCIsInNxbCIsInF1ZXJ5IiwicGFyYW1zIiwiY3JlYXRlQ2xpZW50IiwiY29uZmlnIiwiVmVyY2VsUG9vbCIsInNxbDIiLCJmdWxsUmVzdWx0cyIsImNvbm5lY3QiLCJjYWxsYmFjayIsImNyZWF0ZVBvb2wiLCJtYXhVc2VzIiwibWF4IiwiRWRnZVJ1bnRpbWUiLCJjb25zb2xlIiwid2FybiIsInBvb2wyIiwidHlwZXMiLCJwb29sIiwiUHJveHkiLCJnZXQiLCJfIiwicHJvcCIsInZhbCIsIlJlZmxlY3QiLCJiaW5kIiwiYXBwbHkiLCJfXyIsImFyZ3VtZW50c0xpc3QiLCJkYiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@vercel/postgres/dist/chunk-7IR77QAQ.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@vercel/postgres/dist/chunk-7IR77QAQ.js":
/*!**************************************************************!*\
  !*** ./node_modules/@vercel/postgres/dist/chunk-7IR77QAQ.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   VercelClient: () => (/* binding */ VercelClient),\n/* harmony export */   VercelPool: () => (/* binding */ VercelPool),\n/* harmony export */   createClient: () => (/* binding */ createClient),\n/* harmony export */   createPool: () => (/* binding */ createPool),\n/* harmony export */   db: () => (/* binding */ db),\n/* harmony export */   postgresConnectionString: () => (/* binding */ postgresConnectionString),\n/* harmony export */   sql: () => (/* binding */ sql),\n/* harmony export */   types: () => (/* reexport safe */ _neondatabase_serverless__WEBPACK_IMPORTED_MODULE_0__.types)\n/* harmony export */ });\n/* harmony import */ var _neondatabase_serverless__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @neondatabase/serverless */ \"(rsc)/./node_modules/@neondatabase/serverless/index.mjs\");\n// src/create-pool.ts\n\n// src/error.ts\nvar VercelPostgresError = class extends Error {\n    constructor(code, message){\n        super(`VercelPostgresError - '${code}': ${message}`);\n        this.code = code;\n        this.name = \"VercelPostgresError\";\n    }\n};\n// src/postgres-connection-string.ts\nfunction postgresConnectionString(type = \"pool\") {\n    let connectionString;\n    switch(type){\n        case \"pool\":\n            {\n                connectionString = process.env.POSTGRES_URL;\n                break;\n            }\n        case \"direct\":\n            {\n                connectionString = process.env.POSTGRES_URL_NON_POOLING;\n                break;\n            }\n        default:\n            {\n                const _exhaustiveCheck = type;\n                const str = _exhaustiveCheck;\n                throw new VercelPostgresError(\"invalid_connection_type\", `Unhandled type: ${str}`);\n            }\n    }\n    if (connectionString === \"undefined\") connectionString = void 0;\n    return connectionString;\n}\nfunction isPooledConnectionString(connectionString) {\n    return connectionString.includes(\"-pooler.\");\n}\nfunction isDirectConnectionString(connectionString) {\n    return !isPooledConnectionString(connectionString);\n}\nfunction isLocalhostConnectionString(connectionString) {\n    try {\n        const withHttpsProtocol = connectionString.replace(/^postgresql:\\/\\//, \"https://\");\n        return new URL(withHttpsProtocol).hostname === \"localhost\";\n    } catch (err) {\n        if (err instanceof TypeError) {\n            return false;\n        }\n        if (typeof err === \"object\" && err !== null && \"message\" in err && typeof err.message === \"string\" && err.message === \"Invalid URL\") {\n            return false;\n        }\n        throw err;\n    }\n}\n// src/sql-template.ts\nfunction sqlTemplate(strings, ...values) {\n    var _a, _b;\n    if (!isTemplateStringsArray(strings) || !Array.isArray(values)) {\n        throw new VercelPostgresError(\"incorrect_tagged_template_call\", \"It looks like you tried to call `sql` as a function. Make sure to use it as a tagged template.\\n\tExample: sql`SELECT * FROM users`, not sql('SELECT * FROM users')\");\n    }\n    let result = (_a = strings[0]) != null ? _a : \"\";\n    for(let i = 1; i < strings.length; i++){\n        result += `$${i}${(_b = strings[i]) != null ? _b : \"\"}`;\n    }\n    return [\n        result,\n        values\n    ];\n}\nfunction isTemplateStringsArray(strings) {\n    return Array.isArray(strings) && \"raw\" in strings && Array.isArray(strings.raw);\n}\n// src/create-client.ts\n\nvar VercelClient = class extends _neondatabase_serverless__WEBPACK_IMPORTED_MODULE_0__.Client {\n    /**\n   * A template literal tag providing safe, easy to use SQL parameterization.\n   * Parameters are substituted using the underlying Postgres database, and so must follow\n   * the rules of Postgres parameterization.\n   * @example\n   * ```ts\n   * const pool = createClient();\n   * const userId = 123;\n   * await client.connect();\n   * const result = await pool.sql`SELECT * FROM users WHERE id = ${userId}`;\n   * // Equivalent to: await pool.query('SELECT * FROM users WHERE id = $1', [id]);\n   * await client.end();\n   * ```\n   * @returns A promise that resolves to the query result.\n   */ async sql(strings, ...values) {\n        const [query, params] = sqlTemplate(strings, ...values);\n        return this.query(query, params);\n    }\n};\nfunction createClient(config) {\n    var _a;\n    const connectionString = (_a = config == null ? void 0 : config.connectionString) != null ? _a : postgresConnectionString(\"direct\");\n    if (!connectionString) throw new VercelPostgresError(\"missing_connection_string\", \"You did not supply a 'connectionString' and no 'POSTGRES_URL_NON_POOLING' env var was found.\");\n    if (!isLocalhostConnectionString(connectionString) && !isDirectConnectionString(connectionString)) throw new VercelPostgresError(\"invalid_connection_string\", \"This connection string is meant to be used with a pooled connection. Try `createPool()` instead.\");\n    return new VercelClient({\n        ...config,\n        connectionString\n    });\n}\n// src/create-pool.ts\nvar VercelPool = class extends _neondatabase_serverless__WEBPACK_IMPORTED_MODULE_0__.Pool {\n    constructor(config){\n        var _a;\n        super(config);\n        this.Client = VercelClient;\n        this.connectionString = (_a = config.connectionString) != null ? _a : \"\";\n    }\n    /**\n   * A template literal tag providing safe, easy to use SQL parameterization.\n   * Parameters are substituted using the underlying Postgres database, and so must follow\n   * the rules of Postgres parameterization.\n   * @example\n   * ```ts\n   * const pool = createPool();\n   * const userId = 123;\n   * const result = await pool.sql`SELECT * FROM users WHERE id = ${userId}`;\n   * // Equivalent to: await pool.query('SELECT * FROM users WHERE id = $1', [id]);\n   * ```\n   * @returns A promise that resolves to the query result.\n   */ async sql(strings, ...values) {\n        const [query, params] = sqlTemplate(strings, ...values);\n        const sql2 = (0,_neondatabase_serverless__WEBPACK_IMPORTED_MODULE_0__.neon)(this.connectionString, {\n            fullResults: true\n        });\n        return sql2(query, params);\n    }\n    connect(callback) {\n        return super.connect(callback);\n    }\n};\nfunction createPool(config) {\n    var _a;\n    const connectionString = (_a = config == null ? void 0 : config.connectionString) != null ? _a : postgresConnectionString(\"pool\");\n    if (!connectionString) throw new VercelPostgresError(\"missing_connection_string\", \"You did not supply a 'connectionString' and no 'POSTGRES_URL' env var was found.\");\n    if (!isLocalhostConnectionString(connectionString) && !isPooledConnectionString(connectionString)) throw new VercelPostgresError(\"invalid_connection_string\", \"This connection string is meant to be used with a direct connection. Make sure to use a pooled connection string or try `createClient()` instead.\");\n    let maxUses = config == null ? void 0 : config.maxUses;\n    let max = config == null ? void 0 : config.max;\n    if (typeof EdgeRuntime !== \"undefined\") {\n        if (maxUses && maxUses !== 1) {\n            console.warn(\"@vercel/postgres: Overriding `maxUses` to 1 because the EdgeRuntime does not support client reuse.\");\n        }\n        if (max && max !== 1e4) {\n            console.warn(\"@vercel/postgres: Overriding `max` to 10,000 because the EdgeRuntime does not support client reuse.\");\n        }\n        maxUses = 1;\n        max = 1e4;\n    }\n    const pool2 = new VercelPool({\n        ...config,\n        connectionString,\n        maxUses,\n        max\n    });\n    return pool2;\n}\n// src/index.ts\n\nvar pool;\nvar sql = new Proxy(// eslint-disable-next-line @typescript-eslint/no-empty-function -- [@vercel/style-guide@5 migration]\n()=>{}, {\n    get (_, prop) {\n        if (!pool) {\n            pool = createPool();\n        }\n        const val = Reflect.get(pool, prop);\n        if (typeof val === \"function\") {\n            return val.bind(pool);\n        }\n        return val;\n    },\n    apply (_, __, argumentsList) {\n        if (!pool) {\n            pool = createPool();\n        }\n        return pool.sql(...argumentsList);\n    }\n});\nvar db = sql;\n //# sourceMappingURL=chunk-7IR77QAQ.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@vercel/postgres/dist/chunk-7IR77QAQ.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@vercel/postgres/dist/index-node.js":
/*!**********************************************************!*\
  !*** ./node_modules/@vercel/postgres/dist/index-node.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   VercelClient: () => (/* reexport safe */ _chunk_7IR77QAQ_js__WEBPACK_IMPORTED_MODULE_0__.VercelClient),\n/* harmony export */   VercelPool: () => (/* reexport safe */ _chunk_7IR77QAQ_js__WEBPACK_IMPORTED_MODULE_0__.VercelPool),\n/* harmony export */   createClient: () => (/* reexport safe */ _chunk_7IR77QAQ_js__WEBPACK_IMPORTED_MODULE_0__.createClient),\n/* harmony export */   createPool: () => (/* reexport safe */ _chunk_7IR77QAQ_js__WEBPACK_IMPORTED_MODULE_0__.createPool),\n/* harmony export */   db: () => (/* reexport safe */ _chunk_7IR77QAQ_js__WEBPACK_IMPORTED_MODULE_0__.db),\n/* harmony export */   postgresConnectionString: () => (/* reexport safe */ _chunk_7IR77QAQ_js__WEBPACK_IMPORTED_MODULE_0__.postgresConnectionString),\n/* harmony export */   sql: () => (/* reexport safe */ _chunk_7IR77QAQ_js__WEBPACK_IMPORTED_MODULE_0__.sql),\n/* harmony export */   types: () => (/* reexport safe */ _chunk_7IR77QAQ_js__WEBPACK_IMPORTED_MODULE_0__.types)\n/* harmony export */ });\n/* harmony import */ var _chunk_7IR77QAQ_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chunk-7IR77QAQ.js */ \"(action-browser)/./node_modules/@vercel/postgres/dist/chunk-7IR77QAQ.js\");\n/* harmony import */ var _neondatabase_serverless__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @neondatabase/serverless */ \"(action-browser)/./node_modules/@neondatabase/serverless/index.mjs\");\n/* harmony import */ var ws__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ws */ \"(action-browser)/./node_modules/ws/wrapper.mjs\");\n\n// src/index-node.ts\n\n\nif (_neondatabase_serverless__WEBPACK_IMPORTED_MODULE_1__.neonConfig) {\n    _neondatabase_serverless__WEBPACK_IMPORTED_MODULE_1__.neonConfig.webSocketConstructor = ws__WEBPACK_IMPORTED_MODULE_2__[\"default\"];\n}\n //# sourceMappingURL=index-node.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AdmVyY2VsL3Bvc3RncmVzL2Rpc3QvaW5kZXgtbm9kZS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztBQVM2QjtBQUU3QixvQkFBb0I7QUFDa0M7QUFDbEM7QUFDcEIsSUFBSVEsZ0VBQVVBLEVBQUU7SUFDZEEsZ0VBQVVBLENBQUNFLG9CQUFvQixHQUFHRCwwQ0FBRUE7QUFDdEM7QUFVRSxDQUNGLHNDQUFzQyIsInNvdXJjZXMiOlsid2VicGFjazovL3NhbmR3aWNoLW1ha2VyLy4vbm9kZV9tb2R1bGVzL0B2ZXJjZWwvcG9zdGdyZXMvZGlzdC9pbmRleC1ub2RlLmpzPzFhOGQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgVmVyY2VsQ2xpZW50LFxuICBWZXJjZWxQb29sLFxuICBjcmVhdGVDbGllbnQsXG4gIGNyZWF0ZVBvb2wsXG4gIGRiLFxuICBwb3N0Z3Jlc0Nvbm5lY3Rpb25TdHJpbmcsXG4gIHNxbCxcbiAgdHlwZXNcbn0gZnJvbSBcIi4vY2h1bmstN0lSNzdRQVEuanNcIjtcblxuLy8gc3JjL2luZGV4LW5vZGUudHNcbmltcG9ydCB7IG5lb25Db25maWcgfSBmcm9tIFwiQG5lb25kYXRhYmFzZS9zZXJ2ZXJsZXNzXCI7XG5pbXBvcnQgd3MgZnJvbSBcIndzXCI7XG5pZiAobmVvbkNvbmZpZykge1xuICBuZW9uQ29uZmlnLndlYlNvY2tldENvbnN0cnVjdG9yID0gd3M7XG59XG5leHBvcnQge1xuICBWZXJjZWxDbGllbnQsXG4gIFZlcmNlbFBvb2wsXG4gIGNyZWF0ZUNsaWVudCxcbiAgY3JlYXRlUG9vbCxcbiAgZGIsXG4gIHBvc3RncmVzQ29ubmVjdGlvblN0cmluZyxcbiAgc3FsLFxuICB0eXBlc1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LW5vZGUuanMubWFwIl0sIm5hbWVzIjpbIlZlcmNlbENsaWVudCIsIlZlcmNlbFBvb2wiLCJjcmVhdGVDbGllbnQiLCJjcmVhdGVQb29sIiwiZGIiLCJwb3N0Z3Jlc0Nvbm5lY3Rpb25TdHJpbmciLCJzcWwiLCJ0eXBlcyIsIm5lb25Db25maWciLCJ3cyIsIndlYlNvY2tldENvbnN0cnVjdG9yIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@vercel/postgres/dist/index-node.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@vercel/postgres/dist/index-node.js":
/*!**********************************************************!*\
  !*** ./node_modules/@vercel/postgres/dist/index-node.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   VercelClient: () => (/* reexport safe */ _chunk_7IR77QAQ_js__WEBPACK_IMPORTED_MODULE_0__.VercelClient),\n/* harmony export */   VercelPool: () => (/* reexport safe */ _chunk_7IR77QAQ_js__WEBPACK_IMPORTED_MODULE_0__.VercelPool),\n/* harmony export */   createClient: () => (/* reexport safe */ _chunk_7IR77QAQ_js__WEBPACK_IMPORTED_MODULE_0__.createClient),\n/* harmony export */   createPool: () => (/* reexport safe */ _chunk_7IR77QAQ_js__WEBPACK_IMPORTED_MODULE_0__.createPool),\n/* harmony export */   db: () => (/* reexport safe */ _chunk_7IR77QAQ_js__WEBPACK_IMPORTED_MODULE_0__.db),\n/* harmony export */   postgresConnectionString: () => (/* reexport safe */ _chunk_7IR77QAQ_js__WEBPACK_IMPORTED_MODULE_0__.postgresConnectionString),\n/* harmony export */   sql: () => (/* reexport safe */ _chunk_7IR77QAQ_js__WEBPACK_IMPORTED_MODULE_0__.sql),\n/* harmony export */   types: () => (/* reexport safe */ _chunk_7IR77QAQ_js__WEBPACK_IMPORTED_MODULE_0__.types)\n/* harmony export */ });\n/* harmony import */ var _chunk_7IR77QAQ_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chunk-7IR77QAQ.js */ \"(rsc)/./node_modules/@vercel/postgres/dist/chunk-7IR77QAQ.js\");\n/* harmony import */ var _neondatabase_serverless__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @neondatabase/serverless */ \"(rsc)/./node_modules/@neondatabase/serverless/index.mjs\");\n/* harmony import */ var ws__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ws */ \"(rsc)/./node_modules/ws/wrapper.mjs\");\n\n// src/index-node.ts\n\n\nif (_neondatabase_serverless__WEBPACK_IMPORTED_MODULE_1__.neonConfig) {\n    _neondatabase_serverless__WEBPACK_IMPORTED_MODULE_1__.neonConfig.webSocketConstructor = ws__WEBPACK_IMPORTED_MODULE_2__[\"default\"];\n}\n //# sourceMappingURL=index-node.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHZlcmNlbC9wb3N0Z3Jlcy9kaXN0L2luZGV4LW5vZGUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7QUFTNkI7QUFFN0Isb0JBQW9CO0FBQ2tDO0FBQ2xDO0FBQ3BCLElBQUlRLGdFQUFVQSxFQUFFO0lBQ2RBLGdFQUFVQSxDQUFDRSxvQkFBb0IsR0FBR0QsMENBQUVBO0FBQ3RDO0FBVUUsQ0FDRixzQ0FBc0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zYW5kd2ljaC1tYWtlci8uL25vZGVfbW9kdWxlcy9AdmVyY2VsL3Bvc3RncmVzL2Rpc3QvaW5kZXgtbm9kZS5qcz8xYThkIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIFZlcmNlbENsaWVudCxcbiAgVmVyY2VsUG9vbCxcbiAgY3JlYXRlQ2xpZW50LFxuICBjcmVhdGVQb29sLFxuICBkYixcbiAgcG9zdGdyZXNDb25uZWN0aW9uU3RyaW5nLFxuICBzcWwsXG4gIHR5cGVzXG59IGZyb20gXCIuL2NodW5rLTdJUjc3UUFRLmpzXCI7XG5cbi8vIHNyYy9pbmRleC1ub2RlLnRzXG5pbXBvcnQgeyBuZW9uQ29uZmlnIH0gZnJvbSBcIkBuZW9uZGF0YWJhc2Uvc2VydmVybGVzc1wiO1xuaW1wb3J0IHdzIGZyb20gXCJ3c1wiO1xuaWYgKG5lb25Db25maWcpIHtcbiAgbmVvbkNvbmZpZy53ZWJTb2NrZXRDb25zdHJ1Y3RvciA9IHdzO1xufVxuZXhwb3J0IHtcbiAgVmVyY2VsQ2xpZW50LFxuICBWZXJjZWxQb29sLFxuICBjcmVhdGVDbGllbnQsXG4gIGNyZWF0ZVBvb2wsXG4gIGRiLFxuICBwb3N0Z3Jlc0Nvbm5lY3Rpb25TdHJpbmcsXG4gIHNxbCxcbiAgdHlwZXNcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC1ub2RlLmpzLm1hcCJdLCJuYW1lcyI6WyJWZXJjZWxDbGllbnQiLCJWZXJjZWxQb29sIiwiY3JlYXRlQ2xpZW50IiwiY3JlYXRlUG9vbCIsImRiIiwicG9zdGdyZXNDb25uZWN0aW9uU3RyaW5nIiwic3FsIiwidHlwZXMiLCJuZW9uQ29uZmlnIiwid3MiLCJ3ZWJTb2NrZXRDb25zdHJ1Y3RvciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@vercel/postgres/dist/index-node.js\n");

/***/ })

};
;